{"version":3,"file":"0.308aecef09ceee7a2f99.hot-update.js","sources":["webpack:///./src/layouts/LoggedInLayout/CreateCardLayout/components/DesignTool/Components/Card/tailwindComponents/CardHeader/components/TextHeader/TextHeader.tsx"],"sourcesContent":["import { useImmerState } from \"@shrugsy/use-immer-state\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Range } from \"react-range\";\r\nimport SubNavbarActions from \"../../../../../../../../../../../contexts/DesignTool/SubnavbarActions\";\r\nimport CardElementsFunctions from \"../../../../../../../../../../../Hooks/CardElementsFunctions\";\r\nimport { fontSizeArray } from \"../../../../../../../../../../../utils/defaults\";\r\n\r\ntype textFontSizeType = \"Header\" | \"Sub header\" | \"body text\"\r\n\r\ninterface Props {\r\n    handleDeleteClick: any\r\n}\r\n\r\ntype T_FontStype = \"normal\" | \"italic\" | \"bold\" | \"italic bold\"\r\n\r\nconst TextHeader: React.FC<Props> = ({ handleDeleteClick }): JSX.Element => {\r\n    const [showModal, setShowModal] = React.useState(false);\r\n    const [showeModal, seteShowModal] = React.useState(false);\r\n    const [values, setValues] = React.useState<any>([100])\r\n    const { getSelectedElementData, handleFontStyle, handleTextAlign, handleTextOpacity, handleDeleteSelectedItem, handleChangeFontSize } = CardElementsFunctions()\r\n    const { selectTextToolSubNav, selectEffectToolSubNav, selectFontColorToolSubNav } = SubNavbarActions()\r\n    const [openDropDown, setopenDropDown] = useState(false);\r\n    const [fontStyle, setFontStyle] = useImmerState({ bold: false, italic: false })\r\n\r\n    const selectedText = getSelectedElementData()\r\n\r\n    useEffect(() => {\r\n        if (!!selectedText) {\r\n            handleChangeFontStyle()\r\n        }\r\n    }, [fontStyle, selectedText])\r\n\r\n    const handleSetBold = () => {\r\n        setFontStyle(prev => { prev.bold = !prev.bold })\r\n    }\r\n    const hanldeSetItalic = () => {\r\n        setFontStyle(prev => { prev.italic = !prev.italic })\r\n    }\r\n\r\n    const handleChangeFontStyle = () => {\r\n\r\n        const result = `${!fontStyle.bold && !fontStyle.italic ? \"normal\" : `${fontStyle.italic ? \"italic\" : \"\"} ${fontStyle.bold ? \"bold\" : \"\"}`}`\r\n\r\n        handleFontStyle(result as T_FontStype)\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-row items-center justify-center gap-4 px-6 h-full \">\r\n            <div className=\"flex items-center\">\r\n                <div className=\"relative inline-block text-left  \">\r\n                    <div\r\n                        role=\"menu\"\r\n                        aria-orientation=\"vertical\"\r\n                        aria-labelledby=\"menu-button\"\r\n                    >\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"inline-flex  w-full px-4 py-2 text-sm font-medium bg-white border rounded-md shadow-sm border-bordercolor text-gray900 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500\"\r\n                            id=\"menu-button\"\r\n                            aria-expanded=\"true\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={selectTextToolSubNav}\r\n                            style={{ fontFamily: selectedText?.fontFamily }}\r\n                        >\r\n                            {selectedText?.fontFamily}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"z-10 flex items-center\">\r\n                <div\r\n                    className=\"relative mt-1\"\r\n                    onClick={() => setopenDropDown(!!openDropDown ? false : true)}\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"relative flex flex-row  items-center  py-2 px-4 text-left border-2 rounded-lg shadow-sm  h-10 border-bordercolor hover:bg-lightindigo focus:outline-none focus:ring-border  sm:text-sm\"\r\n                        aria-haspopup=\"listbox\"\r\n                        aria-expanded=\"true\"\r\n                        aria-labelledby=\"listbox-label\"\r\n                    >\r\n                        {!!selectedText ? fontSizeArray.find(item => item.size === selectedText.fontSize)?.name : \"Heading\"}\r\n                    </button>\r\n                    <ul\r\n                        className=\"absolute  py-1 mt-1 overflow-auto w-32 text-base bg-white rounded-md shadow-lg max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\"\r\n                        role=\"listbox\"\r\n                        aria-labelledby=\"listbox-label\"\r\n                        aria-activedescendant=\"listbox-option-3\"\r\n                        style={{ display: openDropDown ? \"\" : \"none\" }}\r\n                    >\r\n                        <li\r\n                            className=\"relative  py-2  mr-8 text-gray-900  w-32 cursor-default select-none \"\r\n                            id=\"listbox-option-0\"\r\n                            role=\"option\"\r\n                        >\r\n                            {fontSizeArray.map((item, index) => (\r\n                                <div key={index} className=\"flex mb-2 \">\r\n                                    <button className=\"flex w-full mx-1 px-4 py-1 rounded-md hover:bg-lightindigo\" onClick={() => handleChangeFontSize(item.name as textFontSizeType)}>\r\n                                        {item.name}\r\n                                    </button>\r\n                                </div>\r\n                            ))}\r\n\r\n\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    <div>\r\n                        <button className=\"ml-10 text-lg font-bold text-black\" onClick={selectFontColorToolSubNav}>\r\n\r\n                            <svg className=\"mt-2\" width=\"30\" height=\"30\" viewBox=\"0 0 36 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M12.392 27L13.9943 22.3807H20.8125L22.4062 27H25.2017L18.9205 9.54545H15.8778L9.59659 27H12.392ZM14.7614 20.1648L17.3352 12.7159H17.4716L20.0455 20.1648H14.7614Z\" fill=\"black\" />\r\n                                <g filter=\"url(#filter0_dd)\">\r\n                                    <rect x=\"3\" y=\"30\" width=\"30\" height=\"4\" rx=\"2\" fill=\"#F9FAFB\" />\r\n                                </g>\r\n                                <rect x=\"3\" y=\"30\" width=\"17\" height=\"4\" rx=\"2\" fill=\"#6366F1\" />\r\n                                <defs>\r\n                                    <filter id=\"filter0_dd\" x=\"0\" y=\"28\" width=\"36\" height=\"10\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\">\r\n                                        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\r\n                                        <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\r\n                                        <feOffset dy=\"1\" />\r\n                                        <feGaussianBlur stdDeviation=\"1\" />\r\n                                        <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.06 0\" />\r\n                                        <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\" />\r\n                                        <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\r\n                                        <feOffset dy=\"1\" />\r\n                                        <feGaussianBlur stdDeviation=\"1.5\" />\r\n                                        <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0\" />\r\n                                        <feBlend mode=\"normal\" in2=\"effect1_dropShadow\" result=\"effect2_dropShadow\" />\r\n                                        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect2_dropShadow\" result=\"shape\" />\r\n                                    </filter>\r\n                                </defs>\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"\">\r\n                    <button className={\"ml-4 text-lg font-bold text-black w-10 h-10 rounded-md\" + (\r\n                        selectedText?.fontStyle?.includes(\"bold\") ? \" bg-lightindigo\" : \"\"\r\n                    )}\r\n                        onClick={handleSetBold}>B</button>\r\n                </div>\r\n                <div>\r\n                    <button className={\"ml-4 text-lg italic font-bold text-black w-10 h-10 rounded-md\" + (\r\n                        selectedText?.fontStyle?.includes(\"italic\") ? \" bg-lightindigo\" : \"\"\r\n                    )}\r\n                        onClick={hanldeSetItalic}>\r\n                        I\r\n                    </button>\r\n                </div>\r\n                <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                <div className=\"relative\">\r\n\r\n\r\n                    <button className={\"ml-6  rounded-md hover:bg-lightindigo h-10 w-10 pl-2  \" + (showModal ? \"ring-2 ring-indigo600\" : \"\") + (\r\n                        selectedText?.align?.includes(\"left\") ? \" ring-2 ring-indigo600\" : \"\"\r\n                    )} onClick={() => setShowModal(true)}>\r\n                        <svg\r\n                            width=\"23\"\r\n                            height=\"18\"\r\n                            viewBox=\"0 0 23 18\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M1 1H22M1 9H11.5M1 17H22\"\r\n                                stroke=\"#4B5563\"\r\n                                stroke-width=\"2\"\r\n                                stroke-linecap=\"round\"\r\n                                stroke-linejoin=\"round\"\r\n                            />\r\n                        </svg>\r\n                    </button>\r\n\r\n                    <div className=\" absolute\">\r\n                        {showModal ? (\r\n                            <>\r\n\r\n                                <div className=\"z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n                                    <div className=\"flex items-end justify-center min-h-screen px-4 pb-20  text-center sm:block sm:p-0\">\r\n\r\n                                        <div onClick={() => setShowModal(false)} className=\"fixed inset-0  transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n\r\n\r\n\r\n                                        <div className=\" border-2 border-bordercolor inline-block align-bottom w-40 bg-white rounded-lg px-4 justify-center overflow-hidden shadow-md transform transition-all top-0 mt-2 self-end right-0 \"\r\n                                        >\r\n\r\n                                            <div className=\"w-full flex gap-4 justify-center \">\r\n\r\n\r\n                                                <button className={\"hover:bg-lightindigo px-2 my-2 h-10 rounded-md w-10 flex  items-center justify-center\" + (\r\n                                                    selectedText?.align?.includes(\"left\") ? \" bg-lightindigo\" : \"\"\r\n                                                )} onClick={() => handleTextAlign(\"left\")}><svg className=\" \" width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <path d=\"M1 1H17M1 7H17M1 13H8\" stroke=\"#111827\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                                    </svg>\r\n                                                </button>\r\n                                                <button className={\"hover:bg-lightindigo px-2 my-2 h-10 rounded-md w-10 flex items-center justify-center\" + (\r\n                                                    selectedText?.align?.includes(\"center\") ? \" bg-lightindigo\" : \"\"\r\n                                                )} onClick={() => handleTextAlign(\"center\")}><svg width=\"18\" height=\"10\" viewBox=\"0 0 18 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <path d=\"M1 1H17M1 9H17\" stroke=\"#111827\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                                    </svg>\r\n\r\n                                                </button>\r\n                                                <button className={\"hover:bg-lightindigo px-2 my-2 h-10 rounded-md w-10 flex items-center justify-center\" + (\r\n                                                    selectedText?.align?.includes(\"right\") ? \" bg-lightindigo\" : \"\"\r\n                                                )} onClick={() => handleTextAlign(\"right\")}>\r\n                                                    <svg width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <path d=\"M1 1H17M1 7H17M10 13H17\" stroke=\"#111827\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                                    </svg>\r\n\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n                <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                <div className=\"ml-6 text-lg italic font-bold text-black hover:bg-lightindigo px-3 py-1 rounded hover:ring-2 ring-indigo600 \">\r\n                    <button onClick={selectEffectToolSubNav} >Effects</button>\r\n\r\n                </div>\r\n\r\n                <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                <div className=\" relative\">\r\n                    <button className={showeModal ? \"ml-6  hover:bg-lightindigo h-10 w-10 px-1 rounded-md border-2 border-indigo600 \" : \"ml-6  hover:bg-lightindigo h-10 w-10 pl-2 rounded-md  \"} onClick={() => { seteShowModal(true); setopenDropDown(false) }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><g fill=\"currentColor\" fill-rule=\"evenodd\"><path d=\"M3 2h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1z\"></path><path d=\"M11 2h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1z\" opacity=\".45\"></path><path d=\"M19 2h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1z\" opacity=\".15\"></path><path d=\"M7 6h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1z\" opacity=\".7\"></path><path d=\"M15 6h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm0 8h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1z\" opacity=\".3\"></path></g></svg>\r\n                    </button>\r\n                    <div className=\" absolute\">\r\n                        {showeModal ? (\r\n                            <>\r\n\r\n                                <div className=\" z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n                                    <div className=\" flex items-end justify-center  min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                                        <div onClick={() => seteShowModal(false)} className=\"fixed inset-0  transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n\r\n\r\n                                        <div className=\"border border-bordercolor  inline-block align-bottom w-40  items-center bg-white rounded-lg px-4 justify-center overflow-hidden shadow-md transform transition-all top-0 right-0 mt-2 \" >\r\n\r\n                                            <div className=\"w-full flex gap-4 justify-center \">\r\n\r\n\r\n                                                <Range\r\n                                                    step={1}\r\n                                                    min={1}\r\n                                                    max={100}\r\n                                                    values={values}\r\n                                                    onChange={(values) => {\r\n                                                        setValues(values);\r\n                                                        handleTextOpacity(values as any / 100)\r\n                                                    }}\r\n                                                    renderTrack={({ props, children }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-full h-3 pr-2 my-4 bg-gray-200 rounded-md\"\r\n                                                        >\r\n                                                            {children}\r\n                                                        </div>\r\n                                                    )}\r\n                                                    renderThumb={({ props }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-4 h-4 transform translate-x-10 bg-indigo600 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                                                        />\r\n\r\n                                                    )}\r\n                                                />\r\n                                                <input className=\"ml-3 w-9 focus:outline-none\" min=\"0\" max=\"100\" value={values} onChange={(e) => {\r\n                                                    if (!(parseFloat(e.target.value) > 100)) {\r\n                                                        setValues([e.target.value]);\r\n                                                        handleTextOpacity(parseFloat(e.target.value) / 100)\r\n                                                    }\r\n\r\n                                                }}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n                <div className=\"py-4 ml-4 border-r-2 border-bordercolor\"></div>\r\n                <div >\r\n                    <button className=\" flex bg-transparent hover:bg-deletecolor rounded-md w-10 h-9 items-center justify-center ml-3\" onClick={handleDeleteClick}>\r\n                        <svg width=\"20\" height=\"23\" viewBox=\"0 0 15 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M13.1875 4.56858L12.4828 12.9017C12.4221 13.6199 11.7145 14.1764 10.8619 14.1764H4.13807C3.28553 14.1764 2.57794 13.6199 2.5172 12.9017L1.8125 4.56858M5.875 7.31368V11.4313M9.125 7.31368V11.4313M9.9375 4.56858V2.50976C9.9375 2.13074 9.57373 1.82349 9.125 1.82349H5.875C5.42627 1.82349 5.0625 2.13074 5.0625 2.50976V4.56858M1 4.56858H14\" stroke=\"#B91C1C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                        </svg>\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\nexport default TextHeader;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcclBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;;;;A","sourceRoot":""}