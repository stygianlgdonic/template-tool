{"version":3,"file":"0.00584c75040628792b1a.hot-update.js","sources":["webpack:///./src/layouts/LoggedInLayout/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UTransformer.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Transformer } from 'react-konva'\r\nimport ImageFallbackModal from '../tailwindComponents/CardHeader/components/ImageFallbackModal/ImageFallbackModal';\r\nimport { Html } from \"react-konva-utils\"\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    $tr: any\r\n    selectedShapeName: any\r\n    setSelectedId: any\r\n    cardData: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({\r\n    id,\r\n    $tr,\r\n    selectedShapeName,\r\n    setSelectedId,\r\n    cardData\r\n}) => {\r\n\r\n    const [isOpenFallbackModal, setIsOpenFallbackModal] = useState<boolean>(false)\r\n    const selectedshape = cardData.elements.find(item => item.id === selectedShapeName)\r\n\r\n    useEffect(() => {\r\n        checkNode();\r\n    }, [selectedShapeName])\r\n\r\n    const checkNode = () => {\r\n        const trNodes = $tr.current.nodes()\r\n        const stage = $tr.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            $tr.current.nodes([selectedNode])\r\n        } else {\r\n            !trNodes.length && $tr.current.detach();\r\n            setSelectedId(null)\r\n        }\r\n        $tr.current.getLayer().batchDraw();\r\n    }\r\n\r\n    const handleOpenFallbackModal = () => {\r\n        const nodes = $tr.current.nodes()\r\n        if (!!nodes.length && nodes[0]?.attrs?.id.split(\"_\")[0] === \"shapes\") {\r\n            setIsOpenFallbackModal(!isOpenFallbackModal)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                // shouldOverdrawWholeArea\r\n                id={id}\r\n                ref={$tr}\r\n                padding={5}\r\n                rotationSnaps={[0, 90, 180, 270]}\r\n                ignoreStroke={true}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (selectedShapeName === \"shapes_background\") return oldBox\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            >\r\n                <Html >\r\n                    {console.log($tr.findOne('.top-right')?.position())}\r\n                    <div className={!!selectedshape?.isFrame ? \"bg-red\" : \"hidden\"} style={{\r\n                        position: \"absolute\",\r\n                        left: $tr.findOne('.top-right')?.position().x\r\n                    }} >\r\n                        <button onClick={handleOpenFallbackModal}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                            </svg>\r\n                        </button>\r\n                        <div className={!!isOpenFallbackModal ? \"\" : \"hidden\"}>\r\n                            <ImageFallbackModal\r\n                                closeModal={() => {\r\n                                    // setIsOpenFallbackModal(false);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Html>\r\n            </Transformer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;A","sourceRoot":""}