{"version":3,"file":"0.dba73d9004c12a0c9ef7.hot-update.js","sources":["webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/MainStage/index.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UTransformer.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/index.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/tailwindComponents/CardHeader/components/ElementHeader/ElementHeader.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/tailwindComponents/CardHeader/components/TextHeader/TextHeader.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/SubNavBar/components/ImageSelector/components/Frames/Frames.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/SubNavBar/components/TextSelector/components/FontColortool/FontColortool.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { Stage, Layer, Rect } from 'react-konva';\r\nimport Rectangle from \"../Rectangle\"\r\nimport UCircle from \"../UCircle\"\r\nimport UPolygon from \"../UPolygon\"\r\nimport ULine from \"../ULine\"\r\nimport USvg from \"../USvg\"\r\nimport UText from \"../UText\"\r\nimport TransformerComponent from \"../UTransformer\"\r\nimport { stageDimensions } from '../../../../../../../../utils/defaults';\r\nimport UImage from '../UImage';\r\nimport CardHeaderActions from '../../../../../../../../contexts/DesignTool/CardHeaderActions';\r\n\r\ndeclare const window: any\r\n\r\nconst MainStage = ({\r\n    cardData,\r\n    setCardData,\r\n    selectedId,\r\n    setSelectedId,\r\n}) => {\r\n\r\n    const { emptyCardHeader } = CardHeaderActions()\r\n\r\n    // snapping distance\r\n    const GUIDELINE_OFFSET = 10\r\n    const $stage = useRef(null)\r\n    const $layer = useRef(null)\r\n    const $tr = useRef(null)\r\n    const selectionRectRef = useRef(null);\r\n    const selection = useRef({\r\n        visible: false,\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: 0,\r\n        y2: 0\r\n    });\r\n\r\n    const [nodesArray, setNodes] = useState([]);\r\n    const Konva = window.Konva;\r\n\r\n    useEffect(() => {\r\n        // if no elements are selected, empty card header \r\n        if (!nodesArray.length) {\r\n            emptyCardHeader()\r\n        }\r\n    }, [nodesArray.length])\r\n\r\n    const getLineGuideStops = skipShape => {\r\n        const vertical: any = [0, stageDimensions.width / 2, stageDimensions.width];\r\n        const horizontal: any = [0, stageDimensions.height / 2, stageDimensions.height];\r\n\r\n        // we snap over edges and center of each object on the canvas\r\n        $stage.current.find(\".object\").forEach(guideItem => {\r\n            if (guideItem === skipShape) {\r\n                return;\r\n            }\r\n            const box = guideItem.getClientRect();\r\n            // we can snap to all edges of shapes\r\n            vertical.push([box.x, box.x + box.width, box.x + box.width / 2]);\r\n            horizontal.push([box.y, box.y + box.height, box.y + box.height / 2]);\r\n        });\r\n        return {\r\n            vertical: vertical.flat(),\r\n            horizontal: horizontal.flat()\r\n        };\r\n    };\r\n\r\n    // getting snapping edges for elements on the Stage\r\n    const getObjectSnappingEdges = node => {\r\n        const box = node.getClientRect();\r\n\r\n        return {\r\n            vertical: [\r\n                {\r\n                    guide: Math.round(box.x),\r\n                    offset: Math.round(node.x() - box.x),\r\n                    snap: \"start\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.x + box.width / 2),\r\n                    offset: Math.round(node.x() - box.x - box.width / 2),\r\n                    snap: \"center\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.x + box.width),\r\n                    offset: Math.round(node.x() - box.x - box.width),\r\n                    snap: \"end\"\r\n                }\r\n            ],\r\n            horizontal: [\r\n                {\r\n                    guide: Math.round(box.y),\r\n                    offset: Math.round(node.y() - box.y),\r\n                    snap: \"start\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.y + box.height / 2),\r\n                    offset: Math.round(node.y() - box.y - box.height / 2),\r\n                    snap: \"center\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.y + box.height),\r\n                    offset: Math.round(node.y() - box.y - box.height),\r\n                    snap: \"end\"\r\n                }\r\n            ]\r\n        };\r\n    };\r\n\r\n    // getting all guidelines for snapping by calculating if the item bounds are close to the guidlinestop\r\n    const getGuides = (lineGuideStops, itemBounds) => {\r\n        const resultV = [];\r\n        const resultH = [];\r\n\r\n        lineGuideStops.vertical.forEach(lineGuide => {\r\n            itemBounds.vertical.forEach(itemBound => {\r\n                const diff = Math.abs(lineGuide - itemBound.guide);\r\n                // if the distance between guild line and object snap point is close we can consider this for snapping\r\n                if (diff < GUIDELINE_OFFSET) {\r\n                    resultV.push({\r\n                        lineGuide: lineGuide,\r\n                        diff: diff,\r\n                        snap: itemBound.snap,\r\n                        offset: itemBound.offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        lineGuideStops.horizontal.forEach(lineGuide => {\r\n            itemBounds.horizontal.forEach(itemBound => {\r\n                const diff = Math.abs(lineGuide - itemBound.guide);\r\n                // if the distance between guild line and object snap point is close we can consider this for snapping\r\n                if (diff < GUIDELINE_OFFSET) {\r\n                    resultH.push({\r\n                        lineGuide: lineGuide,\r\n                        diff: diff,\r\n                        snap: itemBound.snap,\r\n                        offset: itemBound.offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        const guides = [];\r\n\r\n        // find closest snap\r\n        const minV = resultV?.sort((a, b) => a.diff - b.diff)[0];\r\n        const minH = resultH?.sort((a, b) => a.diff - b.diff)[0];\r\n        if (minV) {\r\n            guides.push({\r\n                lineGuide: minV.lineGuide,\r\n                offset: minV.offset,\r\n                orientation: \"V\",\r\n                snap: minV.snap\r\n            });\r\n        }\r\n        if (minH) {\r\n            guides.push({\r\n                lineGuide: minH.lineGuide,\r\n                offset: minH.offset,\r\n                orientation: \"H\",\r\n                snap: minH.snap\r\n            });\r\n        }\r\n        return guides;\r\n    };\r\n\r\n    // drawing guidelines on stage\r\n    const drawGuides = guides => {\r\n        guides.forEach(lg => {\r\n            if (lg.orientation === \"H\") {\r\n                const lines = new Konva.Line({\r\n                    points: [-6000, lg.lineGuide, 6000, lg.lineGuide],\r\n                    stroke: \"rgb(0, 161, 255)\",\r\n                    strokeWidth: 1,\r\n                    name: \"guid-line\",\r\n                    dash: [4, 6]\r\n                });\r\n                $layer.current.add(lines);\r\n                $layer.current.batchDraw();\r\n            } else if (lg.orientation === \"V\") {\r\n                const lines = new Konva.Line({\r\n                    points: [lg.lineGuide, -6000, lg.lineGuide, 6000],\r\n                    stroke: \"rgb(0, 161, 255)\",\r\n                    strokeWidth: 1,\r\n                    name: \"guid-line\",\r\n                    dash: [4, 6]\r\n                });\r\n                $layer.current.add(lines);\r\n                $layer.current.batchDraw();\r\n            }\r\n        });\r\n    };\r\n\r\n    // when dragging any element snap element if its close to snap guideline\r\n    const _onDragMove = e => {\r\n        const linesArray = $layer.current.find(\".guid-line\")\r\n        if (!!linesArray.length) {\r\n            linesArray.forEach(item => item.destroy())\r\n        }\r\n        const lineGuideStops = getLineGuideStops(e.target);\r\n        const itemBounds = getObjectSnappingEdges(e.target);\r\n        const guides = getGuides(lineGuideStops, itemBounds);\r\n        if (!guides.length) {\r\n            return;\r\n        }\r\n        drawGuides(guides);\r\n        guides.forEach(lg => {\r\n            switch (lg.snap) {\r\n                case \"start\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"center\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"end\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n    };\r\n\r\n    // on drag end remove all guidelines from the stage\r\n    const _onDragEnd = e => {\r\n        const linesArray = $layer.current.find(\".guid-line\")\r\n        if (!!linesArray.length) {\r\n            linesArray.forEach(item => item.destroy())\r\n        }\r\n        $layer.current.batchDraw();\r\n    };\r\n\r\n    // const checkDeselect = (e) => {\r\n    //     // deselect when clicked on empty area\r\n    //     const clickedOnEmpty = e.target === e.target.getStage();\r\n    //     if (clickedOnEmpty) {\r\n    //         setSelectedId(null);\r\n    //         $tr.current.nodes([]);\r\n    //         setNodes([]);\r\n    //         // layerRef.current.remove(selectionRectangle);\r\n    //     }\r\n    // };\r\n\r\n    const updateSelectionRect = () => {\r\n        const node = selectionRectRef.current;\r\n        // while mouseDrag update the selection rect accordingly \r\n        node.setAttrs({\r\n            visible: selection.current.visible,\r\n            x: Math.min(selection.current.x1, selection.current.x2),\r\n            y: Math.min(selection.current.y1, selection.current.y2),\r\n            width: Math.abs(selection.current.x1 - selection.current.x2),\r\n            height: Math.abs(selection.current.y1 - selection.current.y2),\r\n            fill: \"rgba(0, 161, 255, 0.3)\"\r\n        });\r\n        node.getLayer().batchDraw();\r\n    };\r\n\r\n    const oldPos = React.useRef(null);\r\n    const onMouseDown = (e) => {\r\n        const isElement = e.target.attrs.id !== \"shapes_background\";\r\n        const isTransformer = e.target.findAncestor(\"Transformer\");\r\n\r\n        // If clicked thing is Element or Transformer then don't detach the transformer from the element(s)\r\n        if (isElement || isTransformer) {\r\n            return;\r\n        }\r\n\r\n        // Draw selection box\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.visible = true;\r\n        selection.current.x1 = pos.x;\r\n        selection.current.y1 = pos.y;\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n        oldPos.current = null;\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const selBox = selectionRectRef.current.getClientRect();\r\n\r\n        // selecting all elements which have intersection with the selection box\r\n        const elements = [];\r\n        $layer.current.find(\".object\").forEach((elementNode) => {\r\n            const elBox = elementNode.getClientRect();\r\n            if (Konva.Util.haveIntersection(selBox, elBox)) {\r\n                elements.push(elementNode);\r\n            }\r\n        });\r\n        // passing all selected elements to transformer\r\n        $tr.current.nodes(elements);\r\n        setNodes(elements)\r\n\r\n        // NOTE - if only one node is within group setSelectedId for that element\r\n        if (elements?.length === 1) {\r\n            setSelectedId(elements[0].attrs.id)\r\n        } else {\r\n            setSelectedId(null)\r\n            emptyCardHeader()\r\n        }\r\n\r\n        selection.current.visible = false;\r\n        // disable click event\r\n        Konva.listenClickTap = false;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    // \r\n    // const onClickTap = (e) => {\r\n    //     // if we are selecting with rect, do nothing\r\n    //     if (selectionRectRef.current.visible()) {\r\n    //         return;\r\n    //     }\r\n    //     let stage = e.target.getStage();\r\n    //     let layer = $layer.current;\r\n    //     let tr = $tr.current;\r\n    //     // if click on empty area - remove all selections\r\n    //     if (e.target.attrs.id === stage) {\r\n    //         setSelectedId(null);\r\n    //         setNodes([]);\r\n    //         tr.nodes([]);\r\n    //         layer.draw();\r\n    //         return;\r\n    //     }\r\n\r\n    //     // do nothing if clicked NOT on our rectangles\r\n    //     if (!e.target.hasName(\".object\")) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     // do we pressed shift or ctrl?\r\n    //     const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\r\n    //     const isSelected = tr.nodes().indexOf(e.target) >= 0;\r\n\r\n    //     if (!metaPressed && !isSelected) {\r\n    //         // if no key pressed and the node is not selected\r\n    //         // select just one\r\n    //         tr.nodes([e.target]);\r\n    //     } else if (metaPressed && isSelected) {\r\n    //         // if we pressed keys and node was selected\r\n    //         // we need to remove it from selection:\r\n    //         const nodes = tr.nodes().slice(); // use slice to have new copy of array\r\n    //         // remove node from array\r\n    //         nodes.splice(nodes.indexOf(e.target), 1);\r\n    //         tr.nodes(nodes);\r\n    //     } else if (metaPressed && !isSelected) {\r\n    //         // add the node into selection\r\n    //         const nodes = tr.nodes().concat([e.target]);\r\n    //         tr.nodes(nodes);\r\n    //     }\r\n    //     layer.draw();\r\n    // };\r\n\r\n\r\n    return (\r\n        <Stage\r\n            ref={$stage}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onMouseMove={onMouseMove}\r\n            // onTouchStart={checkDeselect}\r\n            {...stageDimensions}\r\n        >\r\n            <Layer\r\n                ref={$layer}\r\n                onDragMove={_onDragMove}\r\n                onDragEnd={_onDragEnd}\r\n            >\r\n                {cardData.elements?.map((elem, i) => {\r\n                    if (elem.type === \"rectangle\") return (\r\n                        <Rectangle\r\n                            key={i}\r\n                            shapeProps={elem}\r\n                            onSelect={(e) => {\r\n                                if (e.current !== undefined) {\r\n                                    let temp = nodesArray;\r\n                                    if (!nodesArray.includes(e.current)) temp.push(e.current);\r\n                                    setNodes(temp);\r\n                                    $tr.current.nodes(nodesArray);\r\n                                    $tr.current.getLayer().batchDraw();\r\n                                }\r\n                                if (elem.id !== \"shapes_background\") {\r\n                                    setSelectedId(elem.id);\r\n                                }\r\n                            }}\r\n                            // onSelect={() => {\r\n                            //     setSelectedId(rect.id)\r\n                            // }}\r\n                            onChange={(newAttrs) => {\r\n                                setCardData((prev) => {\r\n                                    const index = prev.elements.findIndex(item => item.id === elem.id)\r\n                                    prev.elements[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    )\r\n\r\n                    if (elem.type === \"circle\") return (\r\n                        <UCircle\r\n                            key={i}\r\n                            shapeProps={elem}\r\n                            onSelect={() => {\r\n                                setSelectedId(elem.id)\r\n                            }}\r\n                            onChange={(newAttrs) => {\r\n                                setCardData((prev) => {\r\n                                    const index = prev.elements.findIndex(item => item.id === elem.id)\r\n                                    prev.elements[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    )\r\n\r\n                    if (elem.type === \"line\") return (\r\n                        <ULine\r\n                            key={i}\r\n                            shapeProps={elem}\r\n                            onSelect={() => {\r\n                                setSelectedId(elem.id)\r\n                            }}\r\n                            onChange={(newAttrs) => {\r\n                                setCardData((prev) => {\r\n                                    const index = prev.elements.findIndex(item => item.id === elem.id)\r\n                                    prev.elements[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    )\r\n\r\n                    if (elem.type === \"polygon\") return (\r\n                        <UPolygon\r\n                            key={i}\r\n                            shapeProps={elem}\r\n                            onSelect={() => {\r\n                                setSelectedId(elem.id)\r\n                            }}\r\n                            onChange={(newAttrs) => {\r\n                                setCardData((prev) => {\r\n                                    const index = prev.elements.findIndex(item => item.id === elem.id)\r\n                                    prev.elements[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    )\r\n\r\n                    if (elem.type === \"svg\") return (\r\n                        <USvg\r\n                            key={i}\r\n                            svgProps={elem}\r\n                            onSelect={() => {\r\n                                setSelectedId(elem.id)\r\n                            }}\r\n                            onChange={(event) => setCardData((prev) => {\r\n                                const svgIndex = prev.elements.findIndex(svgItem => svgItem.id === elem.id)\r\n                                prev.elements[svgIndex] = {\r\n                                    ...prev.elements[svgIndex],\r\n                                    ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                                }\r\n                            })}\r\n                        />\r\n                    )\r\n\r\n                    if (elem.type === \"image\") return (\r\n                        <UImage\r\n                            key={i}\r\n                            imageProps={elem}\r\n                            onSelect={() => {\r\n                                setSelectedId(elem.id)\r\n                            }}\r\n                            onChange={(event) => setCardData((prev) => {\r\n                                const imageIndex = prev.elements.findIndex(img => img.id === elem.id)\r\n                                prev.elements[imageIndex] = {\r\n                                    ...prev.elements[imageIndex],\r\n                                    ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                                }\r\n                            })}\r\n                        />\r\n                    )\r\n\r\n                    if (elem.type === \"text\") return (\r\n                        <UText\r\n                            key={i}\r\n                            textProps={elem}\r\n                            onSelect={() => {\r\n                                setSelectedId(elem.id)\r\n                            }}\r\n                            onChange={(event) => setCardData((prev) => {\r\n                                const txtIndex = prev.elements.findIndex(txt => txt.id === elem.id)\r\n                                prev.elements[txtIndex] = { ...event.target.attrs }\r\n                            })}\r\n                        />\r\n                    )\r\n\r\n\r\n                })}\r\n                <TransformerComponent\r\n                    id={`tr${selectedId}`}\r\n                    $tr={$tr}\r\n                    selectedShapeName={selectedId}\r\n                    setSelectedId={setSelectedId}\r\n                    cardData={cardData}\r\n                />\r\n                <Rect fill=\"rgba(0,0,255,0.5)\" ref={selectionRectRef} />\r\n            </Layer>\r\n        </Stage>\r\n    )\r\n}\r\n\r\nexport default MainStage\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Transformer } from 'react-konva'\r\nimport { DesignToolContext } from '../../../../../../../contexts/DesignTool/DesignToolContext';\r\nimport ImageFallbackModal from '../tailwindComponents/CardHeader/components/ImageFallbackModal/ImageFallbackModal';\r\nimport { Html } from \"react-konva-utils\"\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    $tr: any\r\n    selectedShapeName: any\r\n    setSelectedId: any\r\n    cardData: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({\r\n    id,\r\n    $tr,\r\n    selectedShapeName,\r\n    setSelectedId,\r\n    cardData\r\n}) => {\r\n\r\n    const [isOpenFallbackModal, setIsOpenFallbackModal] = useState<boolean>(false)\r\n    const selectedshape = cardData.elements.find(item => item.id === selectedShapeName)\r\n\r\n    useEffect(() => {\r\n        checkNode();\r\n    }, [selectedShapeName])\r\n\r\n    const checkNode = () => {\r\n        const trNodes = $tr.current.nodes()\r\n        const stage = $tr.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            $tr.current.nodes([selectedNode])\r\n        } else {\r\n            !trNodes.length && $tr.current.detach();\r\n            setSelectedId(null)\r\n        }\r\n        $tr.current.getLayer().batchDraw();\r\n    }\r\n\r\n    const handleOpenFallbackModal = () => {\r\n        const nodes = $tr.current.nodes()\r\n        if (!!nodes.length && nodes[0]?.attrs?.id.split(\"_\")[0] === \"shapes\") {\r\n            setIsOpenFallbackModal(!isOpenFallbackModal)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                id={id}\r\n                ref={$tr}\r\n                padding={5}\r\n                ignoreStroke={true}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (selectedShapeName === \"shapes_background\") return oldBox\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            >\r\n                <Html >\r\n                    <div className={!!selectedshape?.isFrame ? \"\" : \"hidden\"} >\r\n                        <button onClick={handleOpenFallbackModal}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                            </svg>\r\n                        </button>\r\n                        <div className={!!isOpenFallbackModal ? \"\" : \"hidden\"}>\r\n                            <ImageFallbackModal\r\n                                closeModal={() => {\r\n                                    // setIsOpenFallbackModal(false);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Html>\r\n            </Transformer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent","import React, { useContext, useEffect } from 'react';\r\nimport WebFont from \"webfontloader\";\r\nimport MainStage from './MainStage';\r\nimport { DesignToolContext } from '../../../../../../../contexts/DesignTool/DesignToolContext';\r\nimport CardHeaderActions from '../../../../../../../contexts/DesignTool/CardHeaderActions';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const { selectShapeCardHeader, selectTextCardHeader, emptyCardHeader } = CardHeaderActions()\r\n\r\n    const {\r\n        selectedId, setSelectedId,\r\n        cardData, setCardData,\r\n    } = useContext(DesignToolContext)\r\n\r\n    useEffect(() => {\r\n        if (!!selectedId) {\r\n            const shape = cardData.elements.find((item, index) => selectedId === item.id)\r\n            if (shape?.type === 'text') {\r\n                selectTextCardHeader()\r\n            }\r\n            if (shape?.type === 'rectangle' || shape?.type === 'svg' || shape?.type === 'circle' || shape?.type === 'polygon' || shape?.type === 'line') {\r\n                selectShapeCardHeader()\r\n            }\r\n        }\r\n\r\n\r\n    }, [selectedId])\r\n\r\n    const handleEscape = (e) => {\r\n        if (e.key === \"Escape\") {\r\n            setSelectedId(null)\r\n            emptyCardHeader()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        document.addEventListener(\"keydown\", handleEscape, false);\r\n        WebFont.load({\r\n            google: {\r\n                families: ['Comfortaa', 'Josefin Sans', 'Euphoria Script', 'Oswald', 'Alfa Slab One', 'Bangers', 'Caveat', 'DM Sans', 'East Sea Dokdo', 'Homemade Apple', 'Kristi', 'Lobster Two', 'Maven Pro', 'Monoton', 'Montserrat', 'Playfair Display', 'Press Start 2P', 'Raleway', 'Roboto Slab', 'Shadows Into Light', 'Swanky and Moo Moo']\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleEscape, false);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"min-w-max  flex justify-center flex-col h-full\">\r\n            <div className=\"flex justify-center mt-5 h-full\">\r\n                <MainStage\r\n                    cardData={cardData}\r\n                    setCardData={setCardData}\r\n                    selectedId={selectedId}\r\n                    setSelectedId={setSelectedId}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DesignTool\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Range } from \"react-range\";\r\nimport { DesignToolContext } from \"../../../../../../../../../../contexts/DesignTool/DesignToolContext\";\r\nimport SubNavbarActions from \"../../../../../../../../../../contexts/DesignTool/SubnavbarActions\";\r\nimport CardElementsFunctions from \"../../../../../../../../../../Hooks/CardElementsFunctions\";\r\n\r\nconst image = require(\"./../../../../../../../../../../assets/images/opacity.png\");\r\nconst ElementHeader: React.FC = (): JSX.Element => {\r\n    // const [openstyle, setOpenstyle] = React.useState(false);\r\n    // const [open, setOpen] = React.useState(false);\r\n    const [openstyle, setOpenstyle] = React.useState(false);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openDropDown, setopenDropDown] = useState(false);\r\n    const [values, setValues] = React.useState<any>([100])\r\n    // !!state?false:true;\r\n    const [showeModal, seteShowModal] = React.useState(false);\r\n    const { handleBorderWidthChange, handleStrokeColor, handleDeleteSelectedItem, handleTextOpacity } = CardElementsFunctions()\r\n    // !!state?false:true;\r\n\r\n    const { selectShapeColorSubNav } = SubNavbarActions()\r\n\r\n    return (\r\n        <div className=\"flex  justify-between \" style={{ width: '110.5vh', }}>\r\n            <div className=\"flex pl-12\">\r\n                <button className=\"w-10 h-10 rounded-md bg-fuschia\" onClick={selectShapeColorSubNav}></button>\r\n                <div className=\"ml-10 \">\r\n                    <div\r\n                        className=\"relative mt-1\"\r\n                        onClick={() => setopenDropDown(!!openDropDown ? false : true)}\r\n                    >\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"relative w-full text-left flex flex-row border-2  items-center rounded-lg shadow-sm h-9  px-4 border-bordercolor   focus:ring-2  focus:ring-border focus:ring-indigo600 focus:border-gray300 sm:text-sm\"\r\n                            aria-haspopup=\"listbox\"\r\n                            aria-expanded=\"true\"\r\n                            aria-labelledby=\"listbox-label\"\r\n                        >\r\n                            <p className=\"mr-3 text-elementColor\"> Select Stroke</p>\r\n                            <svg className=\"\" width=\"8\" height=\"6\" viewBox=\"0 0 8 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0.234315 0.834352C0.546734 0.521932 1.05327 0.521932 1.36569 0.834352L4 3.46867L6.63431 0.834352C6.94673 0.521932 7.45327 0.521932 7.76568 0.834352C8.0781 1.14677 8.0781 1.6533 7.76568 1.96572L4.56569 5.16573C4.25327 5.47815 3.74673 5.47815 3.43431 5.16573L0.234315 1.96572C-0.0781049 1.6533 -0.0781049 1.14677 0.234315 0.834352Z\" fill=\"#9CA3AF\" />\r\n                            </svg>\r\n\r\n\r\n                        </button>\r\n\r\n                        <ul\r\n                            className=\"absolute z-10 py-1 mt-1 overflow-auto text-base bg-white rounded-md shadow-lg w-52  ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\"\r\n                            role=\"listbox\"\r\n                            aria-labelledby=\"listbox-label\"\r\n                            aria-activedescendant=\"listbox-option-3\"\r\n                            style={{ display: openDropDown ? \"\" : \"none\" }}\r\n                        >\r\n                            <li\r\n                                className=\"relative w-full py-2 text-gray-900 cursor-default select-none \"\r\n                                id=\"listbox-option-0\"\r\n                                role=\"option\"\r\n                            >\r\n                                <div className=\"flex mt-2 mb-3 px-2\">\r\n                                    <button className=\"flex w-full border border-bordercolor  rounded justify-center hover:bg-lightindigo\" onClick={() => handleBorderWidthChange(0)}>\r\n                                        No Stroke\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"border-b border-bordercolor w-full\"></div>\r\n                                <div className=\"flex mb-1 px-2 mt-2\">\r\n                                    <button className=\"flex w-full hover:ring-2  ring-indigo600 items-center\" onClick={() => handleBorderWidthChange(15)}>\r\n                                        <span className=\"block w-full h-4 font-normal truncate  mx-1  bg-elementColor\"></span>\r\n                                    </button><p className=\"ml-2\">4</p>\r\n                                </div>\r\n\r\n                                <div className=\"flex px-2\">\r\n                                    <button className=\"flex w-full hover:ring-2  ring-indigo600 items-center\" onClick={() => handleBorderWidthChange(10)}>\r\n                                        <span className=\"block w-full h-2 font-normal truncate  mx-1  bg-elementColor\"></span>\r\n                                    </button><p className=\"ml-2\">2</p>\r\n                                </div>\r\n                                <div className=\"flex px-2 \">\r\n                                    <button className=\"flex w-full hover:ring-2  ring-indigo600 items-center\" onClick={() => handleBorderWidthChange(5)}>\r\n                                        <span className=\"block w-full h-1 font-normal truncate  mx-1  bg-elementColor\"></span>\r\n                                    </button><p className=\"ml-2\">1</p>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"border-b border-bordercolor w-full\"></div>\r\n                                <div className=\"grid grid-cols-4  mt-4 mx-3 mb-2\">\r\n                                    <button className=\"mb-1\"><svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path d=\"M20 13V27M27 20L13 20\" stroke=\"#4338CA\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                        <rect x=\"1\" y=\"1\" width=\"38\" height=\"38\" rx=\"5\" stroke=\"url(#paint0_linear)\" stroke-width=\"2\" />\r\n                                        <defs>\r\n                                            <linearGradient id=\"paint0_linear\" x1=\"20\" y1=\"0\" x2=\"20\" y2=\"40\" gradientUnits=\"userSpaceOnUse\">\r\n                                                <stop stop-color=\"#FA7D7D\" />\r\n                                                <stop offset=\"0.5\" stop-color=\"#B7EF6F\" />\r\n                                                <stop offset=\"1\" stop-color=\"#BE6FEF\" />\r\n                                            </linearGradient>\r\n                                        </defs>\r\n                                    </svg>\r\n                                    </button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-indigo600 hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#4F46E5\")} ></button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-fuschia hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#EF5DA8\")}></button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-greenish hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#5DEFC3\")}></button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-yellowish hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#EEA146\")}></button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-redish hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#EE4646\")}></button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-gray900 hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#111827\")}></button>\r\n                                    <button className=\"w-10 h-10 rounded-md bg-indigo600 hover:ring-2 ring-bluish\" onClick={() => handleStrokeColor(\"#4F46E5\")} ></button>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex flex-row  items-center  justify-between mt-1\" >\r\n\r\n                <div className=\" relative\">\r\n                    <button className=\"ml-6  hover:bg-lightindigo h-10 w-10 pl-2 rounded-md focus:ring-indigo600 ring-2 \" onClick={() => { seteShowModal(true); setopenDropDown(false) }}>\r\n                        <img src={image} />\r\n                    </button>\r\n                    <div className=\" absolute\">\r\n                        {showeModal ? (\r\n                            <>\r\n\r\n                                <div className=\" z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n                                    <div className=\" flex items-end justify-center  min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                                        <div onClick={() => seteShowModal(false)} className=\"fixed inset-0  transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n\r\n\r\n                                        <div className=\"border border-bordercolor  inline-block align-bottom w-40  items-center bg-white rounded-lg px-4 justify-center overflow-hidden shadow-md transform transition-all top-0 right-0 mt-2 \" >\r\n\r\n                                            <div className=\"w-full flex gap-4 justify-center \">\r\n\r\n\r\n                                                <Range\r\n                                                    step={1}\r\n                                                    min={1}\r\n                                                    max={100}\r\n                                                    values={values}\r\n                                                    onChange={(values) => {\r\n                                                        setValues(values);\r\n                                                        handleTextOpacity(values as any / 100)\r\n                                                    }}\r\n                                                    renderTrack={({ props, children }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-4/6 h-3 pr-2 my-4 bg-gray-200 rounded-md\"\r\n                                                        >\r\n                                                            {children}\r\n                                                        </div>\r\n                                                    )}\r\n                                                    renderThumb={({ props }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-4 h-4 transform translate-x-10 bg-indigo600 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                                                        />\r\n\r\n                                                    )}\r\n                                                />\r\n                                                <input className=\"ml-3 w-9 focus:outline-none\" min=\"0\" max=\"100\" value={values} onChange={(e) => {\r\n                                                    if (!(parseFloat(e.target.value) > 100)) {\r\n                                                        setValues([e.target.value]);\r\n                                                        handleTextOpacity(parseFloat(e.target.value) / 100)\r\n                                                    }\r\n\r\n                                                }}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n                <div className=\"py-4  ml-4 mr-2 border-r-2 border-bordercolor\"></div>\r\n                <div >\r\n                    <button className=\" flex bg-transparent hover:bg-deletecolor rounded-md w-10 h-9 items-center justify-center\" onClick={() => handleDeleteSelectedItem()}>\r\n                        <svg width=\"20\" height=\"23\" viewBox=\"0 0 15 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M13.1875 4.56858L12.4828 12.9017C12.4221 13.6199 11.7145 14.1764 10.8619 14.1764H4.13807C3.28553 14.1764 2.57794 13.6199 2.5172 12.9017L1.8125 4.56858M5.875 7.31368V11.4313M9.125 7.31368V11.4313M9.9375 4.56858V2.50976C9.9375 2.13074 9.57373 1.82349 9.125 1.82349H5.875C5.42627 1.82349 5.0625 2.13074 5.0625 2.50976V4.56858M1 4.56858H14\" stroke=\"#B91C1C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                        </svg>\r\n                    </button>\r\n\r\n                </div>\r\n                {/* <div>\r\n\r\n                    <button className=\"ml-6\" onClick={() => seteShowModal(true)}>\r\n                        <img src={image} />\r\n                    </button>\r\n                    <div>\r\n                        {showeModal ? (\r\n                            <>\r\n\r\n                                <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n                                    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                                        <div onClick={() => seteShowModal(false)} className=\"fixed inset-0  transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n\r\n\r\n                                        <div className=\" absolute inline-block align-bottom w-40  items-center bg-white rounded-lg px-4 justify-center pt-5 pb-4 overflow-hidden shadow-xl transform transition-all top-28 mt-2 self-end right-14 \">\r\n\r\n                                            <div className=\"w-full flex gap-4 justify-center \">\r\n\r\n                                                <Range\r\n                                                    step={1}\r\n                                                    min={0}\r\n                                                    max={75}\r\n                                                    values={values}\r\n                                                    onChange={(values) => {\r\n                                                        setValues(values)\r\n                                                    }}\r\n                                                    renderTrack={({ props, children }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-full h-3 pr-2 my-4 bg-gray-200 rounded-md\"\r\n                                                        >\r\n                                                            {children}\r\n                                                        </div>\r\n                                                    )}\r\n                                                    renderThumb={({ props }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-5 h-5 transform translate-x-10 bg-indigo-500 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n\r\n                    <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                    <button className=\"bg-green w\"><svg width=\"15\" height=\"16\" viewBox=\"0 0 15 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M13.1875 4.56858L12.4828 12.9017C12.4221 13.6199 11.7145 14.1764 10.8619 14.1764H4.13807C3.28553 14.1764 2.57794 13.6199 2.5172 12.9017L1.8125 4.56858M5.875 7.31368V11.4313M9.125 7.31368V11.4313M9.9375 4.56858V2.50976C9.9375 2.13074 9.57373 1.82349 9.125 1.82349H5.875C5.42627 1.82349 5.0625 2.13074 5.0625 2.50976V4.56858M1 4.56858H14\" stroke=\"#B91C1C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                    </svg>\r\n                    </button>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ElementHeader;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Range } from \"react-range\";\r\nimport { DesignToolContext } from \"../../../../../../../../../../contexts/DesignTool/DesignToolContext\";\r\nimport SubNavbarActions from \"../../../../../../../../../../contexts/DesignTool/SubnavbarActions\";\r\nimport CardElementsFunctions from \"../../../../../../../../../../Hooks/CardElementsFunctions\";\r\nimport { fontSizeArray } from \"../../../../../../../../../../utils/defaults\";\r\nconst image = require(\"./../../../../../../../../../../assets/images/opacity.png\");\r\n\r\ntype textFontSizeType = \"Header\" | \"Sub header\" | \"body text\"\r\n\r\nconst TextHeader: React.FC = (): JSX.Element => {\r\n    const [showModal, setShowModal] = React.useState(false);\r\n    const [showeModal, seteShowModal] = React.useState(false);\r\n    const [values, setValues] = React.useState([0.01])\r\n    const { handleFontStyle, handleTextAlign, handleTextOpacity, handleDeleteSelectedItem, handleChangeFontSize } = CardElementsFunctions()\r\n    const { selectTextToolSubNav, selectEffectToolSubNav, selectFontColorToolSubNav } = SubNavbarActions()\r\n    const [openDropDown, setopenDropDown] = useState(false);\r\n    const { cardData, selectedId } = useContext(DesignToolContext)\r\n\r\n    const selectedText = cardData.elements.find(item => item.id === selectedId)\r\n\r\n    return (\r\n        <div className=\"flex flex-row items-center justify-center gap-4 px-6 h-full \">\r\n            <div className=\"flex items-center\">\r\n                <div className=\"relative inline-block text-left  \">\r\n                    <div\r\n                        role=\"menu\"\r\n                        aria-orientation=\"vertical\"\r\n                        aria-labelledby=\"menu-button\"\r\n                    >\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"inline-flex  w-full px-4 py-2 text-sm font-medium bg-white border rounded-md shadow-sm border-bordercolor text-gray900 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500\"\r\n                            id=\"menu-button\"\r\n                            aria-expanded=\"true\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={selectTextToolSubNav}\r\n                            style={{ fontFamily: selectedText?.fontFamily }}\r\n                        >\r\n                            {selectedText?.fontFamily}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"z-50 flex items-center\">\r\n                <div\r\n                    className=\"relative mt-1\"\r\n                    onClick={() => setopenDropDown(!!openDropDown ? false : true)}\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"relative flex flex-row  items-center  py-2 px-4 text-left border-2 rounded-lg shadow-sm  h-10 border-bordercolor hover:bg-lightindigo focus:outline-none focus:ring-border  sm:text-sm\"\r\n                        aria-haspopup=\"listbox\"\r\n                        aria-expanded=\"true\"\r\n                        aria-labelledby=\"listbox-label\"\r\n                    >\r\n                        {!!selectedText ? fontSizeArray.find(item => item.size === selectedText.fontSize)?.name : \"Heading\"}\r\n                    </button>\r\n                    <ul\r\n                        className=\"absolute z-10 py-1 mt-1 overflow-auto w-32 text-base bg-white rounded-md shadow-lg max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\"\r\n                        role=\"listbox\"\r\n                        aria-labelledby=\"listbox-label\"\r\n                        aria-activedescendant=\"listbox-option-3\"\r\n                        style={{ display: openDropDown ? \"\" : \"none\" }}\r\n                    >\r\n                        <li\r\n                            className=\"relative  py-2  mr-8 text-gray-900  w-32 cursor-default select-none \"\r\n                            id=\"listbox-option-0\"\r\n                            role=\"option\"\r\n                        >\r\n                            {fontSizeArray.map((item, index) => (\r\n                                <div key={index} className=\"flex mb-2\">\r\n                                    <button className=\"flex w-full mx-1 px-4 py-1 rounded-md hover:bg-lightindigo\" onClick={() => handleChangeFontSize(item.name as textFontSizeType)}>\r\n                                        {item.name}\r\n                                    </button>\r\n                                </div>\r\n                            ))}\r\n                            {/* <div className=\"flex mb-2  w-full\">\r\n                                <button className=\"flex w-full mx-1 px-4 py-1 rounded-md hover:bg-lightindigo\" onClick={() => handleChangeFontSize('Sub header')} >\r\n                                    Sub Header\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"flex \">\r\n                                <button className=\"flex w-full mx-1 px-4 py-1 rounded-md hover:bg-lightindigo\" onClick={() => handleChangeFontSize('body text')}>\r\n                                    Body Text\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"\"></div> */}\r\n\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                {/* <div className=\"relative inline-block text-left \">\r\n                    <div\r\n                        role=\"menu\"\r\n                        aria-orientation=\"vertical\"\r\n                        aria-labelledby=\"menu-button\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        <button\r\n                            onClick={() => setOpen(true)}\r\n                            type=\"button\"\r\n                            className=\"inline-flex justify-center w-full px-4 py-2 text-sm font-medium bg-white border rounded-md shadow-sm border-bordercolor text-gray900 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500\"\r\n                            id=\"menu-button\"\r\n                            aria-expanded=\"true\"\r\n                            aria-haspopup=\"true\"\r\n                        >\r\n                            Heading 1\r\n                        </button>\r\n                    </div>\r\n                </div> */}\r\n\r\n                <div>\r\n                    <div>\r\n                        <button className=\"ml-10 text-lg font-bold text-black\" onClick={selectFontColorToolSubNav}>\r\n\r\n                            <svg className=\"mt-2\" width=\"30\" height=\"30\" viewBox=\"0 0 36 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M12.392 27L13.9943 22.3807H20.8125L22.4062 27H25.2017L18.9205 9.54545H15.8778L9.59659 27H12.392ZM14.7614 20.1648L17.3352 12.7159H17.4716L20.0455 20.1648H14.7614Z\" fill=\"black\" />\r\n                                <g filter=\"url(#filter0_dd)\">\r\n                                    <rect x=\"3\" y=\"30\" width=\"30\" height=\"4\" rx=\"2\" fill=\"#F9FAFB\" />\r\n                                </g>\r\n                                <rect x=\"3\" y=\"30\" width=\"17\" height=\"4\" rx=\"2\" fill=\"#6366F1\" />\r\n                                <defs>\r\n                                    <filter id=\"filter0_dd\" x=\"0\" y=\"28\" width=\"36\" height=\"10\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\">\r\n                                        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\r\n                                        <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\r\n                                        <feOffset dy=\"1\" />\r\n                                        <feGaussianBlur stdDeviation=\"1\" />\r\n                                        <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.06 0\" />\r\n                                        <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\" />\r\n                                        <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\r\n                                        <feOffset dy=\"1\" />\r\n                                        <feGaussianBlur stdDeviation=\"1.5\" />\r\n                                        <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0\" />\r\n                                        <feBlend mode=\"normal\" in2=\"effect1_dropShadow\" result=\"effect2_dropShadow\" />\r\n                                        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect2_dropShadow\" result=\"shape\" />\r\n                                    </filter>\r\n                                </defs>\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"\">\r\n                    <button className=\"ml-4 text-lg font-bold text-black w-10 h-10 hover:bg-lightindigo rounded-md\" onClick={() => handleFontStyle(\"bold\")}>B</button>\r\n                </div>\r\n                <div>\r\n                    <button className=\"ml-4 text-lg italic font-bold text-black w-10 h-10 hover:bg-lightindigo rounded-md\" onClick={() => handleFontStyle(\"italic\")}>\r\n                        I\r\n                    </button>\r\n                </div>\r\n                <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                <div className=\"relative\">\r\n\r\n\r\n                    <button className=\"ml-6  rounded-md hover:bg-lightindigo h-10 w-10 pl-2 \" onClick={() => setShowModal(true)}>\r\n                        <svg\r\n                            width=\"23\"\r\n                            height=\"18\"\r\n                            viewBox=\"0 0 23 18\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M1 1H22M1 9H11.5M1 17H22\"\r\n                                stroke=\"#4B5563\"\r\n                                stroke-width=\"2\"\r\n                                stroke-linecap=\"round\"\r\n                                stroke-linejoin=\"round\"\r\n                            />\r\n                        </svg>\r\n                    </button>\r\n\r\n                    <div className=\" absolute\">\r\n                        {showModal ? (\r\n                            <>\r\n\r\n                                <div className=\"z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n                                    <div className=\"flex items-end justify-center min-h-screen px-4 pb-20  text-center sm:block sm:p-0\">\r\n\r\n                                        <div onClick={() => setShowModal(false)} className=\"fixed inset-0  transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n                                        {/* <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span> */}\r\n\r\n\r\n                                        <div className=\" border-2 border-bordercolor inline-block align-bottom w-40 bg-white rounded-lg px-4 justify-center overflow-hidden shadow-md transform transition-all top-0 mt-2 self-end right-0 \">\r\n\r\n                                            <div className=\"w-full flex gap-4 justify-center \">\r\n\r\n\r\n                                                <button className=\"hover:bg-lightindigo h-10 rounded-md w-10 flex items-center justify-center\" onClick={() => handleTextAlign(\"left\")}><svg width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                    <path d=\"M1 1H17M1 7H17M1 13H8\" stroke=\"#111827\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                                </svg>\r\n                                                </button>\r\n                                                <button className=\"hover:bg-lightindigo h-10 rounded-md w-10 flex items-center justify-center\" onClick={() => handleTextAlign(\"center\")}><svg width=\"18\" height=\"10\" viewBox=\"0 0 18 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                    <path d=\"M1 1H17M1 9H17\" stroke=\"#111827\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                                </svg>\r\n\r\n                                                </button>\r\n                                                <button className=\"hover:bg-lightindigo h-10 rounded-md w-10 flex items-center justify-center\" onClick={() => handleTextAlign(\"right\")}>\r\n                                                    <svg width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <path d=\"M1 1H17M1 7H17M10 13H17\" stroke=\"#111827\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                                    </svg>\r\n\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n                <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                <div className=\"ml-6 text-lg italic font-bold text-black \">\r\n                    <button onClick={selectEffectToolSubNav} >Effects</button>\r\n                    {/* <Range\r\n                        step={1}\r\n                        min={0}\r\n                        max={75}\r\n                        values={values}\r\n                        onChange={(values) => {\r\n                            setValues(values)\r\n                        }}\r\n                        renderTrack={({ props, children }) => (\r\n                            <div\r\n                                {...props}\r\n                                className=\"w-full h-3 pr-2 my-4 bg-gray-200 rounded-md\"\r\n                            >\r\n                                {children}\r\n                            </div>\r\n                        )}\r\n                        renderThumb={({ props }) => (\r\n                            <div\r\n                                {...props}\r\n                                className=\"w-5 h-5 transform translate-x-10 bg-indigo-500 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                            />\r\n                        )}\r\n                    /> */}\r\n                </div>\r\n\r\n                <div className=\"py-4 ml-6 border-r-2 border-bordercolor\"></div>\r\n                <div className=\" relative\">\r\n                    <button className=\"ml-6  hover:bg-lightindigo h-10 w-10 pl-2 rounded-md\" onClick={() => seteShowModal(true)}>\r\n                        <img src={image} />\r\n                    </button>\r\n                    <div className=\" absolute\">\r\n                        {showeModal ? (\r\n                            <>\r\n\r\n                                <div className=\" z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n                                    <div className=\" flex items-end justify-center  min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                                        <div onClick={() => seteShowModal(false)} className=\"fixed inset-0  transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n                                        {/* <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span> */}\r\n\r\n\r\n                                        <div className=\"  inline-block align-bottom w-40  items-center bg-white rounded-lg px-4 justify-center overflow-hidden shadow-xl transform transition-all top-0 right-0 mt-2 \" >\r\n\r\n                                            <div className=\"w-full flex gap-4 justify-center \">\r\n\r\n                                                <Range\r\n                                                    step={0.01}\r\n                                                    min={0.01}\r\n                                                    max={1}\r\n                                                    values={values}\r\n                                                    onChange={(values) => {\r\n                                                        setValues(values);\r\n                                                        handleTextOpacity(values)\r\n                                                    }}\r\n                                                    renderTrack={({ props, children }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-full h-3 pr-2 my-4 bg-gray-400 rounded-md\"\r\n                                                        >\r\n                                                            {children}\r\n                                                        </div>\r\n                                                    )}\r\n                                                    renderThumb={({ props }) => (\r\n                                                        <div\r\n                                                            {...props}\r\n                                                            className=\"w-5 h-5 transform translate-x-10 bg-indigo600 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n                <div className=\"py-4 ml-4 border-r-2 border-bordercolor\"></div>\r\n                <div >\r\n                    <button className=\" flex bg-transparent hover:bg-deletecolor rounded-md w-10 h-9 items-center justify-center ml-3\" onClick={() => handleDeleteSelectedItem()}>\r\n                        <svg width=\"20\" height=\"23\" viewBox=\"0 0 15 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M13.1875 4.56858L12.4828 12.9017C12.4221 13.6199 11.7145 14.1764 10.8619 14.1764H4.13807C3.28553 14.1764 2.57794 13.6199 2.5172 12.9017L1.8125 4.56858M5.875 7.31368V11.4313M9.125 7.31368V11.4313M9.9375 4.56858V2.50976C9.9375 2.13074 9.57373 1.82349 9.125 1.82349H5.875C5.42627 1.82349 5.0625 2.13074 5.0625 2.50976V4.56858M1 4.56858H14\" stroke=\"#B91C1C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                        </svg>\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\nexport default TextHeader;\r\n","import React from \"react\";\r\nimport {\r\n    defaultCircle,\r\n    defaultPolygon,\r\n    defaultRect,\r\n    defaultTriangle,\r\n} from \"../../../../../../../../../../utils/defaults\";\r\n\r\nimport CardElementsFunctions from \"../../../../../../../../../../Hooks/CardElementsFunctions\";\r\nconst image1 = require(\"./../../../../../../../../../../assets/images/polygon.png\");\r\nconst image2 = require(\"./../../../../../../../../../../assets/images/circle.png\");\r\nconst image3 = require(\"./../../../../../../../../../../assets/images/square.png\");\r\nconst image4 = require(\"./../../../../../../../../../../assets/images/triangle.png\");\r\nconst Frames: React.FC = (): JSX.Element => {\r\n    const {\r\n        handleAddNewRect,\r\n        handleAddNewCircle,\r\n        handleAddNewTrianlge,\r\n        handleAddNewPolygon,\r\n    } = CardElementsFunctions();\r\n    return (\r\n        <div className=\"flex flex-col w-full \">\r\n            <div className=\"flex flex-col w-full\">\r\n                <h1 className=\"text-xl font-bold\">Frames</h1>\r\n                <div className=\"grid w-full grid-cols-4 gap-4 mt-6 \">\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewCircle({\r\n                                    ...defaultCircle,\r\n                                    isFrame: true,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image2} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewRect({\r\n                                    ...defaultRect,\r\n                                    isFrame: true,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image3} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewPolygon({\r\n                                    ...defaultPolygon,\r\n                                    isFrame: true,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image1} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewTrianlge({\r\n                                    ...defaultTriangle,\r\n                                    isFrame: true,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image4} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewCircle({\r\n                                    ...defaultCircle,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image2} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewRect({\r\n                                    ...defaultRect,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image3} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewPolygon({\r\n                                    ...defaultPolygon,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image1} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewTrianlge({\r\n                                    ...defaultTriangle,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image4} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewCircle({\r\n                                    ...defaultCircle,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image2} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewRect({\r\n                                    ...defaultRect,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image3} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewPolygon({\r\n                                    ...defaultPolygon,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image1} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={() =>\r\n                                handleAddNewTrianlge({\r\n                                    ...defaultTriangle,\r\n                                    fill: undefined,\r\n                                    patternImageUrl:\r\n                                        \"https://ca.slack-edge.com/T0100HQFETG-U01PVA68RDE-90fc2d0a43dd-72\",\r\n                                })\r\n                            }\r\n                        >\r\n                            <img src={image4} className=\"w-16 h-18\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Frames;\r\n","import React, { useEffect, useState } from 'react';\r\nimport CardElementsFunctions from '../../../../../../../../../../Hooks/CardElementsFunctions';\r\nconst image = require('./../../../../../../../../../../assets/images/custom.png');\r\nconst FontStyletool: React.FC = (): JSX.Element => {\r\n\r\n    const [colorQuery, setColorQuery] = useState<string>(\"\")\r\n    const [colorsArray, setColorsArray] = useState([])\r\n\r\n    const handleColorQueryChange = (e) => {\r\n        setColorQuery(e.target.value)\r\n    }\r\n    const { handleFill } = CardElementsFunctions()\r\n    useEffect(() => {\r\n\r\n        if (!colorQuery) return\r\n\r\n        const fetchURl = colorQuery.charAt(0) !== \"#\" ?\r\n            `https://api.color.pizza/v1/names/?name=${colorQuery}&goodnamesonly=true` :\r\n            `https://api.color.pizza/v1/?values=${colorQuery.substring(1)}&goodnamesonly=true`\r\n\r\n        fetch(fetchURl)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                const newColors = data.colors.map(item => item.hex)\r\n                newColors.splice(5)\r\n\r\n                setColorsArray(newColors)\r\n            }).catch(error => console.log(\"No colors found!\"))\r\n    }, [colorQuery])\r\n\r\n    return (\r\n\r\n        <div className=\"h-full flex flex-col w-full px-6 \">\r\n\r\n            <div className=\" flex justify-center items-center  w-full mt-6\">\r\n\r\n                <div className=\"flex h-14 rounded-md border-bordercolor border justify-center items-center w-full z-50\">\r\n                    <button>\r\n                        <span className=\"w-auto flex justify-end items-center text-grey text-sm p-3\">\r\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6 2C3.79086 2 2 3.79086 2 6C2 8.20914 3.79086 10 6 10C8.20914 10 10 8.20914 10 6C10 3.79086 8.20914 2 6 2ZM0 6C0 2.68629 2.68629 0 6 0C9.31371 0 12 2.68629 12 6C12 7.29583 11.5892 8.49572 10.8907 9.47653L15.7071 14.2929C16.0976 14.6834 16.0976 15.3166 15.7071 15.7071C15.3166 16.0976 14.6834 16.0976 14.2929 15.7071L9.47653 10.8907C8.49572 11.5892 7.29583 12 6 12C2.68629 12 0 9.31371 0 6Z\" fill=\"#9CA3AF\" />\r\n                            </svg>\r\n\r\n                        </span>\r\n                    </button>\r\n                    <input\r\n                        onChange={handleColorQueryChange}\r\n                        className=\"w-full rounded text-sm text-gray95 outline-none h-10 z-0 \" type=\"text\" placeholder=\"Try “blue” or “#43345”\" />\r\n                </div>\r\n            </div>\r\n            <div className={!!colorsArray.length ? \"\" : \"hidden\"} >\r\n                <h1 className=\"text-md text-gray40 mt-4\" >Search results</h1>\r\n                <div className=\" mt-4 flex flex-row items-center justify-between\">\r\n                    {console.log(colorsArray)}\r\n                    {\r\n                        colorsArray.map(item =>\r\n                            <button style={{ backgroundColor: item }} className=\"h-10 w-10 rounded-md\" onClick={() => handleFill(item)}></button>\r\n\r\n                        )}\r\n                </div>\r\n            </div>\r\n            <div className=\"\" >\r\n                <h1 className=\"text-md text-gray40 mt-4\" >Document Colors</h1>\r\n                <div className=\" mt-4 flex flex-row items-center justify-between\">\r\n                    <button>\r\n                        <img src={image} className=\"w-10 h-10\" />\r\n                    </button>\r\n                    <button className=\" bg-greenish h-10 w-10 rounded-md\"></button>\r\n                    <button className=\" bg-greenish h-10 w-10 rounded-md\"></button>\r\n                    <button className=\" bg-greenish h-10 w-10 rounded-md\"></button>\r\n                    <button className=\" bg-greenish h-10 w-10 rounded-md\"></button>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"border-b-2 border-bordercolor mt-6\" ></div>\r\n            <div>\r\n                <button className=\"text-md text-black mt-4\" ><span className=\"text-2xl mr-6\">+</span>Add your brand colors in Brand Kit</button>\r\n            </div>\r\n            <div className=\"border-b-2 border-bordercolor mt-4\" ></div>\r\n            <div>\r\n                <h1 className=\"text-md text-gray40 mt-4\" >Shape Colors</h1>\r\n                <div className=\" mt-4 flex flex-row items-center gap-3\">\r\n\r\n                    <button className=\"bg-indigo600 h-10 w-10 rounded-md\"></button>\r\n                    <button className=\"bg-fuschia h-10 w-10 rounded-md\"></button>\r\n                    <button className=\"bg-greenish h-10 w-10 rounded-md\"></button>\r\n                    <button className=\"bg-redish h-10 w-10 rounded-md\"></button>\r\n                    <button className=\"bg-yellowish h-10 w-10 rounded-md\"></button>\r\n                </div>\r\n            </div>\r\n            <div className=\"border-b-2 border-bordercolor mt-4\" ></div>\r\n            <div>\r\n                <h1 className=\"text-md text-gray40 mt-4\" >Default Colors</h1>\r\n                <div className=\" mt-4 flex flex-col items-center \">\r\n                    <div className=\" mt-4 flex flex-row items-center justify-between w-full\">\r\n\r\n                        <button className=\"bg-gray95 h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-indigo600 h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-fuschia h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-greenish h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-redish h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-yellowish h-10 w-10 rounded-md\"></button>\r\n                    </div>\r\n                    <div className=\" mt-4 flex flex-row items-center justify-between  w-full\">\r\n\r\n                        <button className=\"bg-canvasbgcolor h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-gray95 h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-lightindigo h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-fuschia h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-greenish h-10 w-10 rounded-md\"></button>\r\n                        <button className=\"bg-yellowish h-10 w-10 rounded-md\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default FontStyletool;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AA7BA;AAoCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AACA;AA/CA;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAjBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChjBA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA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AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtsourceRoot":""}