{"version":3,"file":"0.af04dec18a2145f41054.hot-update.js","sources":["webpack:///./src/Hooks/CardElementsFunctions/index.tsx"],"sourcesContent":["import * as svg from \"../../utils/svg\"\r\nimport { useFileUpload } from 'use-file-upload'\r\nimport { useContext } from 'react';\r\nimport { DesignToolContext } from '../../contexts/DesignToolContext';\r\nimport { defaultImage, defaultSvg } from \"../../utils/defaults\";\r\n\r\nconst CardElementsFunctions = () => {\r\n    const {\r\n        designToolnavigator, setDesignToolnavigator,\r\n        selectedId, setSelectedId,\r\n        cardData, setCardData,\r\n        cardHistory: { goForward, goBack, stepNum, history }\r\n    } = useContext(DesignToolContext)\r\n\r\n    const [file, selectFile] = useFileUpload()\r\n\r\n\r\n    const handleAddNewRect = (rectData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...rectData, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleAddNewCircle = (circleData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...circleData, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n    const handleAddNewTrianlge = (triangleData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...triangleData, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n    const handleAddNewPolygon = (polygonData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...polygonData, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleSvgUpload = (e) => {\r\n        svg.getSvgStringFromUpload(e.target.files).then((SVG_STRING) => {\r\n\r\n            setCardData((prev) => {\r\n                let svgId = new Date().getTime()\r\n                prev.elements.push({\r\n\r\n                    id: `svgs_${svgId.toString()}`,\r\n                    svgString: SVG_STRING,\r\n                    ...defaultSvg\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleImageUpload = () => {\r\n        selectFile({ accept: \"image/png, image/jpg, image/jpeg\", multiple: false },\r\n            ({ file }: any) => {\r\n\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n\r\n                reader.onload = () => {\r\n                    //base64encoded string\r\n                    setCardData((prev) => {\r\n                        let imageID = new Date().getTime();\r\n                        prev.elements.push({\r\n                            ...defaultImage,\r\n                            src: reader.result,\r\n                            id: `images_${imageID.toString()}`\r\n                        })\r\n                    })\r\n                };\r\n            })\r\n    }\r\n\r\n    const handleAddNewText = (textData: any) => {\r\n        setCardData((prev) => {\r\n            let textID = new Date().getTime();\r\n            prev.elements.push({ ...textData, id: `textBoxes_${textID.toString()}` })\r\n        })\r\n    }\r\n\r\n    const onBringtoFront = () => {\r\n        if (!selectedId) return\r\n        setCardData((prev) => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            if (shapeIndex < (prev.elements.length - 1)) {\r\n\r\n                const temp = prev.elements[shapeIndex]\r\n\r\n                prev.elements[shapeIndex] = prev.elements[shapeIndex + 1]\r\n\r\n                prev.elements[shapeIndex + 1] = temp\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    const onBringtoBack = () => {\r\n        if (!selectedId) return\r\n        setCardData((prev) => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n\r\n            // NOTE - shapeIndex > 1 because index 0 is for background\r\n            if (shapeIndex > 1) {\r\n\r\n                const temp = prev.elements[shapeIndex]\r\n\r\n                prev.elements[shapeIndex] = prev.elements[shapeIndex - 1]\r\n\r\n                prev.elements[shapeIndex - 1] = temp\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeFontSize = (type: \"Header\" | \"Sub header\" | \"body text\") => {\r\n\r\n    }\r\n\r\n    const onUndo = () => {\r\n        !!setSelectedId && setSelectedId(null);\r\n        stepNum > 1 && goBack();\r\n    };\r\n    const onRedo = () => {\r\n        !!setSelectedId && setSelectedId(null);\r\n        stepNum < (history.length - 1) && goForward();\r\n    };\r\n\r\n    return {\r\n        handleAddNewRect,\r\n        handleAddNewCircle,\r\n        handleAddNewTrianlge,\r\n        handleAddNewPolygon,\r\n        handleSvgUpload,\r\n        handleImageUpload,\r\n        handleAddNewText,\r\n        onBringtoBack,\r\n        onBringtoFront\r\n    }\r\n}\r\n\r\nexport default CardElementsFunctions\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;;;;A","sourceRoot":""}