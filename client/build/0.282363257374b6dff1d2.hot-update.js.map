{"version":3,"file":"0.282363257374b6dff1d2.hot-update.js","sources":["webpack:///./src/layouts/LoggedInLayout/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UText.tsx","webpack:///./src/layouts/LoggedInLayout/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UTransformer.tsx","webpack:///./src/layouts/LoggedInLayout/CreateCardLayout/components/DesignTool/Components/CustomColorPicker/CustomReactColor.js","webpack:///./src/layouts/LoggedInLayout/CreateCardLayout/components/DesignTool/Components/CustomColorPicker/Picker.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport { Text } from 'react-konva'\r\nimport { Html } from 'react-konva-utils'\r\nimport { useImmerState } from '@shrugsy/use-immer-state';\r\n\r\nconst initial_textArea = {\r\n    textEditVisible: false,\r\n    textX: 0,\r\n    textY: 0\r\n}\r\n\r\nconst UText = ({ textProps, onChange, onSelect, handleTextEdit, isSelected, $tr }) => {\r\n    const textNode = useRef(null)\r\n    const [newTextObj, setNewTextObj] = useImmerState(initial_textArea)\r\n    const textAreaRef = useRef(null)\r\n\r\n    const handleClickOutside = (e) => {\r\n        if (!textAreaRef.current.contains(e.target)) {\r\n            setNewTextObj(prev => {\r\n                prev.textEditVisible = false;\r\n            })\r\n            // $tr.current.visible(true)\r\n            // console.log(\"$tr.current.visible()\", $tr.current.visible())\r\n\r\n            textNode.current.visible(true)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () =>\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    });\r\n\r\n    const handleSelectText = () => {\r\n        setNewTextObj(initial_textArea)\r\n        onSelect()\r\n    }\r\n\r\n    const handleTextDblClick = e => {\r\n        // textNode.current.hide()\r\n        textNode.current.visible(false)\r\n\r\n        // $tr.current.detach()\r\n        // $tr.current.visible(false)\r\n        // console.log(\"$tr.current.visible()\", $tr.current.visible())\r\n        const absPos = e.target.getAbsolutePosition();\r\n        setNewTextObj(prev => {\r\n            prev.textEditVisible = true;\r\n            prev.textX = absPos.x;\r\n            prev.textY = absPos.y;\r\n        })\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        handleTextEdit(e.target.value)\r\n    }\r\n\r\n    const { fill: color, fontFamily, fontSize } = textProps\r\n\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={textNode}\r\n                onClick={handleSelectText}\r\n                onTap={handleSelectText}\r\n                onDblClick={(e) => handleTextDblClick(e)}\r\n                onDblTap={(e) => handleTextDblClick(e)}\r\n                onTransform={(e) => {\r\n                    let SX = textNode.current.scaleX();\r\n                    let W = textNode.current.width();\r\n                    // textAreaRef.current.style.transform = `rotateZ(${e.target.attrs?.rotation}deg)`\r\n                    // textAreaRef.current.style.transformOrigin = \"50% 50%\"\r\n                    textNode.current.setAttrs({\r\n                        // ...textNode.current.getAttrs(),\r\n                        // fontSize: isWordWrapping ? textNode.current.fontSize() : textNode.current.fontSize() * textNode.current.scaleX(),\r\n                        width: W * SX,\r\n                        scaleX: 1,\r\n                        scaleY: 1,\r\n                    });\r\n                }}\r\n                // opacity={!(isSelected && newTextObj.textEditVisible) ? textProps?.opacity : 0}\r\n                // style={{\r\n                //     display:  ? \"none\" : \"block\",\r\n                // }}\r\n                // onTransformEnd={onChange}\r\n                onDragEnd={onChange}\r\n                {...textProps}\r\n            />\r\n            <Html>\r\n                <textarea\r\n                    onInput={(e: any) => {\r\n                        e.target.style.height = \"5px\"\r\n                        e.target.style.height = (e.target.scrollHeight) + \"px\";\r\n                    }}\r\n                    ref={textAreaRef}\r\n                    value={textProps.text}\r\n                    style={{\r\n                        display: isSelected && newTextObj.textEditVisible ? \"block\" : \"none\",\r\n                        position: \"absolute\",\r\n                        top: newTextObj.textY + \"px\",\r\n                        left: newTextObj.textX + \"px\",\r\n                        outline: \"none\",\r\n                        // border: \"2px solid blue\",\r\n                        // opacity: 0,\r\n                        resize: 'none',\r\n                        overflow: 'hidden',\r\n                        minHeight: '50px',\r\n                        color, fontFamily, fontSize,\r\n                        width: textNode.current?.getClientRect()?.width,\r\n                        height: textNode.current?.getClientRect()?.height,\r\n                        lineHeight: 1,\r\n                        background: 'transparent',\r\n                        transform: `rotateZ(${textNode.current?.attrs?.rotation}deg)`,\r\n                        transformOrigin: 'top left',\r\n                    }}\r\n                    onChange={handleTextChange}\r\n                />\r\n            </Html>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UText\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { Transformer } from 'react-konva'\r\nimport ImageFallbackModal from '../tailwindComponents/CardHeader/components/ImageFallbackModal/ImageFallbackModal';\r\nimport { Html } from \"react-konva-utils\"\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    $tr: any\r\n    selectedShapeName: any\r\n    setSelectedId: any\r\n    cardData: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({\r\n    id,\r\n    $tr,\r\n    selectedShapeName,\r\n    setSelectedId,\r\n    cardData\r\n}) => {\r\n\r\n    const [isOpenFallbackModal, setIsOpenFallbackModal] = useState<boolean>(false)\r\n    const editIconRef = useRef(null)\r\n    const selectedshape = cardData.elements.find(item => item.id === selectedShapeName)\r\n\r\n    useEffect(() => {\r\n        checkNode();\r\n    }, [selectedShapeName])\r\n\r\n    const checkNode = () => {\r\n        const trNodes = $tr.current.nodes()\r\n        const stage = $tr.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            $tr.current.nodes([selectedNode])\r\n        } else {\r\n            !trNodes.length && $tr.current.detach();\r\n            setSelectedId(null)\r\n        }\r\n        $tr.current.getLayer().batchDraw();\r\n    }\r\n\r\n    const handleOpenFallbackModal = () => {\r\n        const nodes = $tr.current.nodes()\r\n        if (!!nodes.length && nodes[0]?.attrs?.id.split(\"_\")[0] === \"shapes\") {\r\n            setIsOpenFallbackModal(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                // shouldOverdrawWholeArea\r\n                id={id}\r\n                ref={$tr}\r\n                padding={5}\r\n                rotationSnaps={[0, 90, 180, 270]}\r\n                ignoreStroke={true}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (selectedShapeName === \"shapes_background\") return oldBox\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            >\r\n                <Html >\r\n                    <div className={!!selectedshape?.isFrame ? \"\" : \"hidden\"} >\r\n                        <button\r\n                            ref={editIconRef}\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                left: (($tr.current?.findOne('.top-right')?.position().x - editIconRef.current?.getBoundingClientRect()?.width) / 2),\r\n                                top: ($tr.current?.findOne('.middle-left')?.position().y - (editIconRef.current?.getBoundingClientRect()?.width / 2)),\r\n                            }}\r\n                            className=\"rounded-full bg-white p-1 border border-gray-400 \"\r\n                            onClick={handleOpenFallbackModal}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                            </svg>\r\n                        </button>\r\n                        <div\r\n                            className={!!isOpenFallbackModal ? \"\" : \"hidden\"}\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                left: $tr.current?.findOne('.top-right')?.position().x - editIconRef.current?.getBoundingClientRect()?.width,\r\n                            }}\r\n                        >\r\n                            <ImageFallbackModal\r\n                                closeModal={() => {\r\n                                    setIsOpenFallbackModal(false);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Html>\r\n            </Transformer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent","import React from \"react\";\r\nimport { CustomPicker } from \"react-color\";\r\nimport {\r\n    EditableInput,\r\n    Hue,\r\n    Saturation\r\n} from \"react-color/lib/components/common\";\r\n\r\nexport const MyPicker = ({ hex, hsl, hsv, onChange }) => {\r\n    const styles = {\r\n        pickerContainer: {\r\n            width: \"100%\"\r\n        },\r\n        hue: {\r\n            width: \"100%\",\r\n            height: 12,\r\n            margin: \"10px 0px\",\r\n            position: \"relative\"\r\n        },\r\n        saturation: {\r\n            width: \"100%\",\r\n            height: 150,\r\n            margin: \"10px 0px\",\r\n            position: \"relative\"\r\n        },\r\n        input: {\r\n            width: \"100px\",\r\n            height: 40,\r\n            borderRadius: 5,\r\n            outline: \"none\",\r\n            margin: \"10px 0px\",\r\n            border: `1px solid ${hex}`,\r\n            paddingLeft: 10,\r\n        },\r\n        confirm: {\r\n            width: \"100px\",\r\n            height: 40,\r\n            borderRadius: 5,\r\n            outline: \"none\",\r\n            margin: \"10px 0px\",\r\n        }\r\n    };\r\n    return (\r\n        <div style={styles.pickerContainer}>\r\n            <div style={styles.saturation}>\r\n                <Saturation hsl={hsl} hsv={hsv} onChange={onChange} />\r\n            </div>\r\n\r\n            <div style={styles.hue}>\r\n                <Hue pointer={Pointer} hsl={hsl} onChange={onChange} />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                <EditableInput\r\n                    style={{ input: styles.input }}\r\n                    value={hex}\r\n                    onChange={onChange}\r\n                />\r\n                <button style={styles.confirm} className=\"bg-bluish text-white\" >Confirm</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Pointer = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                backgroundColor: \"transparent\",\r\n                border: \"2px solid white\",\r\n                boxShadow: \"0px 0px 2px 1px rgba(0,0,0,0.75)\",\r\n                borderRadius: \"50%\",\r\n                width: \"12px\",\r\n                height: \"12px\"\r\n            }}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default CustomPicker(MyPicker);\r\n","import React from 'react'\r\nimport CustomReactColor from './CustomReactColor'\r\n// import { ChromePicker } from 'react-color'\r\n\r\ninterface Props {\r\n    color: string\r\n    onChange: any\r\n}\r\n\r\nconst Picker: React.FC<Props> = ({ color, onChange }) => {\r\n    return (\r\n        <div>\r\n            <CustomReactColor\r\n                color={color}\r\n                onChange={onChange}\r\n                hex={null}\r\n                hsl={null}\r\n                hsv={null}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Picker\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AAvBA;AAwBA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAzBA;AAiCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;A","sourceRoot":""}