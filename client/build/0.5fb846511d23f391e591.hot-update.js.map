{"version":3,"file":"0.5fb846511d23f391e591.hot-update.js","sources":["webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UCircle.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { Circle } from 'react-konva';\r\nimport useImage from \"use-image\"\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n}\r\n\r\nconst UCircle: React.FC<Props> = ({ shapeProps, onSelect, onChange }) => {\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n    const circleWidth = shapeRef.current?.getClientRect().width;\r\n    const circleHeight = shapeRef.current?.getClientRect().height;\r\n    const imageWidth = image ? image.width : 10;\r\n    const imageHeight = image ? image.height : 10;\r\n    const patternScale = restProps.patternScale || Math.max(\r\n        circleWidth / imageWidth,\r\n        circleHeight / imageHeight\r\n    );\r\n\r\n    console.log({ patternScale, circleHeight, circleWidth })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Circle\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        // scaleX: e.target.attrs.scaleX,\r\n                        // scaleY: e.target.attrs.scaleY,\r\n                    });\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                // fillPatternOffset={{ x: (circleWidth / 2), y: (circleHeight / 2) }}\r\n                // fillPatternScaleX={patternScale}\r\n                // fillPatternScaleY={patternScale}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default UCircle\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AAnBA;AAqBA;AAEA;AACA;AAxBA;AAyBA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;AACA;AAAA;;;;A","sourceRoot":""}