{"version":3,"file":"0.d7fe8f98744e248aa171.hot-update.js","sources":["webpack:///./src/Hooks/CardElementsFunctions/index.tsx"],"sourcesContent":["import * as svg from \"../../utils/svg\"\r\nimport { useFileUpload } from 'use-file-upload'\r\nimport { useContext } from 'react';\r\nimport { DesignToolContext } from '../../contexts/DesignTool/DesignToolContext';\r\nimport { defaultImage, defaultSvg, fontSizeArray, stageDimensions } from \"../../utils/defaults\";\r\nimport CardHeaderActions from \"../../contexts/DesignTool/CardHeaderActions\";\r\n\r\nconst CardElementsFunctions = () => {\r\n    const {\r\n        designToolnavigator, setDesignToolnavigator,\r\n        selectedId, setSelectedId,\r\n        cardData, setCardData,\r\n        cardHistory: { goForward, goBack, stepNum, history }\r\n    } = useContext(DesignToolContext)\r\n    const { emptyCardHeader } = CardHeaderActions()\r\n\r\n    const [file, selectFile] = useFileUpload()\r\n\r\n\r\n    const handleAddNewRect = (rectData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...rectData, id: `shapes_${shapeID.toString()}` })\r\n            setSelectedId(`shapes_${shapeID.toString()}`)\r\n        })\r\n    }\r\n\r\n    const handleAddNewCircle = (circleData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...circleData, id: `shapes_${shapeID.toString()}` })\r\n            setSelectedId(`shapes_${shapeID.toString()}`)\r\n        })\r\n    }\r\n    const handleAddNewTrianlge = (triangleData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...triangleData, id: `shapes_${shapeID.toString()}` })\r\n            setSelectedId(`shapes_${shapeID.toString()}`)\r\n        })\r\n    }\r\n    const handleAddNewPolygon = (polygonData: any) => {\r\n        setCardData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.elements.push({ ...polygonData, id: `shapes_${shapeID.toString()}` })\r\n            setSelectedId(`shapes_${shapeID.toString()}`)\r\n        })\r\n    }\r\n\r\n    const handleSvgUpload = (e) => {\r\n        svg.getSvgStringFromUpload(e.target.files).then((SVG_STRING) => {\r\n\r\n            setCardData((prev) => {\r\n                let svgId = new Date().getTime()\r\n                prev.elements.push({\r\n\r\n                    id: `svgs_${svgId.toString()}`,\r\n                    svgString: SVG_STRING,\r\n                    ...defaultSvg\r\n                })\r\n                setSelectedId(`svgs_${svgId.toString()}`)\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleAddSvg = (SVG_STRING: string) => {\r\n        setCardData((prev) => {\r\n            let svgId = new Date().getTime()\r\n            prev.elements.push({\r\n\r\n                id: `svgs_${svgId.toString()}`,\r\n                svgString: SVG_STRING,\r\n                ...defaultSvg\r\n            })\r\n            setSelectedId(`svgs_${svgId.toString()}`)\r\n        })\r\n    }\r\n\r\n    const handleImageUpload = () => {\r\n        selectFile({ accept: \"image/png, image/jpg, image/jpeg\", multiple: false },\r\n            ({ file }: any) => {\r\n\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n\r\n                reader.onload = () => {\r\n                    //base64encoded string\r\n                    setCardData((prev) => {\r\n                        let imageID = new Date().getTime();\r\n                        prev.elements.push({\r\n                            ...defaultImage,\r\n                            src: reader.result,\r\n                            id: `images_${imageID.toString()}`\r\n                        })\r\n                        setSelectedId(`images_${imageID.toString()}`)\r\n                    })\r\n                };\r\n            })\r\n    }\r\n\r\n    const handleAddNewText = (textData: any) => {\r\n        setCardData((prev) => {\r\n            let textID = new Date().getTime();\r\n            prev.elements.push({ ...textData, id: `textBoxes_${textID.toString()}` })\r\n            setSelectedId(`textBoxes_${textID.toString()}`)\r\n        })\r\n    }\r\n\r\n    const onBringtoFront = () => {\r\n        if (!selectedId) return\r\n        setCardData((prev) => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            if (shapeIndex < (prev.elements.length - 1)) {\r\n\r\n                const temp = prev.elements[shapeIndex]\r\n\r\n                prev.elements[shapeIndex] = prev.elements[shapeIndex + 1]\r\n\r\n                prev.elements[shapeIndex + 1] = temp\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    const onBringtoBack = () => {\r\n        if (!selectedId) return\r\n        setCardData((prev) => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n\r\n            // NOTE - shapeIndex > 1 because index 0 is for background\r\n            if (shapeIndex > 1) {\r\n\r\n                const temp = prev.elements[shapeIndex]\r\n\r\n                prev.elements[shapeIndex] = prev.elements[shapeIndex - 1]\r\n\r\n                prev.elements[shapeIndex - 1] = temp\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const handleDeleteSelectedItem = () => {\r\n        setCardData(prev => {\r\n            prev.elements = prev.elements.filter(\r\n                item => item.id !== selectedId\r\n            )\r\n            setSelectedId(null)\r\n            emptyCardHeader()\r\n        })\r\n    }\r\n\r\n    const onUndo = () => {\r\n        emptyCardHeader()\r\n        !!setSelectedId && setSelectedId(null);\r\n        stepNum > 1 && goBack();\r\n    };\r\n    const onRedo = () => {\r\n        emptyCardHeader()\r\n        !!setSelectedId && setSelectedId(null);\r\n        stepNum < (history.length - 1) && goForward();\r\n    };\r\n\r\n    const handleChangeFontSize = (type: \"Header\" | \"Sub header\" | \"body text\") => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].fontSize = fontSizeArray.find(item => item.name === type).size\r\n        })\r\n    }\r\n\r\n    const handleFontStyle = (type: \"normal\" | \"bold\" | \"italic\") => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].fontStyle = type\r\n        })\r\n    }\r\n\r\n    const handleTextTransform = (type: \"uppercase\" | \"lowercase\" | \"capitalize\" | \"none\") => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].textTransform = type\r\n        })\r\n    }\r\n\r\n    const handleTextAlign = (type: \"center\" | \"left\" | \"right\" | \"justify\") => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].align = type\r\n        })\r\n    }\r\n\r\n    const handleTextOpacity = (value: any) => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].opacity = parseFloat(value)\r\n        })\r\n    }\r\n\r\n    const handleTextEffect = (textObj: any) => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex] = textObj\r\n        })\r\n    }\r\n\r\n    const handleFontFamily = (value: string) => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].fontFamily = value\r\n        })\r\n    }\r\n\r\n    const handleBorderWidthChange = (value: any) => {\r\n        setCardData(prev => {\r\n            const shapeIndex = prev.elements.findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            prev.elements[shapeIndex].strokeWidth = value\r\n        })\r\n    }\r\n\r\n    const handleFillImagePattern = () => {\r\n        selectFile({ accept: \"image/png, image/jpg, image/jpeg\", multiple: false },\r\n            ({ file }: any) => {\r\n\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n\r\n                reader.onload = () => {\r\n                    //base64encoded string => reader.result\r\n                    setCardData((prev) => {\r\n                        const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n                        selectedShape.fill = \"\"\r\n                        selectedShape.patternImageUrl = reader.result\r\n                    })\r\n                };\r\n            })\r\n    }\r\n\r\n    const handleStrokeWidthChange = e => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.strokeWidth = parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleCornerRadius = e => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.cornerRadius = parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleOpacity = e => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.opacity = parseFloat(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleStrokeColor = (color: string) => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.stroke = color\r\n        })\r\n    }\r\n\r\n    const handleFill = (color: string, backgroundID?: undefined | \"shapes_background\") => {\r\n        setCardData(prev => {\r\n            if (!!backgroundID) {\r\n                prev.elements[0].fill = color\r\n                prev.elements[0].patternImageUrl = undefined\r\n            } else {\r\n                const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n                selectedShape.fill = color\r\n                selectedShape.patternImageUrl = undefined\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleGradientColor = (color1: string, color2: string, backgroundID?: undefined | \"shapes_background\") => {\r\n        setCardData(prev => {\r\n            if (!!backgroundID) {\r\n                prev.elements[0].fill = \"\"\r\n                prev.elements[0].fillLinearGradientColorStops = [0, color1, 1, color2]\r\n                prev.elements[0].fillLinearGradientStartPoint = { x: 0, y: 0 }\r\n                prev.elements[0].fillLinearGradientEndPoint = {\r\n                    x: stageDimensions.width,\r\n                    y: stageDimensions.height\r\n                }\r\n                prev.elements[0].patternImageUrl = undefined\r\n            } else {\r\n                const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n                selectedShape.fill = \"\"\r\n                selectedShape.fillLinearGradientColorStops = [0, color1, 1, color2]\r\n                selectedShape.fillLinearGradientStartPoint = { x: 0, y: 0 }\r\n                selectedShape.fillLinearGradientEndPoint = {\r\n                    x: selectedId === \"shapes_background\" ? stageDimensions.width : 100,\r\n                    y: selectedId === \"shapes_background\" ? stageDimensions.height : 100\r\n                }\r\n                selectedShape.patternImageUrl = undefined\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleRadialGradientColor = (color1: string, color2: string, backgroundID?: undefined | \"shapes_background\") => {\r\n        setCardData(prev => {\r\n            if (!!backgroundID) {\r\n                prev.elements[0].fill = \"\"\r\n                prev.elements[0].fillLinearGradientColorStops = undefined\r\n                prev.elements[0].fillLinearGradientStartPoint = undefined\r\n                prev.elements[0].fillLinearGradientEndPoint = undefined\r\n                prev.elements[0].patternImageUrl = undefined\r\n\r\n                prev.elements[0].fillRadialGradientStartPoint = { x: stageDimensions.width / 2, y: stageDimensions.height / 2 }\r\n                prev.elements[0].fillRadialGradientStartRadius = 0\r\n                prev.elements[0].fillRadialGradientEndPoint = { x: 0, y: 0 }\r\n                prev.elements[0].fillRadialGradientEndRadius = 600\r\n                prev.elements[0].fillRadialGradientColorStops = [0, color1, 1, color2]\r\n            } else {\r\n                const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n                selectedShape.fill = \"\"\r\n                selectedShape.fillLinearGradientColorStops = [0, color1, 1, color2]\r\n                selectedShape.fillLinearGradientStartPoint = { x: 0, y: 0 }\r\n                selectedShape.fillLinearGradientEndPoint = {\r\n                    x: selectedId === \"shapes_background\" ? stageDimensions.width : 100,\r\n                    y: selectedId === \"shapes_background\" ? stageDimensions.height : 100\r\n                }\r\n                selectedShape.patternImageUrl = undefined\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleFillPatternScaleX = (e) => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.fillPatternScaleX = parseFloat(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleFillPatternScaleY = (e) => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.fillPatternScaleY = parseFloat(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleFillPatternOffsetX = (e) => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.fillPatternOffsetX = parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleFillPatternOffsetY = (e) => {\r\n        setCardData(prev => {\r\n            const selectedShape = prev.elements.find(item => item.id === selectedId)\r\n            selectedShape.fillPatternOffsetY = parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        handleAddNewRect,\r\n        handleAddNewCircle,\r\n        handleAddNewTrianlge,\r\n        handleAddNewPolygon,\r\n        handleSvgUpload,\r\n        handleAddSvg,\r\n        handleImageUpload,\r\n        handleAddNewText,\r\n        handleDeleteSelectedItem,\r\n        handleChangeFontSize,\r\n        onBringtoBack,\r\n        onBringtoFront,\r\n        onUndo,\r\n        onRedo,\r\n        handleFontStyle,\r\n        handleTextTransform,\r\n        handleTextAlign,\r\n        handleTextOpacity,\r\n        handleTextEffect,\r\n        handleFontFamily,\r\n        handleBorderWidthChange,\r\n        handleFillImagePattern,\r\n        handleStrokeWidthChange,\r\n        handleCornerRadius,\r\n        handleOpacity,\r\n        handleStrokeColor,\r\n        handleFill,\r\n        handleGradientColor,\r\n        handleRadialGradientColor,\r\n        handleFillPatternScaleX,\r\n        handleFillPatternScaleY,\r\n        handleFillPatternOffsetX,\r\n        handleFillPatternOffsetY\r\n    }\r\n}\r\n\r\nexport default CardElementsFunctions\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;;;;A","sourceRoot":""}