{"version":3,"file":"0.72903b86392c4405d759.hot-update.js","sources":["webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UText.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { Text } from 'react-konva'\r\nimport { Html } from 'react-konva-utils'\r\nimport { useImmerState } from '@shrugsy/use-immer-state';\r\n\r\nconst initial_textArea = {\r\n    textEditVisible: false,\r\n    textX: 0,\r\n    textY: 0\r\n}\r\n\r\nconst UText = ({ textProps, onChange, onSelect, handleTextEdit, isSelected, $tr }) => {\r\n    const textNode = useRef(null)\r\n    const [newTextObj, setNewTextObj] = useImmerState(initial_textArea)\r\n\r\n    const handleSelectText = () => {\r\n        setNewTextObj(initial_textArea)\r\n        onSelect()\r\n    }\r\n\r\n    const handleTextDblClick = e => {\r\n        // textNode.current.hide()\r\n        // $tr.current.hide()\r\n        const absPos = e.target.getAbsolutePosition();\r\n        setNewTextObj(prev => {\r\n            prev.textEditVisible = true;\r\n            prev.textX = absPos.x;\r\n            prev.textY = absPos.y;\r\n        })\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        handleTextEdit(e.target.value)\r\n    }\r\n\r\n    const handleTextareaKeyDown = (e) => {\r\n        if (e.keyCode === \"Escape\") {\r\n            setNewTextObj(prev => {\r\n                prev.textEditVisible = false;\r\n            })\r\n            // textNode.current.show()\r\n            // $tr.current.show()\r\n            // $tr.current.forceUpdate()\r\n        }\r\n    }\r\n\r\n    const { fill: color, fontFamily, fontSize } = textProps\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={textNode}\r\n                draggable\r\n                onClick={handleSelectText}\r\n                onTap={handleSelectText}\r\n                onDblClick={(e) => handleTextDblClick(e)}\r\n                onDblTap={(e) => handleTextDblClick(e)}\r\n                onTransform={(e) => {\r\n                    let SX = textNode.current.scaleX();\r\n                    let W = textNode.current.width();\r\n\r\n                    textNode.current.setAttrs({\r\n                        // ...textNode.current.getAttrs(),\r\n                        // fontSize: isWordWrapping ? textNode.current.fontSize() : textNode.current.fontSize() * textNode.current.scaleX(),\r\n                        width: W * SX,\r\n                        scaleX: 1,\r\n                        scaleY: 1\r\n                    });\r\n                }}\r\n                style={{\r\n                    display: isSelected && newTextObj.textEditVisible ? \"none\" : \"block\",\r\n                }}\r\n                // onTransformEnd={onChange}\r\n                onDragEnd={onChange}\r\n                {...textProps}\r\n            />\r\n            <Html>\r\n                <textarea\r\n                    onInput={(e: any) => {\r\n                        e.target.style.height = \"5px\"\r\n                        e.target.style.height = (e.target.scrollHeight) + \"px\";\r\n                    }}\r\n                    value={textProps.text}\r\n                    style={{\r\n                        display: isSelected && newTextObj.textEditVisible ? \"block\" : \"none\",\r\n                        position: \"absolute\",\r\n                        top: newTextObj.textY + \"px\",\r\n                        left: newTextObj.textX + \"px\",\r\n                        outline: \"none\",\r\n                        zIndex: 0,\r\n                        border: \"2px solid blue\",\r\n                        resize: 'none',\r\n                        overflow: 'hidden',\r\n                        minHeight: '50px',\r\n                        color, fontFamily, fontSize,\r\n                        width: textNode.current?.getClientRect()?.width,\r\n                        lineHeight: 1\r\n                    }}\r\n                    onChange={handleTextChange}\r\n                    onKeyDown={handleTextareaKeyDown}\r\n                />\r\n            </Html>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UText\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AADA;AAnBA;AAuBA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAbA;AAeA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AACA;;;;A","sourceRoot":""}