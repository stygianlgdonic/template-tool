{"version":3,"file":"0.623c7c518ceaa9092718.hot-update.js","sources":["webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UText.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { Text } from 'react-konva'\r\nimport { Html } from 'react-konva-utils'\r\nimport { useImmerState } from '@shrugsy/use-immer-state';\r\n\r\nconst UText = ({ textProps, onChange, onSelect, handleTextEdit }) => {\r\n    const textNode = useRef(null)\r\n    // const [newTextObj, setNewTextObj] = useImmerState({\r\n    //     textEditVisible: false,\r\n    //     textX: 0,\r\n    //     textY: 0\r\n    // })\r\n\r\n    // const handleTextDblClick = e => {\r\n    //     const absPos = e.target.getAbsolutePosition();\r\n\r\n    //     setNewTextObj(prev => {\r\n    //         prev.textEditVisible = true;\r\n    //         prev.textX = absPos.x;\r\n    //         prev.textY = absPos.y;\r\n    //     })\r\n    // };\r\n\r\n    // const handleTextChange = (e) => {\r\n    //     handleTextEdit(e.target.value)\r\n    // }\r\n\r\n    // const handleTextareaKeyDown = (e) => {\r\n    //     if (e.keyCode === 13) {\r\n    //         setNewTextObj(prev => {\r\n    //             prev.textEditVisible = false;\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={textNode}\r\n                draggable\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                // onDblClick={handleTextDblClick}\r\n                // onDblTap={handleTextDblClick}\r\n                onTransform={(e) => {\r\n                    let SX = textNode.current.scaleX();\r\n                    let W = textNode.current.width();\r\n\r\n                    textNode.current.setAttrs({\r\n                        // ...textNode.current.getAttrs(),\r\n                        // fontSize: isWordWrapping ? textNode.current.fontSize() : textNode.current.fontSize() * textNode.current.scaleX(),\r\n                        width: W * SX,\r\n                        scaleX: 1,\r\n                        scaleY: 1\r\n                    });\r\n                }}\r\n                // onTransformEnd={onChange}\r\n                onDragEnd={onChange}\r\n                {...textProps}\r\n            />\r\n            {/* <Html>\r\n                <textarea\r\n                    value={textProps.text}\r\n                    style={{\r\n                        display: newTextObj.textEditVisible ? \"block\" : \"none\",\r\n                        position: \"absolute\",\r\n                        top: newTextObj.textY + \"px\",\r\n                        left: newTextObj.textX + \"px\"\r\n                    }}\r\n                    onChange={handleTextChange}\r\n                    onKeyDown={handleTextareaKeyDown}\r\n                />\r\n            </Html> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UText\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AANA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAlBA;AAoBA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCA;AACA;AACA;;;;A","sourceRoot":""}