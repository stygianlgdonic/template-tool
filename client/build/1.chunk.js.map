{"version":3,"file":"1.chunk.js","sources":["webpack:///./src/Screens/CreateCardLayout/CreateCardLayout.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/Card.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/MainStage/index.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/Rectangle.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UCircle.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UImage.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/ULine.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UPolygon.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/USvg.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UText.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UTransformer.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/index.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/NavBar/NavBar.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/SubNavBar/SubNavBar.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/Components/SubNavBar/components/TextSelector/TextSelector.tsx","webpack:///./src/Screens/CreateCardLayout/components/DesignTool/DesigntTool.tsx","webpack:///./src/Screens/CreateCardLayout/components/Header/Header.tsx","webpack:///./src/utils/svg.ts"],"sourcesContent":["import React from 'react';\r\nimport DesignTool from './components/DesignTool/DesigntTool';\r\nimport Header from './components/Header/Header'\r\n\r\nlet document_title = \"Untitled design - Employees\"\r\n\r\n\r\nconst CreateCardLayout: React.FC = () => {\r\n\r\n    return (\r\n        <div className=\"   \">\r\n            <div>\r\n                <Header document_title={document_title} />\r\n            </div>\r\n            <div className=\"h-full\">\r\n                <DesignTool />\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default CreateCardLayout;\r\n","import React from 'react';\r\nimport MainCanvas from \"./MainCanvas\"\r\n\r\nconst Card: React.FC = (): JSX.Element => {\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <MainCanvas />\r\n        </div>\r\n    )\r\n};\r\nexport default Card;\r\n","import React, { useRef, useState } from 'react'\r\nimport { Stage, Layer, Rect } from 'react-konva';\r\nimport Rectangle from \"../Rectangle\"\r\nimport UCircle from \"../UCircle\"\r\nimport UPolygon from \"../UPolygon\"\r\nimport ULine from \"../ULine\"\r\nimport USvg from \"../USvg\"\r\nimport UText from \"../UText\"\r\nimport TransformerComponent from \"../UTransformer\"\r\nimport { stageDimensions } from '../../../../../../../../utils/defaults';\r\nimport UImage from '../UImage';\r\n\r\ndeclare const window: any\r\n\r\nconst MainStage = ({\r\n    templateData,\r\n    setTemplateData,\r\n    variationIndex,\r\n    selectedId,\r\n    setSelectedId,\r\n    unSelectAll,\r\n    handleEditSelectedItem,\r\n}) => {\r\n\r\n    const GUIDELINE_OFFSET = 5\r\n    const $stage = useRef(null)\r\n    const $layer = useRef(null)\r\n    const $tr = useRef(null)\r\n    const selectionRectRef = useRef(null);\r\n    const selection = useRef({\r\n        visible: false,\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: 0,\r\n        y2: 0\r\n    });\r\n\r\n    const [nodesArray, setNodes] = useState([]);\r\n    const Konva = window.Konva;\r\n\r\n    const getLineGuideStops = skipShape => {\r\n        const vertical: any = [0, stageDimensions.width / 2, stageDimensions.width];\r\n        const horizontal: any = [0, stageDimensions.height / 2, stageDimensions.height];\r\n\r\n        // and we snap over edges and center of each object on the canvas\r\n        $stage.current.find(\".object\").forEach(guideItem => {\r\n            if (guideItem === skipShape) {\r\n                return;\r\n            }\r\n            const box = guideItem.getClientRect();\r\n            // and we can snap to all edges of shapes\r\n            vertical.push([box.x, box.x + box.width, box.x + box.width / 2]);\r\n            horizontal.push([box.y, box.y + box.height, box.y + box.height / 2]);\r\n        });\r\n        return {\r\n            vertical: vertical.flat(),\r\n            horizontal: horizontal.flat()\r\n        };\r\n    };\r\n\r\n    const getObjectSnappingEdges = node => {\r\n        const box = node.getClientRect();\r\n\r\n        return {\r\n            vertical: [\r\n                {\r\n                    guide: Math.round(box.x),\r\n                    offset: Math.round(node.x() - box.x),\r\n                    snap: \"start\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.x + box.width / 2),\r\n                    offset: Math.round(node.x() - box.x - box.width / 2),\r\n                    snap: \"center\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.x + box.width),\r\n                    offset: Math.round(node.x() - box.x - box.width),\r\n                    snap: \"end\"\r\n                }\r\n            ],\r\n            horizontal: [\r\n                {\r\n                    guide: Math.round(box.y),\r\n                    offset: Math.round(node.y() - box.y),\r\n                    snap: \"start\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.y + box.height / 2),\r\n                    offset: Math.round(node.y() - box.y - box.height / 2),\r\n                    snap: \"center\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.y + box.height),\r\n                    offset: Math.round(node.y() - box.y - box.height),\r\n                    snap: \"end\"\r\n                }\r\n            ]\r\n        };\r\n    };\r\n\r\n    const getGuides = (lineGuideStops, itemBounds) => {\r\n        const resultV = [];\r\n        const resultH = [];\r\n\r\n        lineGuideStops.vertical.forEach(lineGuide => {\r\n            itemBounds.vertical.forEach(itemBound => {\r\n                const diff = Math.abs(lineGuide - itemBound.guide);\r\n                // if the distance between guild line and object snap point is close we can consider this for snapping\r\n                if (diff < GUIDELINE_OFFSET) {\r\n                    resultV.push({\r\n                        lineGuide: lineGuide,\r\n                        diff: diff,\r\n                        snap: itemBound.snap,\r\n                        offset: itemBound.offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        lineGuideStops.horizontal.forEach(lineGuide => {\r\n            itemBounds.horizontal.forEach(itemBound => {\r\n                const diff = Math.abs(lineGuide - itemBound.guide);\r\n                if (diff < GUIDELINE_OFFSET) {\r\n                    resultH.push({\r\n                        lineGuide: lineGuide,\r\n                        diff: diff,\r\n                        snap: itemBound.snap,\r\n                        offset: itemBound.offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        const guides = [];\r\n\r\n        // find closest snap\r\n        const minV = resultV?.sort((a, b) => a.diff - b.diff)[0];\r\n        const minH = resultH?.sort((a, b) => a.diff - b.diff)[0];\r\n        if (minV) {\r\n            guides.push({\r\n                lineGuide: minV.lineGuide,\r\n                offset: minV.offset,\r\n                orientation: \"V\",\r\n                snap: minV.snap\r\n            });\r\n        }\r\n        if (minH) {\r\n            guides.push({\r\n                lineGuide: minH.lineGuide,\r\n                offset: minH.offset,\r\n                orientation: \"H\",\r\n                snap: minH.snap\r\n            });\r\n        }\r\n        return guides;\r\n    };\r\n\r\n    const drawGuides = guides => {\r\n        guides.forEach(lg => {\r\n            if (lg.orientation === \"H\") {\r\n                const lines = new Konva.Line({\r\n                    points: [-6000, lg.lineGuide, 6000, lg.lineGuide],\r\n                    stroke: \"rgb(0, 161, 255)\",\r\n                    strokeWidth: 1,\r\n                    name: \"guid-line\",\r\n                    dash: [4, 6]\r\n                });\r\n                $layer.current.add(lines);\r\n                $layer.current.batchDraw();\r\n            } else if (lg.orientation === \"V\") {\r\n                const lines = new Konva.Line({\r\n                    points: [lg.lineGuide, -6000, lg.lineGuide, 6000],\r\n                    stroke: \"rgb(0, 161, 255)\",\r\n                    strokeWidth: 1,\r\n                    name: \"guid-line\",\r\n                    dash: [4, 6]\r\n                });\r\n                $layer.current.add(lines);\r\n                $layer.current.batchDraw();\r\n            }\r\n        });\r\n    };\r\n\r\n    const _onDragMove = e => {\r\n        const linesArray = $layer.current.find(\".guid-line\")\r\n        if (!!linesArray.length) {\r\n            linesArray.forEach(item => item.destroy())\r\n        }\r\n        const lineGuideStops = getLineGuideStops(e.target);\r\n        const itemBounds = getObjectSnappingEdges(e.target);\r\n        const guides = getGuides(lineGuideStops, itemBounds);\r\n        if (!guides.length) {\r\n            return;\r\n        }\r\n        drawGuides(guides);\r\n        guides.forEach(lg => {\r\n            switch (lg.snap) {\r\n                case \"start\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"center\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"end\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n    };\r\n\r\n    const _onDragEnd = e => {\r\n        const linesArray = $layer.current.find(\".guid-line\")\r\n        if (!!linesArray.length) {\r\n            linesArray.forEach(item => item.destroy())\r\n        }\r\n        $layer.current.batchDraw();\r\n    };\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage();\r\n        if (clickedOnEmpty) {\r\n            unSelectAll();\r\n            $tr.current.nodes([]);\r\n            setNodes([]);\r\n            // layerRef.current.remove(selectionRectangle);\r\n        }\r\n    };\r\n\r\n    const updateSelectionRect = () => {\r\n        const node = selectionRectRef.current;\r\n        node.setAttrs({\r\n            visible: selection.current.visible,\r\n            x: Math.min(selection.current.x1, selection.current.x2),\r\n            y: Math.min(selection.current.y1, selection.current.y2),\r\n            width: Math.abs(selection.current.x1 - selection.current.x2),\r\n            height: Math.abs(selection.current.y1 - selection.current.y2),\r\n            fill: \"rgba(0, 161, 255, 0.3)\"\r\n        });\r\n        node.getLayer().batchDraw();\r\n    };\r\n\r\n    const oldPos = React.useRef(null);\r\n    const onMouseDown = (e) => {\r\n        const isElement = e.target.findAncestor(\".elements-container\");\r\n        const isTransformer = e.target.findAncestor(\"Transformer\");\r\n        if (isElement || isTransformer) {\r\n            return;\r\n        }\r\n\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.visible = true;\r\n        selection.current.x1 = pos.x;\r\n        selection.current.y1 = pos.y;\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n        oldPos.current = null;\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const selBox = selectionRectRef.current.getClientRect();\r\n\r\n        const elements = [];\r\n        $layer.current.find(\".object\").forEach((elementNode) => {\r\n            const elBox = elementNode.getClientRect();\r\n            if (Konva.Util.haveIntersection(selBox, elBox)) {\r\n                elements.push(elementNode);\r\n            }\r\n        });\r\n        $tr.current.nodes(elements);\r\n        selection.current.visible = false;\r\n        // disable click event\r\n        Konva.listenClickTap = false;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onClickTap = (e) => {\r\n        // if we are selecting with rect, do nothing\r\n        if (selectionRectRef.current.visible()) {\r\n            return;\r\n        }\r\n        let stage = e.target.getStage();\r\n        let layer = $layer.current;\r\n        let tr = $tr.current;\r\n        // if click on empty area - remove all selections\r\n        if (e.target === stage) {\r\n            unSelectAll();\r\n            setNodes([]);\r\n            tr.nodes([]);\r\n            layer.draw();\r\n            return;\r\n        }\r\n\r\n        // do nothing if clicked NOT on our rectangles\r\n        if (!e.target.hasName(\".object\")) {\r\n            return;\r\n        }\r\n\r\n        // do we pressed shift or ctrl?\r\n        const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\r\n        const isSelected = tr.nodes().indexOf(e.target) >= 0;\r\n\r\n        if (!metaPressed && !isSelected) {\r\n            // if no key pressed and the node is not selected\r\n            // select just one\r\n            tr.nodes([e.target]);\r\n        } else if (metaPressed && isSelected) {\r\n            // if we pressed keys and node was selected\r\n            // we need to remove it from selection:\r\n            const nodes = tr.nodes().slice(); // use slice to have new copy of array\r\n            // remove node from array\r\n            nodes.splice(nodes.indexOf(e.target), 1);\r\n            tr.nodes(nodes);\r\n        } else if (metaPressed && !isSelected) {\r\n            // add the node into selection\r\n            const nodes = tr.nodes().concat([e.target]);\r\n            tr.nodes(nodes);\r\n        }\r\n        layer.draw();\r\n    };\r\n\r\n    return (\r\n        <Stage\r\n            ref={$stage}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onMouseMove={onMouseMove}\r\n            onTouchStart={checkDeselect}\r\n            onClick={onClickTap}\r\n            {...stageDimensions}\r\n        >\r\n            <Layer\r\n                ref={$layer}\r\n                onDragMove={_onDragMove}\r\n                onDragEnd={_onDragEnd}\r\n            >\r\n                {templateData?.variations[variationIndex].shapes?.filter(item => item.type === \"rectangle\")?.map((rect, i) => {\r\n                    return (\r\n                        <Rectangle\r\n                            key={i}\r\n                            shapeProps={rect}\r\n                            onSelect={(e) => {\r\n                                if (e.current !== undefined) {\r\n                                    let temp = nodesArray;\r\n                                    if (!nodesArray.includes(e.current)) temp.push(e.current);\r\n                                    setNodes(temp);\r\n                                    $tr.current.nodes(nodesArray);\r\n                                    $tr.current.nodes(nodesArray);\r\n                                    $tr.current.getLayer().batchDraw();\r\n                                }\r\n                                setSelectedId(rect.id);\r\n                            }}\r\n                            // onSelect={() => {\r\n                            //     setSelectedId(rect.id)\r\n                            // }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === rect.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData?.variations[variationIndex].shapes?.filter(item => item.type === \"circle\")?.map((circle, i) => {\r\n                    return (\r\n                        <UCircle\r\n                            key={i}\r\n                            shapeProps={circle}\r\n                            onSelect={() => {\r\n                                setSelectedId(circle.id)\r\n                            }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === circle.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData?.variations[variationIndex].shapes?.filter(item => item.type === \"line\")?.map((line, i) => {\r\n                    return (\r\n                        <ULine\r\n                            key={i}\r\n                            shapeProps={line}\r\n                            onSelect={() => {\r\n                                setSelectedId(line.id)\r\n                            }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === line.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData?.variations[variationIndex].shapes?.filter(item => item.type === \"polygon\")?.map((polygon, i) => {\r\n                    return (\r\n                        <UPolygon\r\n                            key={i}\r\n                            shapeProps={polygon}\r\n                            onSelect={() => {\r\n                                setSelectedId(polygon.id)\r\n                            }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === polygon.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData?.variations[variationIndex].svgs?.map((item, index) => (\r\n                    <USvg\r\n                        key={index}\r\n                        svgProps={item}\r\n                        onSelect={() => {\r\n                            setSelectedId(item.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            prev.variations[variationIndex].svgs[index] = {\r\n                                ...prev.variations[variationIndex].svgs[index],\r\n                                ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                            }\r\n                        })}\r\n                    />\r\n                ))}\r\n                {templateData?.variations[variationIndex].images?.map((item, index) => (\r\n                    <UImage\r\n                        key={index}\r\n                        imageProps={item}\r\n                        onSelect={() => {\r\n                            setSelectedId(item.id)\r\n                        }}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            prev.variations[variationIndex].images[index] = {\r\n                                ...prev.variations[variationIndex].images[index],\r\n                                ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                            }\r\n                        })}\r\n                    />\r\n                ))}\r\n                {templateData?.variations[variationIndex].textBoxes?.map((item, index) => (\r\n                    <UText\r\n                        key={index}\r\n                        textProps={item}\r\n                        onSelect={() => {\r\n                            setSelectedId(item.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            prev.variations[variationIndex].textBoxes[index] = { ...event.target.attrs }\r\n                        })}\r\n                    />\r\n                ))}\r\n                <TransformerComponent\r\n                    id={`tr${selectedId}`}\r\n                    $tr={$tr}\r\n                    selectedShapeName={selectedId}\r\n                />\r\n                <Rect fill=\"rgba(0,0,255,0.5)\" ref={selectionRectRef} />\r\n            </Layer>\r\n        </Stage>\r\n    )\r\n}\r\n\r\nexport default MainStage\r\n","import React, { useRef } from 'react';\r\nimport { Rect } from 'react-konva';\r\nimport useImage from \"use-image\"\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst Rectangle: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n    const rectWidth = restProps.width;\r\n    const rectHeight = restProps.height;\r\n    const imageWidth = image ? image.width : 10;\r\n    const imageHeight = image ? image.height : 10;\r\n    const patternScale = restProps.patternScale || Math.max(\r\n        rectWidth / imageWidth,\r\n        rectHeight / imageHeight\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Rect\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    // transformer is changing scale of the node\r\n                    // and NOT its width or height\r\n                    // but in the store we have only width and height\r\n                    // to match the data better we will reset scale on transform end\r\n                    const node = shapeRef.current;\r\n                    const scaleX = node.scaleX();\r\n                    const scaleY = node.scaleY();\r\n\r\n                    // we will reset it back\r\n                    node.scaleX(1);\r\n                    node.scaleY(1);\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: node.x(),\r\n                        y: node.y(),\r\n                        width: Math.max(node.width() * scaleX),\r\n                        height: Math.max(node.height() * scaleY)\r\n                    });\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                fillPatternOffset={{ x: 0, y: 0 }}\r\n                fillPatternScaleX={patternScale}\r\n                fillPatternScaleY={patternScale}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default Rectangle\r\n","import React, { useRef } from 'react';\r\nimport { Circle } from 'react-konva';\r\nimport useImage from \"use-image\"\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst UCircle: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Circle\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        scaleX: e.target.attrs.scaleX,\r\n                        scaleY: e.target.attrs.scaleY,\r\n                    });\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                fillPatternOffsetX={0}\r\n                fillPatternOffsetY={0}\r\n                fillPatternScaleX={0.1}\r\n                fillPatternScaleY={0.1}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default UCircle\r\n","import React from 'react';\r\nimport { Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\ninterface Props {\r\n    imageProps: any\r\n    onChange: any\r\n    onSelect: any\r\n}\r\n\r\nconst UImage: React.FC<Props> = ({ imageProps, onChange, onSelect }) => {\r\n\r\n    const [image] = useImage(imageProps.src)\r\n\r\n    const { src, ...rest } = imageProps\r\n    return (\r\n        <>\r\n            <Image\r\n                {...rest}\r\n                image={image}\r\n                onClick={() => onSelect(imageProps.id)}\r\n                onTap={() => onSelect(imageProps.id)}\r\n                onDragEnd={onChange}\r\n                onTransformEnd={onChange}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default UImage","import React, { useRef } from 'react';\r\nimport { Line } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst ULine: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Line\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        scaleX: e.target.attrs.scaleX,\r\n                        scaleY: e.target.attrs.scaleY,\r\n                    });\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                fillPatternOffsetX={0}\r\n                fillPatternOffsetY={0}\r\n                fillPatternScaleX={0.1}\r\n                fillPatternScaleY={0.1}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default ULine\r\n","import React, { useRef } from 'react';\r\nimport { RegularPolygon } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst UPolygon: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <RegularPolygon\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                onTransformEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        scaleX: e.target.attrs.scaleX,\r\n                        scaleY: e.target.attrs.scaleY,\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                fillPatternOffsetX={0}\r\n                fillPatternOffsetY={0}\r\n                fillPatternScaleX={0.1}\r\n                fillPatternScaleY={0.1}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default UPolygon\r\n","import React from 'react';\r\nimport { Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport * as svg from \"../../../../../../../utils/svg\"\r\n\r\ninterface Props {\r\n    svgProps: any\r\n    onChange: any\r\n    onSelect: any\r\n    onEditClick: any\r\n}\r\n\r\nconst USvg: React.FC<Props> = ({ svgProps, onChange, onSelect, onEditClick }) => {\r\n\r\n    const [image] = useImage(svg.svgToURL(svg.replaceColors(svgProps.svgString, svgProps.colorMap)));\r\n\r\n    return (\r\n        <>\r\n            <Image\r\n                {...svgProps}\r\n                image={image}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                onDragEnd={onChange}\r\n                onTransformEnd={onChange}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default USvg\r\n","import React, { useRef } from 'react'\r\nimport { Text } from 'react-konva'\r\n\r\nconst UText = ({ textProps, onChange, onSelect, onEditClick }) => {\r\n    const textNode = useRef(null)\r\n\r\n    return (\r\n        <Text\r\n            ref={textNode}\r\n            draggable\r\n            onClick={onSelect}\r\n            onTap={onSelect}\r\n            onDblClick={onEditClick}\r\n            onDblTap={onEditClick}\r\n            onTransform={(e) => {\r\n                let SX = textNode.current.scaleX();\r\n                let W = textNode.current.width();\r\n\r\n                textNode.current.setAttrs({\r\n                    // ...textNode.current.getAttrs(),\r\n                    // fontSize: isWordWrapping ? textNode.current.fontSize() : textNode.current.fontSize() * textNode.current.scaleX(),\r\n                    width: W * SX,\r\n                    scaleX: 1,\r\n                    scaleY: 1\r\n                });\r\n            }}\r\n            // onTransformEnd={onChange}\r\n            onDragEnd={onChange}\r\n            {...textProps}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UText\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { Transformer } from 'react-konva'\r\n\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    selectedShapeName: any\r\n    $tr: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({ id, selectedShapeName, $tr }) => {\r\n\r\n    useEffect(() => {\r\n        checkNode();\r\n    }, [selectedShapeName])\r\n    const checkNode = () => {\r\n        const stage = $tr.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            $tr.current.nodes([selectedNode])\r\n        } else {\r\n            $tr.current.detach();\r\n        }\r\n        $tr.current.getLayer().batchDraw();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                id={id}\r\n                ref={$tr}\r\n                ignoreStroke={true}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (selectedShapeName === \"shapes_background\") return oldBox\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent","import React, { useContext, useEffect, useState } from 'react';\r\nimport { TemplateContext } from '../../../../../../../contexts/TemplateContext';\r\nimport SideBar from './SideBar';\r\nimport WebFont from \"webfontloader\";\r\nimport TopToolBar from './TopToolBar';\r\nimport MainStage from './MainStage';\r\nimport EditingTools from './EditingTools';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const [variationIndex, setVariationIndex] = useState<number>(0)\r\n\r\n    const [templateData, setTemplateData, { goForward, goBack, stepNum }] = useContext(TemplateContext)\r\n    const [selectedId, setSelectedId] = useState<string | null>(null);\r\n    const [isOpenColorPicker, setIsOpenColorPicker] = useState<boolean>(false)\r\n    const [isEditTextBox, setIsEditTextBox] = useState(false)\r\n\r\n    const unSelectAll = () => {\r\n        setIsOpenColorPicker(false)\r\n        setIsEditTextBox(false)\r\n        setSelectedId(null)\r\n    }\r\n\r\n    const handleEscape = (e) => {\r\n        if (e.key === \"Escape\") {\r\n            unSelectAll()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", handleEscape, false);\r\n        WebFont.load({\r\n            google: {\r\n                families: ['Comfortaa', 'Josefin Sans', 'Euphoria Script', 'Oswald', 'Alfa Slab One', 'Bangers', 'Caveat', 'DM Sans', 'East Sea Dokdo', 'Homemade Apple', 'Kristi', 'Lobster Two', 'Maven Pro', 'Monoton', 'Montserrat', 'Playfair Display', 'Press Start 2P', 'Raleway', 'Roboto Slab', 'Shadows Into Light', 'Swanky and Moo Moo']\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleEscape, false);\r\n        };\r\n    }, []);\r\n\r\n    const onUndo = () => {\r\n        !!setSelectedId && unSelectAll();\r\n        stepNum > 1 && goBack();\r\n    };\r\n    const onRedo = () => {\r\n        !!setSelectedId && unSelectAll();\r\n        stepNum < (history.length - 1) && goForward();\r\n    };\r\n\r\n    const handleEditSelectedItem = () => {\r\n        if (selectedId?.split(\"_\")[0] === \"textBoxes\") {\r\n            setIsEditTextBox(true)\r\n            return\r\n        }\r\n        setIsOpenColorPicker(true)\r\n    }\r\n\r\n    const handleDeleteSelectedItem = () => {\r\n        const type = selectedId?.split(\"_\")[0]\r\n        setTemplateData(prev => {\r\n            prev.variations[variationIndex][type] = prev.variations[variationIndex][type].filter(\r\n                item => item.id !== selectedId\r\n            )\r\n            unSelectAll()\r\n        })\r\n    }\r\n\r\n    const handleCloseEditTextModal = () => {\r\n        setIsEditTextBox(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-w-max  flex justify-center flex-col h-full\">\r\n            {/* <div className=\"h-20 mb-5 flex flex-wrap justify-center content-center bg-green-800\">\r\n                <p className=\"text-xl text-indigo600\">Tempalte Design</p>\r\n            </div> */}\r\n\r\n            <div className=\"\">\r\n\r\n                {/* first col */}\r\n                {/* <SideBar variationIndex={variationIndex} setTemplateData={setTemplateData} /> */}\r\n\r\n                {/* Center column */}\r\n                <div>\r\n                    {/* <TopToolBar\r\n                        onUndo={onUndo}\r\n                        onRedo={onRedo}\r\n                        setTemplateData={setTemplateData}\r\n                        variationIndex={variationIndex}\r\n                        selectedId={selectedId}\r\n                    /> */}\r\n                    <div className=\"flex justify-center mt-5 h-full\">\r\n                        <MainStage\r\n                            templateData={templateData}\r\n                            setTemplateData={setTemplateData}\r\n                            variationIndex={variationIndex}\r\n                            selectedId={selectedId}\r\n                            setSelectedId={setSelectedId}\r\n                            unSelectAll={unSelectAll}\r\n                            handleEditSelectedItem={handleEditSelectedItem}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {/* third col */}\r\n                {/* <div className={selectedId ? \"\" : \"hidden\"}>\r\n                    <EditingTools\r\n                        selectedId={selectedId}\r\n                        unSelectAll={unSelectAll}\r\n                        isOpenColorPicker={isOpenColorPicker}\r\n                        isEditTextBox={isEditTextBox}\r\n                        templateData={templateData}\r\n                        setTemplateData={setTemplateData}\r\n                        variationIndex={variationIndex}\r\n                        handleEditSelectedItem={handleEditSelectedItem}\r\n                        handleDeleteSelectedItem={handleDeleteSelectedItem}\r\n                        handleCloseEditTextModal={handleCloseEditTextModal}\r\n                    />\r\n                </div> */}\r\n\r\n            </div>\r\n\r\n\r\n        </div >\r\n    );\r\n};\r\nexport default DesignTool\r\n","import React, { useState } from 'react';\r\n\r\nconst SideBarNav: React.FC = () => {\r\n    const [state, setState] = useState('')\r\n\r\n    return (\r\n        <div className=\"h-full fixed flex  flex-col w-2/12 \">\r\n\r\n            <div className=\"flex flex-col justify-start text-left items-start leading-10  px-2 text-lightGray w-full  h-full mt-6 \">\r\n                <div className=\"flex items-center  hover:bg-rightbackgroundcolor w-full hover:rounded-lg border-0 rounded-sm pl-5 h-10\">\r\n\r\n                    <svg className=\"text-svgcolor\" width=\"20\" height=\"18\" viewBox=\"0 0 20 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M2.31802 2.31802C0.56066 4.07538 0.56066 6.92462 2.31802 8.68198L10.0001 16.364L17.682 8.68198C19.4393 6.92462 19.4393 4.07538 17.682 2.31802C15.9246 0.56066 13.0754 0.56066 11.318 2.31802L10.0001 3.63609L8.68198 2.31802C6.92462 0.56066 4.07538 0.56066 2.31802 2.31802Z\" stroke=\"#C4C4C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                    </svg>\r\n\r\n\r\n\r\n                    <button className=\"text-lightGray font-medium pl-3\">Elements</button>\r\n                </div>\r\n                <div className=\"flex items-center hover:bg-rightbackgroundcolor w-full hover:rounded-lg border-0 rounded-sm pl-5\">\r\n                    <svg width=\"15\" height=\"16\" viewBox=\"0 0 15 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M13.8867 0.109375L14.0625 3.83594H13.6172C13.5312 3.17969 13.4141 2.71094 13.2656 2.42969C13.0234 1.97656 12.6992 1.64453 12.293 1.43359C11.8945 1.21484 11.3672 1.10547 10.7109 1.10547H8.47266V13.2461C8.47266 14.2227 8.57812 14.832 8.78906 15.0742C9.08594 15.4023 9.54297 15.5664 10.1602 15.5664H10.7109V16H3.97266V15.5664H4.53516C5.20703 15.5664 5.68359 15.3633 5.96484 14.957C6.13672 14.707 6.22266 14.1367 6.22266 13.2461V1.10547H4.3125C3.57031 1.10547 3.04297 1.16016 2.73047 1.26953C2.32422 1.41797 1.97656 1.70312 1.6875 2.125C1.39844 2.54688 1.22656 3.11719 1.17188 3.83594H0.726562L0.914062 0.109375H13.8867Z\" fill=\"#D1D5DB\" />\r\n                    </svg>\r\n\r\n                    <button className=\"text-lightGray font-medium pl-4\">Text</button>\r\n                </div>\r\n                <div className=\"flex items-center hover:bg-rightbackgroundcolor w-full hover:rounded-sm border-0 rounded-sm pl-5\">\r\n                    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M1 13L5.58579 8.41421C6.36683 7.63317 7.63316 7.63316 8.41421 8.41421L13 13M11 11L12.5858 9.41421C13.3668 8.63317 14.6332 8.63316 15.4142 9.41421L17 11M11 5H11.01M3 17H15C16.1046 17 17 16.1046 17 15V3C17 1.89543 16.1046 1 15 1H3C1.89543 1 1 1.89543 1 3V15C1 16.1046 1.89543 17 3 17Z\" stroke=\"#C4C4C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                    </svg>\r\n\r\n\r\n                    <button className=\"text-lightGray font-medium pl-4\">Images</button>\r\n                </div>\r\n                <div className=\"flex items-center hover:bg-rightbackgroundcolor w-full hover:rounded-sm border-0 rounded-sm pl-5\">\r\n                    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M17 10V3C17 1.89543 16.1046 1 15 1H3C1.89543 1 1 1.89543 1 3V10M17 10V15C17 16.1046 16.1046 17 15 17H3C1.89543 17 1 16.1046 1 15V10M17 10H14.4142C14.149 10 13.8946 10.1054 13.7071 10.2929L11.2929 12.7071C11.1054 12.8946 10.851 13 10.5858 13H7.41421C7.149 13 6.89464 12.8946 6.70711 12.7071L4.29289 10.2929C4.10536 10.1054 3.851 10 3.58579 10H1\" stroke=\"#C4C4C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                    </svg>\r\n\r\n\r\n\r\n                    <button className=\"text-lightGray font-medium pl-4\" >Backgrounds</button>\r\n                </div>\r\n                <div className=\"flex items-center hover:bg-rightbackgroundcolor w-full hover:rounded-sm border-0 rounded-sm pl-5\">\r\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M10 3C10 1.89543 10.8954 1 12 1C13.1046 1 14 1.89543 14 3V4C14 4.55228 14.4477 5 15 5H18C18.5523 5 19 5.44772 19 6V9C19 9.55228 18.5523 10 18 10H17C15.8954 10 15 10.8954 15 12C15 13.1046 15.8954 14 17 14H18C18.5523 14 19 14.4477 19 15V18C19 18.5523 18.5523 19 18 19H15C14.4477 19 14 18.5523 14 18V17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17V18C10 18.5523 9.55228 19 9 19H6C5.44772 19 5 18.5523 5 18V15C5 14.4477 4.55228 14 4 14H3C1.89543 14 1 13.1046 1 12C1 10.8954 1.89543 10 3 10H4C4.55228 10 5 9.55228 5 9V6C5 5.44772 5.44772 5 6 5H9C9.55228 5 10 4.55228 10 4V3Z\" stroke=\"#C4C4C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                    </svg>\r\n\r\n\r\n\r\n                    <button className=\"text-lightGray font-medium pl-4\">Logo</button>\r\n                </div>\r\n                <div className=\"mt-6 flex justify-end w-8/12 ml-9 mb-1\">\r\n\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM9 4C9 4.55228 8.55228 5 8 5C7.44772 5 7 4.55228 7 4C7 3.44772 7.44772 3 8 3C8.55228 3 9 3.44772 9 4ZM7 7C6.44772 7 6 7.44772 6 8C6 8.55229 6.44772 9 7 9V12C7 12.5523 7.44772 13 8 13H9C9.55228 13 10 12.5523 10 12C10 11.4477 9.55228 11 9 11V8C9 7.44772 8.55228 7 8 7H7Z\" fill=\"#4338CA\" />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className=\"flex w-9/12 items-center justify-center h-12 border-0 rounded-md bg-indigo600 px-auto  mx-4\">\r\n\r\n\r\n\r\n                    <svg width=\"17\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M13.2995 17.5994H0.5V0.800049H14.0994V15.1995\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M0.5 6.7998L5.2998 2L10.0996 6.7998\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M8.09961 4.79988L10.2995 2.59998L14.0994 6.39982\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M8.09985 9.19904L6.49902 10.7999L14.8991 19.1999L16.4999 17.5991L8.09985 9.19904Z\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M8.89551 13.1955L10.4954 11.5956\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M6.49935 9.19973L4.89941 7.59979\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M5.30013 10.7996H3.7002\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M8.09961 7.99978V6.39984\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M6.49976 12.3996L5.2998 13.5995\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M9.69922 9.19971L10.8992 7.99976\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                        <path d=\"M0.5 15.5994H11.2996\" stroke=\"#F9FAFB\" stroke-linejoin=\"round\" />\r\n                    </svg>\r\n\r\n\r\n                    <button className=\"text-white font-medium pl-2\">Brandify</button>\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default SideBarNav;\r\n","import React from 'react';\r\nimport ElementSelector from './components/ElementSelector/ElementSelector';\r\nimport TextSelector from './components/TextSelector/TextSelector';\r\n\r\nconst SubNavBar: React.FC = (): JSX.Element => {\r\n    return (\r\n        <div className=\"h-full flex flex-col border-bordercolor border-r-2 w-full\">\r\n\r\n            <div className=\"w-full h-full\">\r\n                <TextSelector />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default SubNavBar;\r\n","import React from 'react';\r\n\r\nconst TextSelector: React.FC = (): JSX.Element => {\r\n    return (\r\n        <div className=\" flex   flex-col justify-center w-full p-6 \">\r\n\r\n            <div className=\" w-full\">\r\n                <h1 className=\"mt-3 font-bold text-xl\">Click text to add to page</h1>\r\n            </div>\r\n            <div className=\"mt-6 w-full flex flex-col justify-start items-start\">\r\n                <button className=\"text-5xl leading-none font-normal text-gray94 mb-2\"><h1>Heading 1</h1></button>\r\n                <button className=\"text-4xl leading-none font-normal text-gray94 mb-2\"><h1>Heading 2</h1></button>\r\n                <button className=\"text-4xl leading-none font-normal text-gray94\"><h1>Body 1</h1></button>\r\n            </div>\r\n            <div className=\"mt-6 w-full border-b-2 border-bordercolor\">\r\n            </div>\r\n            <div className=\" w-full flex flex-row items-center justify-start\">\r\n\r\n                <h1 className=\"mt-3 font-bold text-xl mr-2\">Available merge tags</h1>\r\n                <svg className=\"mt-3\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM9 12C9 12.5523 8.55229 13 8 13C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11C8.55229 11 9 11.4477 9 12ZM8 3C7.44772 3 7 3.44772 7 4V8C7 8.55228 7.44772 9 8 9C8.55229 9 9 8.55228 9 8V4C9 3.44772 8.55229 3 8 3Z\" fill=\"#4338CA\" />\r\n                </svg>\r\n\r\n            </div>\r\n            <div className=\"flex flex-row flex-wrap     \">\r\n\r\n                <div className=\"hover:bg-indigo100 px-2 py-1 border-2 border-bordercolor w-32 h-9 mt-4 rounded-md mr-4\">\r\n                    <button className=\"text-sm  hover:font-bold font-normal\">Company_name</button>\r\n                </div>\r\n                <div className=\"hover:bg-indigo100 px-2 py-1 border-2 border-bordercolor w-32 h-9 mt-4 rounded-md\">\r\n                    <button className=\"text-sm  hover:font-bold font-normal\">Company_name</button>\r\n                </div>\r\n                <div className=\"hover:bg-indigo100 px-2 py-1 border-2 border-bordercolor w-32 h-9 mt-4 rounded-md mr-4\">\r\n                    <button className=\"text-sm  hover:font-bold font-normal\">Company_name</button>\r\n                </div>\r\n                <div className=\"hover:bg-indigo100 px-2 py-1 border-2 border-bordercolor w-32 h-9 mt-4 rounded-md\">\r\n                    <button className=\"text-sm  hover:font-bold font-normal\">Business_name</button>\r\n                </div>\r\n                <div className=\"hover:bg-indigo100 px-2 py-1 border-2 border-bordercolor w-32 h-9 mt-4 rounded-md\">\r\n                    <button className=\"text-sm  hover:font-bold font-normal\">Website_URL</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <button className=\"text-indigo600 text-sm font-medium mt-6 \">Didn’t find the right merge tag?</button>\r\n            </div>\r\n            <div className=\"border-dashed  px-2 py-1 border-2 border-bordercolor w-60 h-9 mt-4 rounded-md flex flex-row\">\r\n                <svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <g filter=\"url(#filter0_d)\">\r\n                        <g clip-path=\"url(#clip0)\">\r\n                            <path d=\"M2 12C2 5.92487 6.92487 1 13 1C19.0751 1 24 5.92487 24 12C24 18.0751 19.0751 23 13 23C6.92487 23 2 18.0751 2 12Z\" fill=\"#C7D2FE\" />\r\n                            <path d=\"M13 6V12M13 12V18M13 12H19M13 12L7 12\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                        </g>\r\n                    </g>\r\n                    <defs>\r\n                        <filter id=\"filter0_d\" x=\"0\" y=\"0\" width=\"26\" height=\"26\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\">\r\n                            <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\r\n                            <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\r\n                            <feOffset dy=\"1\" />\r\n                            <feGaussianBlur stdDeviation=\"1\" />\r\n                            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.05 0\" />\r\n                            <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\" />\r\n                            <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\" />\r\n                        </filter>\r\n                        <clipPath id=\"clip0\">\r\n                            <path d=\"M2 12C2 5.92487 6.92487 1 13 1C19.0751 1 24 5.92487 24 12C24 18.0751 19.0751 23 13 23C6.92487 23 2 18.0751 2 12Z\" fill=\"white\" />\r\n                        </clipPath>\r\n                    </defs>\r\n                </svg>\r\n\r\n                <button className=\"text-sm  font-normal ml-2\">Create custom merge tag</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default TextSelector;\r\n","import React from 'react';\r\nimport Card from './Components/Card/Card';\r\nimport NavBar from './Components/NavBar/NavBar';\r\nimport SubNavBar from './Components/SubNavBar/SubNavBar';\r\n\r\n\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    return (\r\n        <div className=\"   \">\r\n\r\n            <div className=\"w-full grid grid-cols-12 font-inter h-full\">\r\n                <div className=\"col-span-2  h-full w-full border-bordercolor border-r-2 \">\r\n\r\n                    <NavBar />\r\n                </div>\r\n                <div className=\"col-span-3  h-full w-full \">\r\n                    <SubNavBar />\r\n                </div>\r\n                <div className=\"col-span-7   h-full\">\r\n                    <Card />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default DesignTool;\r\n","import React from 'react';\r\ninterface BioProps {\r\n    document_title: string,\r\n}\r\nconst Header: React.FC<BioProps> = ({ document_title }): JSX.Element => {\r\n    return (\r\n        <div className=\"bg-indigo600 h-16 flex\">\r\n\r\n            <div className=\"flex flex-row items-center justify-between w-full px-10\">\r\n\r\n                <div className=\"flex flex-row items-center\">\r\n                    <button className=\"flex flex-row items-center\">\r\n\r\n                        <svg width=\"9\" height=\"16\" viewBox=\"0 0 9 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M8 15L1 8L8 1\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                        </svg>\r\n                        <h1 className=\"text-white pl-2\">Back to Dashboard</h1>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <h1 className=\"text-white\">{document_title}</h1>\r\n                </div>\r\n                <div className=\"bg-white p-2 border-0 rounded-md\">\r\n                    <button className=\"text-base text-gray94 leading-6 font-medium\">Save & Share</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Header;\r\n","// parse svg string into DOM\r\nexport function parseSVG(svgString) {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(svgString, \"image/svg+xml\");\r\n    return doc;\r\n}\r\n\r\n// get color of element\r\n// we can also check styles of element and other properties like \"stroke\"\r\nexport function getElementColor(el) {\r\n    return el.getAttribute(\"fill\");\r\n}\r\n\r\n// find all colors used in svg\r\nexport function getColors(svgString) {\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n    const usedColors = [];\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        // if color is defined and uniq we will add it\r\n        if (color && usedColors.indexOf(color) === -1) {\r\n            usedColors.push(color);\r\n        }\r\n    }\r\n    return usedColors;\r\n}\r\n\r\n// convert svg string into base64 data URL\r\nexport function svgToURL(s) {\r\n    const uri = window.btoa(unescape(encodeURIComponent(s)));\r\n    return \"data:image/svg+xml;base64,\" + uri;\r\n}\r\n\r\n// replace colors in svg string\r\nexport function replaceColors(svgString, map) {\r\n    // we can do some RegExp magic here\r\n    // but I will just manually check every element\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        if (map[color]) {\r\n            element.setAttribute(\"fill\", map[color]);\r\n        }\r\n    }\r\n    var xmlSerializer = new XMLSerializer();\r\n    const str = xmlSerializer.serializeToString(doc);\r\n    return str;\r\n}\r\n\r\nexport function getSvgStringFromUpload(files) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            var reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                var svgData: any = e.target.result;\r\n                var parser = new DOMParser();\r\n                var doc = parser.parseFromString(svgData, \"image/svg+xml\");\r\n                resolve(doc.documentElement.outerHTML)\r\n            }\r\n            reader.readAsText(files[0]);\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AA7BA;AAoCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AACA;AA/CA;AAihBA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAH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;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5FA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;ACfjsourceRoot":""}