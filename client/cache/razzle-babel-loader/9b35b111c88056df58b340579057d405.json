{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\cardclan-backend\\\\client\\\\src\\\\Screens\\\\CreateCardLayout\\\\components\\\\DesignTool\\\\Components\\\\Card\\\\MainCanvas\\\\UTransformer.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { Transformer } from 'react-konva';\nexport const MIN_WIDTH = 50;\nexport const MIN_HEIGHT = 30;\n\nconst TransformerComponent = ({\n  id,\n  selectedShapeName,\n  $tr\n}) => {\n  useEffect(() => {\n    checkNode();\n  }, [selectedShapeName]);\n\n  const checkNode = () => {\n    const stage = $tr.current.getStage();\n    const selectedNode = stage.findOne(\"#\" + selectedShapeName);\n\n    if (selectedNode) {\n      $tr.current.nodes([selectedNode]);\n    } else {\n      $tr.current.detach();\n    }\n\n    $tr.current.getLayer().batchDraw();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Transformer, {\n    id: id,\n    ref: $tr,\n    ignoreStroke: true,\n    boundBoxFunc: (oldBox, newBox) => {\n      if (selectedShapeName === \"shapes_background\") return oldBox;\n\n      if (newBox.width < MIN_WIDTH) {\n        return _objectSpread(_objectSpread({}, oldBox), {}, {\n          width: MIN_WIDTH\n        });\n      }\n\n      return newBox;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default TransformerComponent;","map":{"version":3,"sources":["C:/Users/HP/cardclan-backend/client/src/Screens/CreateCardLayout/components/DesignTool/Components/Card/MainCanvas/UTransformer.tsx"],"names":["React","useEffect","Transformer","MIN_WIDTH","MIN_HEIGHT","TransformerComponent","id","selectedShapeName","$tr","checkNode","stage","current","getStage","selectedNode","findOne","nodes","detach","getLayer","batchDraw","oldBox","newBox","width"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,EAAlB;AACP,OAAO,MAAMC,UAAU,GAAG,EAAnB;;AAQP,MAAMC,oBAAqC,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,iBAAN;AAAyBC,EAAAA;AAAzB,CAAD,KAAoC;AAE9EP,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACF,iBAAD,CAFM,CAAT;;AAGA,QAAME,SAAS,GAAG,MAAM;AACpB,UAAMC,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,EAAd;AACA,UAAMC,YAAY,GAAGH,KAAK,CAACI,OAAN,CAAc,MAAMP,iBAApB,CAArB;;AACA,QAAIM,YAAJ,EAAkB;AACdL,MAAAA,GAAG,CAACG,OAAJ,CAAYI,KAAZ,CAAkB,CAACF,YAAD,CAAlB;AACH,KAFD,MAEO;AACHL,MAAAA,GAAG,CAACG,OAAJ,CAAYK,MAAZ;AACH;;AACDR,IAAAA,GAAG,CAACG,OAAJ,CAAYM,QAAZ,GAAuBC,SAAvB;AACH,GATD;;AAWA,SACI,4BACI,MAAC,WAAD;AACI,IAAA,EAAE,EAAEZ,EADR;AAEI,IAAA,GAAG,EAAEE,GAFT;AAGI,IAAA,YAAY,EAAE,IAHlB;AAII,IAAA,YAAY,EAAE,CAACW,MAAD,EAASC,MAAT,KAAoB;AAC9B,UAAIb,iBAAiB,KAAK,mBAA1B,EAA+C,OAAOY,MAAP;;AAC/C,UAAIC,MAAM,CAACC,KAAP,GAAelB,SAAnB,EAA8B;AAC1B,+CAAYgB,MAAZ;AAAoBE,UAAAA,KAAK,EAAElB;AAA3B;AACH;;AACD,aAAOiB,MAAP;AACH,KAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAgBH,CAhCD;;AAkCA,eAAef,oBAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Transformer } from 'react-konva'\r\n\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    selectedShapeName: any\r\n    $tr: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({ id, selectedShapeName, $tr }) => {\r\n\r\n    useEffect(() => {\r\n        checkNode();\r\n    }, [selectedShapeName])\r\n    const checkNode = () => {\r\n        const stage = $tr.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            $tr.current.nodes([selectedNode])\r\n        } else {\r\n            $tr.current.detach();\r\n        }\r\n        $tr.current.getLayer().batchDraw();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                id={id}\r\n                ref={$tr}\r\n                ignoreStroke={true}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (selectedShapeName === \"shapes_background\") return oldBox\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent"]},"metadata":{},"sourceType":"module"}