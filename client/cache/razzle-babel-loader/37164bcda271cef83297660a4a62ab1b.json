{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\hyper-engage\\\\web\\\\src\\\\Screens\\\\CreateCardLayout\\\\components\\\\DesignTool\\\\Components\\\\Card\\\\tailwindComponents\\\\EditTextBox.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { googleFontsList } from '../../../../../../../utils/defaults';\n\nvar EditTextBox = function EditTextBox(_ref) {\n  var selectedId = _ref.selectedId,\n      variationIndex = _ref.variationIndex,\n      templateData = _ref.templateData,\n      setTemplateData = _ref.setTemplateData,\n      handleCloseEditTextModal = _ref.handleCloseEditTextModal;\n\n  var _useState = useState(\"\"),\n      inputValue = _useState[0],\n      setInputValue = _useState[1];\n\n  var _useState2 = useState(20),\n      fontSize = _useState2[0],\n      setFontSize = _useState2[1];\n\n  var _useState3 = useState(\"normal\"),\n      fontStyle = _useState3[0],\n      setFontStyle = _useState3[1]; // const [fontFamily, setFontFamily] = useState(googleFontsList[0]);\n\n\n  var _useState4 = useState(\"Montserrat\"),\n      fontFamily = _useState4[0],\n      setFontFamily = _useState4[1];\n\n  var _useState5 = useState(\"left\"),\n      textAlign = _useState5[0],\n      setTextAlign = _useState5[1];\n\n  useEffect(function () {\n    if ((selectedId === null || selectedId === void 0 ? void 0 : selectedId.split(\"_\")[0]) === \"textBoxes\") {\n      var index = templateData.variations[variationIndex].textBoxes.findIndex(function (item) {\n        return item.id === selectedId;\n      });\n      setInputValue(templateData.variations[variationIndex].textBoxes[index].text);\n      setFontSize(templateData.variations[variationIndex].textBoxes[index].fontSize);\n      setFontFamily(templateData.variations[variationIndex].textBoxes[index].fontFamily);\n      setTextAlign(templateData.variations[variationIndex].textBoxes[index].align);\n    }\n  }, [selectedId]);\n\n  var handleSave = function handleSave() {\n    setTemplateData(function (prev) {\n      var index = prev.variations[variationIndex].textBoxes.findIndex(function (item) {\n        return item.id === selectedId;\n      });\n      prev.variations[variationIndex].textBoxes[index].text = inputValue;\n      prev.variations[variationIndex].textBoxes[index].fontSize = fontSize;\n      prev.variations[variationIndex].textBoxes[index].fontStyle = fontStyle;\n      prev.variations[variationIndex].textBoxes[index].fontFamily = fontFamily;\n      prev.variations[variationIndex].textBoxes[index].align = textAlign;\n    });\n    handleCloseEditTextModal();\n  };\n\n  return __jsx(\"div\", {\n    className: \"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Font Size:\"), __jsx(\"input\", {\n    className: \"border mb-5\",\n    type: \"number\",\n    value: fontSize,\n    onChange: function onChange(e) {\n      return setFontSize(parseInt(e.target.value));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \"Select Font style:\"), __jsx(\"select\", {\n    className: \"border mb-5\",\n    name: \"font-style\",\n    onChange: function onChange(e) {\n      return setFontStyle(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"normal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  }, \"normal\"), __jsx(\"option\", {\n    value: \"bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, \"bold\"), __jsx(\"option\", {\n    value: \"italic\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, \"italic\"), __jsx(\"option\", {\n    value: \"italic bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, \"italic bold\")), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Select Text Alignment:\"), __jsx(\"select\", {\n    className: \"border mb-5\",\n    name: \"text-align\",\n    onChange: function onChange(e) {\n      return setTextAlign(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, \"left\"), __jsx(\"option\", {\n    value: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \"center\"), __jsx(\"option\", {\n    value: \"right\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"right\")), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"Select font family:\"), __jsx(\"select\", {\n    value: fontFamily,\n    style: {\n      fontFamily: fontFamily\n    },\n    onChange: function onChange(e) {\n      return setFontFamily(e.target.value);\n    },\n    className: \"border mb-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, googleFontsList.map(function (val, index) {\n    return __jsx(\"option\", {\n      className: \"bg-white text-black\",\n      style: {\n        fontFamily: val\n      },\n      key: index,\n      selected: val === fontFamily,\n      value: val,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, val);\n  }))), __jsx(\"div\", {\n    className: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, __jsx(\"textarea\", {\n    className: \"border h-40 w-full\",\n    style: {\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontStyle: fontStyle,\n      textAlign: textAlign\n    },\n    value: inputValue,\n    onChange: function onChange(e) {\n      return setInputValue(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    className: \"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    onClick: handleSave,\n    type: \"button\",\n    className: \"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Done\")));\n};\n\nexport default EditTextBox;","map":{"version":3,"sources":["D:/dev/hyper-engage/web/src/Screens/CreateCardLayout/components/DesignTool/Components/Card/tailwindComponents/EditTextBox.tsx"],"names":["React","useEffect","useState","googleFontsList","EditTextBox","selectedId","variationIndex","templateData","setTemplateData","handleCloseEditTextModal","inputValue","setInputValue","fontSize","setFontSize","fontStyle","setFontStyle","fontFamily","setFontFamily","textAlign","setTextAlign","split","index","variations","textBoxes","findIndex","item","id","text","align","handleSave","prev","e","parseInt","target","value","map","val"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { googleFontsList } from '../../../../../../../utils/defaults'\r\n\r\ninterface Props {\r\n    selectedId: string\r\n    variationIndex: number\r\n    templateData: any\r\n    setTemplateData: any\r\n    handleCloseEditTextModal: any\r\n}\r\n\r\nconst EditTextBox: React.FC<Props> = ({ selectedId, variationIndex, templateData, setTemplateData, handleCloseEditTextModal }) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>(\"\")\r\n    const [fontSize, setFontSize] = useState<number>(20)\r\n    const [fontStyle, setFontStyle] = useState<string>(\"normal\")\r\n    // const [fontFamily, setFontFamily] = useState(googleFontsList[0]);\r\n    const [fontFamily, setFontFamily] = useState(\"Montserrat\");\r\n    const [textAlign, setTextAlign] = useState(\"left\")\r\n\r\n    useEffect(() => {\r\n        if (selectedId?.split(\"_\")[0] === \"textBoxes\") {\r\n            const index = templateData.variations[variationIndex].textBoxes.findIndex(item => item.id === selectedId)\r\n            setInputValue(templateData.variations[variationIndex].textBoxes[index].text)\r\n            setFontSize(templateData.variations[variationIndex].textBoxes[index].fontSize)\r\n            setFontFamily(templateData.variations[variationIndex].textBoxes[index].fontFamily)\r\n            setTextAlign(templateData.variations[variationIndex].textBoxes[index].align)\r\n        }\r\n    }, [selectedId])\r\n\r\n    const handleSave = () => {\r\n        setTemplateData(prev => {\r\n            const index = prev.variations[variationIndex].textBoxes.findIndex(item => item.id === selectedId)\r\n            prev.variations[variationIndex].textBoxes[index].text = inputValue\r\n            prev.variations[variationIndex].textBoxes[index].fontSize = fontSize\r\n            prev.variations[variationIndex].textBoxes[index].fontStyle = fontStyle\r\n            prev.variations[variationIndex].textBoxes[index].fontFamily = fontFamily\r\n            prev.variations[variationIndex].textBoxes[index].align = textAlign\r\n        })\r\n        handleCloseEditTextModal()\r\n    }\r\n\r\n    return (\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <div className=\"\">\r\n                    <p>Font Size:</p>\r\n                    <input className=\"border mb-5\" type=\"number\" value={fontSize} onChange={e => setFontSize(parseInt(e.target.value))} />\r\n                    <p>Select Font style:</p>\r\n                    <select className=\"border mb-5\" name=\"font-style\" onChange={e => setFontStyle(e.target.value)}>\r\n                        <option value=\"normal\">normal</option>\r\n                        <option value=\"bold\">bold</option>\r\n                        <option value=\"italic\">italic</option>\r\n                        <option value=\"italic bold\">italic bold</option>\r\n                    </select>\r\n                    <p>Select Text Alignment:</p>\r\n                    <select className=\"border mb-5\" name=\"text-align\" onChange={e => setTextAlign(e.target.value)}>\r\n                        <option value=\"left\">left</option>\r\n                        <option value=\"center\">center</option>\r\n                        <option value=\"right\">right</option>\r\n                    </select>\r\n                    <p>Select font family:</p>\r\n                    <select\r\n                        value={fontFamily}\r\n                        style={{ fontFamily: fontFamily }}\r\n                        onChange={e => setFontFamily(e.target.value)}\r\n                        className=\"border mb-5\"\r\n                    >\r\n                        {googleFontsList.map((val, index) => {\r\n                            return (\r\n                                <option\r\n                                    className=\"bg-white text-black\"\r\n                                    style={{ fontFamily: val }}\r\n                                    key={index}\r\n                                    selected={val === fontFamily}\r\n                                    value={val}\r\n                                >\r\n                                    {val}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"\">\r\n                    <textarea\r\n                        className=\"border h-40 w-full\"\r\n                        style={{\r\n                            fontFamily: fontFamily,\r\n                            fontSize: fontSize,\r\n                            fontStyle: fontStyle,\r\n                            textAlign: textAlign as \"center\",\r\n                        }}\r\n                        value={inputValue}\r\n                        onChange={(e) => setInputValue(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                <button\r\n                    onClick={handleSave}\r\n                    type=\"button\"\r\n                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n                    Done\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTextBox\r\n"]},"metadata":{},"sourceType":"module"}