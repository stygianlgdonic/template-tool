{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\cardclan-backend\\\\template-tool\\\\src\\\\components\\\\SelectPalette\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { ROUTE_NAMES } from '../../routes/route_names';\nimport { TemplateContext } from '../../contexts/TemplateContext';\nimport PaletteColorSelect from \"../tailwindComponents/PaletteColorSelect\";\n\nconst SelectPalette = () => {\n  const {\n    0: templateData,\n    1: setTemplateData\n  } = useContext(TemplateContext);\n  const {\n    0: showColorPicker,\n    1: setShowColorPicker\n  } = useState(false);\n  const {\n    0: currentSelectedColor,\n    1: setCurrentSelectedColor\n  } = useState(null);\n\n  const handleShowColorPicker = Color => {\n    setShowColorPicker(true);\n    setCurrentSelectedColor(Color);\n  };\n\n  const handleCloseColorPicker = () => {\n    setShowColorPicker(false);\n  };\n\n  const handleColorChange = color => {\n    setTemplateData(prev => {\n      const index = prev.palette.findIndex(item => item.name === (currentSelectedColor === null || currentSelectedColor === void 0 ? void 0 : currentSelectedColor.name));\n      prev.palette[index].color = color;\n      setCurrentSelectedColor(_objectSpread(_objectSpread({}, currentSelectedColor), {}, {\n        color: color\n      }));\n    });\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, showColorPicker && __jsx(PaletteColorSelect, {\n    currentSelectedColor: currentSelectedColor.color,\n    handleColorChange: handleColorChange,\n    handleCloseColorPicker: handleCloseColorPicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"h-20 flex flex-wrap justify-center content-center bg-green-800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    className: \"text-xl text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"Select palette for your template\")), templateData.palette.map((item, index) => __jsx(\"div\", {\n    key: index,\n    className: \"h-10 mt-5 mb-5 flex flex-wrap justify-center content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    className: \"w-48\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, item.name), \" \", __jsx(\"div\", {\n    className: \"w-10 h-10 border border-black\",\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => handleShowColorPicker(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 57\n    }\n  }))), __jsx(\"div\", {\n    className: \"flex justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, __jsx(NavLink, {\n    className: \"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\",\n    to: ROUTE_NAMES.design_tool,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Proceed\")));\n};\n\nexport default SelectPalette;","map":{"version":3,"sources":["D:/Development/cardclan-backend/template-tool/src/components/SelectPalette/index.tsx"],"names":["React","useState","useContext","NavLink","ROUTE_NAMES","TemplateContext","PaletteColorSelect","SelectPalette","templateData","setTemplateData","showColorPicker","setShowColorPicker","currentSelectedColor","setCurrentSelectedColor","handleShowColorPicker","Color","handleCloseColorPicker","handleColorChange","color","prev","index","palette","findIndex","item","name","map","backgroundColor","design_tool"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { ROUTE_NAMES } from '../../routes/route_names'\r\nimport { TemplateContext } from '../../contexts/TemplateContext'\r\nimport PaletteColorSelect from \"../tailwindComponents/PaletteColorSelect\"\r\n\r\ninterface IColor {\r\n    name: string\r\n    color: string\r\n}\r\n\r\nconst SelectPalette = () => {\r\n\r\n    const [templateData, setTemplateData] = useContext(TemplateContext)\r\n    const [showColorPicker, setShowColorPicker] = useState<boolean>(false)\r\n    const [currentSelectedColor, setCurrentSelectedColor] = useState<IColor | null>(null)\r\n\r\n    const handleShowColorPicker = (Color: IColor) => {\r\n        setShowColorPicker(true)\r\n        setCurrentSelectedColor(Color)\r\n    }\r\n\r\n    const handleCloseColorPicker = () => {\r\n        setShowColorPicker(false)\r\n    }\r\n\r\n    const handleColorChange = (color: string) => {\r\n        setTemplateData(prev => {\r\n            const index = prev.palette.findIndex(item => item.name === currentSelectedColor?.name)\r\n            prev.palette[index].color = color\r\n            setCurrentSelectedColor({ ...currentSelectedColor, color: color })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showColorPicker && (\r\n                <PaletteColorSelect\r\n                    currentSelectedColor={currentSelectedColor.color}\r\n                    handleColorChange={handleColorChange}\r\n                    handleCloseColorPicker={handleCloseColorPicker}\r\n                />\r\n            )}\r\n            <div className=\"h-20 flex flex-wrap justify-center content-center bg-green-800\">\r\n                <p className=\"text-xl text-white\">Select palette for your template</p>\r\n            </div>\r\n            {templateData.palette.map((item, index) => (\r\n                <div key={index} className=\"h-10 mt-5 mb-5 flex flex-wrap justify-center content-center\" >\r\n                    <p className=\"w-48\">{item.name}</p> <div\r\n                        className=\"w-10 h-10 border border-black\"\r\n                        style={{ backgroundColor: item.color }}\r\n                        onClick={() => handleShowColorPicker(item)}\r\n                    ></div>\r\n                </div>\r\n            ))}\r\n            <div className=\"flex justify-center\">\r\n                <NavLink\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    to={ROUTE_NAMES.design_tool}\r\n                >\r\n                    Proceed\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectPalette\r\n"]},"metadata":{},"sourceType":"module"}