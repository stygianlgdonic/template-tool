{"ast":null,"code":"import _extends from \"D:/dev/cardclan-backend/template-tool/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"D:/dev/cardclan-backend/template-tool/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:/dev/cardclan-backend/template-tool/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"D:/dev/cardclan-backend/template-tool/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"patternImageUrl\"];\n\nvar _jsxFileName = \"D:\\\\dev\\\\cardclan-backend\\\\template-tool\\\\src\\\\components\\\\DesignTool\\\\Rectangle.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport { Rect } from 'react-konva';\nimport useImage from \"use-image\";\n\nvar Rectangle = function Rectangle(_ref) {\n  var shapeProps = _ref.shapeProps,\n      onSelect = _ref.onSelect,\n      onChange = _ref.onChange,\n      onEditClick = _ref.onEditClick;\n  var shapeRef = useRef(null);\n\n  var patternImageUrl = shapeProps.patternImageUrl,\n      restProps = _objectWithoutProperties(shapeProps, _excluded);\n\n  console.log({\n    restProps: restProps\n  });\n\n  var _useImage = useImage(patternImageUrl || null),\n      _useImage2 = _slicedToArray(_useImage, 1),\n      image = _useImage2[0];\n\n  var rectWidth = restProps.width;\n  var rectHeight = restProps.height;\n  var imageWidth = image ? image.width : 10;\n  var imageHeight = image ? image.height : 10;\n  var patternScale = restProps.patternScale || Math.max(rectWidth / imageWidth, rectHeight / imageHeight);\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(Rect, _extends({\n    ref: shapeRef,\n    onClick: onSelect,\n    onTap: onSelect,\n    onDblClick: onEditClick,\n    onDblTap: onEditClick,\n    draggable: true,\n    strokeScaleEnabled: false,\n    onTransformEnd: function onTransformEnd(e) {\n      // transformer is changing scale of the node\n      // and NOT its width or height\n      // but in the store we have only width and height\n      // to match the data better we will reset scale on transform end\n      var node = shapeRef.current;\n      var scaleX = node.scaleX();\n      var scaleY = node.scaleY(); // we will reset it back\n\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange(_objectSpread(_objectSpread({}, shapeProps), {}, {\n        x: node.x(),\n        y: node.y(),\n        width: Math.max(node.width() * scaleX),\n        height: Math.max(node.height() * scaleY)\n      }));\n    },\n    onDragEnd: function onDragEnd(e) {\n      onChange(_objectSpread(_objectSpread({}, shapeProps), {}, {\n        x: e.target.x(),\n        y: e.target.y()\n      }));\n    },\n    fillPatternImage: image,\n    fillPatternScaleX: patternScale,\n    fillPatternScaleY: patternScale,\n    fillPatternRepeat: \"no-repeat\"\n  }, restProps, {\n    fillPatternOffsetX: 250,\n    fillPatternOffsetY: 250,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default Rectangle;","map":{"version":3,"sources":["D:/dev/cardclan-backend/template-tool/src/components/DesignTool/Rectangle.tsx"],"names":["React","useRef","Rect","useImage","Rectangle","shapeProps","onSelect","onChange","onEditClick","shapeRef","patternImageUrl","restProps","console","log","image","rectWidth","width","rectHeight","height","imageWidth","imageHeight","patternScale","Math","max","e","node","current","scaleX","scaleY","x","y","target"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { Rect } from 'react-konva';\r\nimport useImage from \"use-image\"\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst Rectangle: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n\r\n    console.log({ restProps })\r\n\r\n    const [image] = useImage(patternImageUrl || null)\r\n    const rectWidth = restProps.width;\r\n    const rectHeight = restProps.height;\r\n    const imageWidth = image ? image.width : 10;\r\n    const imageHeight = image ? image.height : 10;\r\n    const patternScale = restProps.patternScale || Math.max(\r\n        rectWidth / imageWidth,\r\n        rectHeight / imageHeight\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Rect\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    // transformer is changing scale of the node\r\n                    // and NOT its width or height\r\n                    // but in the store we have only width and height\r\n                    // to match the data better we will reset scale on transform end\r\n                    const node = shapeRef.current;\r\n                    const scaleX = node.scaleX();\r\n                    const scaleY = node.scaleY();\r\n\r\n                    // we will reset it back\r\n                    node.scaleX(1);\r\n                    node.scaleY(1);\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: node.x(),\r\n                        y: node.y(),\r\n                        width: Math.max(node.width() * scaleX),\r\n                        height: Math.max(node.height() * scaleY)\r\n                    });\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                fillPatternImage={image}\r\n                fillPatternScaleX={patternScale}\r\n                fillPatternScaleY={patternScale}\r\n                fillPatternRepeat=\"no-repeat\"\r\n                {...restProps}\r\n                fillPatternOffsetX={250}\r\n                fillPatternOffsetY={250}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default Rectangle\r\n"]},"metadata":{},"sourceType":"module"}