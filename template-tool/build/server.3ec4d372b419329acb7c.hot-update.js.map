{"version":3,"file":"server.3ec4d372b419329acb7c.hot-update.js","sources":["webpack:///./src/components/Home/components/TemplateList/Elements/index.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ninterface Props {\r\n    konvaItem: any\r\n}\r\n\r\nconst Elements: React.FC<Props> = ({ konvaItem }) => {\r\n    return (\r\n        <>\r\n            {templateData.variations[variationIndex].elements?.map((elem, i) => {\r\n                if (elem.type === \"rectangle\") return (\r\n                    <Rectangle\r\n                        key={i}\r\n                        shapeProps={elem}\r\n                        onSelect={(e) => {\r\n                            if (e.current !== undefined) {\r\n                                let temp = nodesArray;\r\n                                if (!nodesArray.includes(e.current)) temp.push(e.current);\r\n                                setNodes(temp);\r\n                                $tr.current.nodes(nodesArray);\r\n                                $tr.current.nodes(nodesArray);\r\n                                $tr.current.getLayer().batchDraw();\r\n                            }\r\n                            setSelectedId(elem.id);\r\n                        }}\r\n                        // onSelect={() => {\r\n                        //     setSelectedId(rect.id)\r\n                        // }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(newAttrs) => {\r\n                            setTemplateData((prev) => {\r\n                                const index = prev.variations[variationIndex].elements.findIndex(item => item.id === elem.id)\r\n                                prev.variations[variationIndex].elements[index] = newAttrs\r\n                            });\r\n                        }}\r\n                    />\r\n                )\r\n\r\n                if (elem.type === \"circle\") return (\r\n                    <UCircle\r\n                        key={i}\r\n                        shapeProps={elem}\r\n                        onSelect={() => {\r\n                            setSelectedId(elem.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(newAttrs) => {\r\n                            setTemplateData((prev) => {\r\n                                const index = prev.variations[variationIndex].elements.findIndex(item => item.id === elem.id)\r\n                                prev.variations[variationIndex].elements[index] = newAttrs\r\n                            });\r\n                        }}\r\n                    />\r\n                )\r\n\r\n                if (elem.type === \"line\") return (\r\n                    <ULine\r\n                        key={i}\r\n                        shapeProps={elem}\r\n                        onSelect={() => {\r\n                            setSelectedId(elem.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(newAttrs) => {\r\n                            setTemplateData((prev) => {\r\n                                const index = prev.variations[variationIndex].elements.findIndex(item => item.id === elem.id)\r\n                                prev.variations[variationIndex].elements[index] = newAttrs\r\n                            });\r\n                        }}\r\n                    />\r\n                )\r\n\r\n                if (elem.type === \"polygon\") return (\r\n                    <UPolygon\r\n                        key={i}\r\n                        shapeProps={elem}\r\n                        onSelect={() => {\r\n                            setSelectedId(elem.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(newAttrs) => {\r\n                            setTemplateData((prev) => {\r\n                                const index = prev.variations[variationIndex].elements.findIndex(item => item.id === elem.id)\r\n                                prev.variations[variationIndex].elements[index] = newAttrs\r\n                            });\r\n                        }}\r\n                    />\r\n                )\r\n\r\n                if (elem.type === \"svg\") return (\r\n                    <USvg\r\n                        key={i}\r\n                        svgProps={elem}\r\n                        onSelect={() => {\r\n                            setSelectedId(elem.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            const svgIndex = prev.variations[variationIndex].elements.findIndex(svgItem => svgItem.id === elem.id)\r\n                            prev.variations[variationIndex].elements[svgIndex] = {\r\n                                ...prev.variations[variationIndex].elements[svgIndex],\r\n                                ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                            }\r\n                        })}\r\n                    />\r\n                )\r\n\r\n                if (elem.type === \"image\") return (\r\n                    <UImage\r\n                        key={i}\r\n                        imageProps={elem}\r\n                        onSelect={() => {\r\n                            setSelectedId(elem.id)\r\n                        }}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            const imageIndex = prev.variations[variationIndex].elements.findIndex(img => img.id === elem.id)\r\n                            prev.variations[variationIndex].elements[imageIndex] = {\r\n                                ...prev.variations[variationIndex].elements[imageIndex],\r\n                                ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                            }\r\n                        })}\r\n                    />\r\n                )\r\n\r\n                if (elem.type === \"text\") return (\r\n                    <UText\r\n                        key={i}\r\n                        textProps={elem}\r\n                        onSelect={() => {\r\n                            setSelectedId(elem.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            const txtIndex = prev.variations[variationIndex].elements.findIndex(txt => txt.id === elem.id)\r\n                            prev.variations[variationIndex].elements[txtIndex] = { ...event.target.attrs }\r\n                        })}\r\n                    />\r\n                )\r\n\r\n\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Elements\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAhBA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAGA;AACA;AACA;;;;A","sourceRoot":""}