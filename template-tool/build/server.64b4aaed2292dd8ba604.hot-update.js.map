{"version":3,"file":"server.64b4aaed2292dd8ba604.hot-update.js","sources":["webpack:///./src/components/Home/components/TemplateList/Elements/index.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Circle, Image, Line, Rect, RegularPolygon } from 'react-konva';\r\n\r\ninterface Props {\r\n    konvaItem: any\r\n    index: number\r\n}\r\n\r\nconst Elements: React.FC<Props> = ({ konvaItem, index }) => {\r\n    return (\r\n        <>\r\n            {\r\n                konvaItem.type === \"rectangle\" && (\r\n                    <Rect\r\n                        key={index}\r\n                        {...konvaItem}\r\n                    />\r\n                )\r\n            }\r\n\r\n            {konvaItem.type === \"circle\" && (\r\n                <Circle\r\n                    key={index}\r\n                    {...konvaItem}\r\n                />\r\n            )}\r\n\r\n            {konvaItem.type === \"line\" && (\r\n                <Line\r\n                    key={index}\r\n                    {...konvaItem}\r\n                />\r\n            )}\r\n\r\n            {konvaItem.type === \"polygon\" && (\r\n                <RegularPolygon\r\n                    key={index}\r\n                    {...konvaItem}\r\n                />\r\n            )}\r\n\r\n            {konvaItem.type === \"svg\" && (\r\n                <Image\r\n                    key={index}\r\n                    {...konvaItem}\r\n                />\r\n            )}\r\n\r\n            if (elem.type === \"image\") return (\r\n            <UImage\r\n                key={i}\r\n                imageProps={elem}\r\n                onSelect={() => {\r\n                    setSelectedId(elem.id)\r\n                }}\r\n                onChange={(event) => setTemplateData((prev) => {\r\n                    const imageIndex = prev.variations[variationIndex].elements.findIndex(img => img.id === elem.id)\r\n                    prev.variations[variationIndex].elements[imageIndex] = {\r\n                        ...prev.variations[variationIndex].elements[imageIndex],\r\n                        ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                    }\r\n                })}\r\n            />\r\n            )\r\n\r\n            if (elem.type === \"text\") return (\r\n            <UText\r\n                key={i}\r\n                textProps={elem}\r\n                onSelect={() => {\r\n                    setSelectedId(elem.id)\r\n                }}\r\n                onEditClick={handleEditSelectedItem}\r\n                onChange={(event) => setTemplateData((prev) => {\r\n                    const txtIndex = prev.variations[variationIndex].elements.findIndex(txt => txt.id === elem.id)\r\n                    prev.variations[variationIndex].elements[txtIndex] = { ...event.target.attrs }\r\n                })}\r\n            />\r\n            )\r\n\r\n\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Elements\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AAKA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;;;;A","sourceRoot":""}