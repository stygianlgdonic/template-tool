{"version":3,"file":"0.fe92b2c396e5da685a0b.hot-update.js","sources":["webpack:///./src/components/tailwindComponents/EditTextBox.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { SketchPicker } from 'react-color'\r\nimport { googleFontsList } from '../../utils/defaults'\r\n\r\ninterface Props {\r\n    selectedId: string\r\n    variationIndex: number\r\n    templateData: any\r\n    setTemplateData: any\r\n    handleCloseEditTextModal: any\r\n}\r\n\r\nconst EditTextBox: React.FC<Props> = ({ selectedId, variationIndex, templateData, setTemplateData, handleCloseEditTextModal }) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>(\"\")\r\n    const [fontSize, setFontSize] = useState<number>(20)\r\n    const [fontStyle, setFontStyle] = useState<string>(\"normal\")\r\n    const [fontFamily, setFontFamily] = useState(googleFontsList[0]);\r\n    const [textAlign, setTextAlign] = useState(\"left\")\r\n    const [fontColor, setFontColor] = useState(\"#000000\")\r\n\r\n    useEffect(() => {\r\n        if (selectedId?.split(\"_\")[0] === \"textBoxes\") {\r\n            const index = templateData.variations[variationIndex].elements.findIndex(item => item.id === selectedId)\r\n            setInputValue(templateData.variations[variationIndex].elements[index].text)\r\n            setFontSize(templateData.variations[variationIndex].elements[index].fontSize)\r\n            setFontFamily(templateData.variations[variationIndex].elements[index].fontFamily)\r\n            setTextAlign(templateData.variations[variationIndex].elements[index].align)\r\n            setFontColor(templateData.variations[variationIndex].elements[index].color)\r\n        }\r\n    }, [selectedId])\r\n\r\n    const handleSave = () => {\r\n        setTemplateData(prev => {\r\n            const index = prev.variations[variationIndex].elements.findIndex(item => item.id === selectedId)\r\n            prev.variations[variationIndex].elements[index].text = inputValue\r\n            prev.variations[variationIndex].elements[index].fontSize = fontSize\r\n            prev.variations[variationIndex].elements[index].fontStyle = fontStyle\r\n            prev.variations[variationIndex].elements[index].fontFamily = fontFamily\r\n            prev.variations[variationIndex].elements[index].align = textAlign\r\n            prev.variations[variationIndex].elements[index].fill = fontColor\r\n        })\r\n        handleCloseEditTextModal()\r\n    }\r\n\r\n    return (\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <div className=\"\">\r\n                    <p>Font Size:</p>\r\n                    <input className=\"border mb-5\" type=\"number\" value={fontSize} onChange={e => setFontSize(parseInt(e.target.value))} />\r\n                    <p>Select Font style:</p>\r\n                    <select className=\"border mb-5\" name=\"font-style\" onChange={e => setFontStyle(e.target.value)}>\r\n                        <option value=\"normal\">normal</option>\r\n                        <option value=\"bold\">bold</option>\r\n                        <option value=\"italic\">italic</option>\r\n                        <option value=\"italic bold\">italic bold</option>\r\n                    </select>\r\n                    <p>Select Text Alignment:</p>\r\n                    <select className=\"border mb-5\" name=\"text-align\" onChange={e => setTextAlign(e.target.value)}>\r\n                        <option value=\"left\">left</option>\r\n                        <option value=\"center\">center</option>\r\n                        <option value=\"right\">right</option>\r\n                    </select>\r\n                    <p>Select font family:</p>\r\n                    <select\r\n                        value={fontFamily}\r\n                        style={{ fontFamily: fontFamily }}\r\n                        onChange={e => setFontFamily(e.target.value)}\r\n                        className=\"border mb-5\"\r\n                    >\r\n                        {googleFontsList.map((val, index) => {\r\n                            return (\r\n                                <option\r\n                                    className=\"bg-white text-black\"\r\n                                    style={{ fontFamily: val }}\r\n                                    key={index}\r\n                                    selected={val === fontFamily}\r\n                                    value={val}\r\n                                >\r\n                                    {val}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                    <p>Text color:</p>\r\n                    <SketchPicker\r\n                        width=\"150px\"\r\n                        color={fontColor}\r\n                        onChange={(color) => setFontColor(color.hex)}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-5\">\r\n                    <textarea\r\n                        className=\"border h-40 w-full\"\r\n                        style={{\r\n                            fontFamily: fontFamily,\r\n                            fontSize: fontSize,\r\n                            fontStyle: fontStyle,\r\n                            textAlign: textAlign as \"center\",\r\n                            color: fontColor\r\n                        }}\r\n                        value={inputValue}\r\n                        onChange={(e) => setInputValue(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                <button\r\n                    onClick={handleSave}\r\n                    type=\"button\"\r\n                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n                    Done\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTextBox\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;A","sourceRoot":""}