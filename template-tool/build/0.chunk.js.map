{"version":3,"file":"0.chunk.js","sources":["webpack:///./src/assets/svgs/plus.svg","webpack:///./src/components/tailwindComponents/CustomTextField.tsx","webpack:///./src/services/categoryService.ts","webpack:///./src/services/templateService.ts","webpack:///./src/utils/svg.ts","webpack:///./src/utils/titleCase.ts","webpack:///./src/utils/useSvg.tsx"],"sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus.cc6d96c4.svg\";","import React, { memo } from 'react'\r\nconst CustomTextField: React.FC<any> = ({\r\n    onClick,\r\n    startIcon,\r\n    endIcon,\r\n    error,\r\n    helperText,\r\n    className,\r\n    label,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-4 relative  \">\r\n                <label className=\"text-jacksonsPurple\">{label}</label>\r\n                <br />\r\n\r\n                <input\r\n                    {...rest}\r\n                    className={className}\r\n                    style={{\r\n                        textIndent: startIcon ? '15px' : ''\r\n                    }}\r\n                />\r\n                {/* //? start icon */}\r\n                <img src={startIcon} alt=\"error\" width=\"18\" className={startIcon ? ' absolute left-0 top-0 mt-9 ml-2' : \"hidden\"} />\r\n\r\n                {/* //? end Icon */}\r\n                <img onClick={onClick} src={endIcon} alt=\"error\" width=\"18\" className={endIcon ? 'absolute right-0 top-0 mt-9 mr-4  cursor-pointer ' : \"hidden\"} />\r\n\r\n                {/* //? Helper Text */}\r\n                <p className={helperText ? 'text-red text-sm pl-2 transition duration-500' : 'hidden'}>{helperText}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CustomTextField)\r\n","const secret_token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjYxMWI5Y2MwZjEwNTJjMzU2YzM1Njk2ZiIsImVtYWlsIjoic3R5Z2lhbmxnZG9uaWNAZ21haWwuY29tIn0sImlhdCI6MTYyOTI4MjA5Nn0.PYOgPEwiLIyHI_22bjWEaPrykb-RzXKup9MRFzKZt_4\"\r\nconst URL_ENDPOINTS = {\r\n    getAllCategoriesURL: \"https://hyper-engage-staging.herokuapp.com/templatecategory\",\r\n    getCategoryByIdURL: \"https://hyper-engage-staging.herokuapp.com/templatecategory\",\r\n    createCategoryURL: \"https://hyper-engage-staging.herokuapp.com/templatecategory\",\r\n    updateCategoryByIdURL: \"https://hyper-engage-staging.herokuapp.com/templatecategory\",\r\n    deleteCategoryByIdURL: \"https://hyper-engage-staging.herokuapp.com/templatecategory\"\r\n}\r\n\r\nexport const category_service = {\r\n    getAllCategories,\r\n    addNewCategory,\r\n    getCategoryByID,\r\n    updateCategoryByID,\r\n    deleteCategoryByID\r\n}\r\n\r\nasync function getAllCategories() {\r\n    const response = await fetch(`${URL_ENDPOINTS.getAllCategoriesURL}?secret_token=${secret_token}`)\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while fetching Categories\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function addNewCategory(categoryData: any) {\r\n    const response = await fetch(`${URL_ENDPOINTS.createCategoryURL}?secret_token=${secret_token}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(categoryData)\r\n    })\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while adding new category\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function getCategoryByID(categoryID: string | undefined) {\r\n    if (!categoryID) return\r\n\r\n    const response = await fetch(`${URL_ENDPOINTS.getAllCategoriesURL}/${categoryID}?secret_token=${secret_token}`)\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while fetching Category\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function updateCategoryByID(categoryID: string, categoryData: any) {\r\n\r\n    console.log({ JSON: JSON.stringify(categoryData), categoryData })\r\n\r\n    const response = await fetch(`${URL_ENDPOINTS.updateCategoryByIdURL}/${categoryID}?secret_token=${secret_token}`, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(categoryData)\r\n    })\r\n    console.log({ response })\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while updating category\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function deleteCategoryByID(categoryID: string) {\r\n    const response = await fetch(`${URL_ENDPOINTS.deleteCategoryByIdURL}/${categoryID}?secret_token=${secret_token}`, {\r\n        method: \"DELETE\",\r\n    })\r\n    console.log({ response })\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while delete category\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\n","const secret_token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjYxMWI5Y2MwZjEwNTJjMzU2YzM1Njk2ZiIsImVtYWlsIjoic3R5Z2lhbmxnZG9uaWNAZ21haWwuY29tIn0sImlhdCI6MTYyOTI4MjA5Nn0.PYOgPEwiLIyHI_22bjWEaPrykb-RzXKup9MRFzKZt_4\"\r\nconst URL_ENDPOINTS = {\r\n    getAllTemplatesURL: \"https://hyper-engage-staging.herokuapp.com/template\",\r\n    getTemplateByIdURL: \"https://hyper-engage-staging.herokuapp.com/template\",\r\n    createTemplateURL: \"https://hyper-engage-staging.herokuapp.com/template\",\r\n    updateTemplateByIdURL: \"https://hyper-engage-staging.herokuapp.com/template\",\r\n    deleteTemplateByIdURL: \"https://hyper-engage-staging.herokuapp.com/template\"\r\n}\r\n\r\nexport const template_service = {\r\n    getAllTemplates,\r\n    addNewTemplate,\r\n    getTemplateByID,\r\n    updateTemplateByID,\r\n    deleteTemplateByID\r\n}\r\n\r\nasync function getAllTemplates() {\r\n    const response = await fetch(`${URL_ENDPOINTS.getAllTemplatesURL}?secret_token=${secret_token}`)\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while fetching Templates\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function addNewTemplate(templateData: any) {\r\n    const response = await fetch(`${URL_ENDPOINTS.createTemplateURL}?secret_token=${secret_token}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(templateData)\r\n    })\r\n    console.log({ response })\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while adding new template\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function getTemplateByID(templateID: string | undefined) {\r\n    if (!templateID) return\r\n\r\n    const response = await fetch(`${URL_ENDPOINTS.getAllTemplatesURL}/${templateID}?secret_token=${secret_token}`)\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while fetching Template\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function updateTemplateByID(templateID: string, templateData: any) {\r\n\r\n    console.log({ JSON: JSON.stringify(templateData), templateData })\r\n\r\n    const response = await fetch(`${URL_ENDPOINTS.updateTemplateByIdURL}/${templateID}?secret_token=${secret_token}`, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(templateData)\r\n    })\r\n    console.log({ response })\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while updating template\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\nasync function deleteTemplateByID(templateID: string) {\r\n    const response = await fetch(`${URL_ENDPOINTS.deleteTemplateByIdURL}/${templateID}?secret_token=${secret_token}`, {\r\n        method: \"DELETE\",\r\n    })\r\n    console.log({ response })\r\n    if (!response.ok) {\r\n        throw new Error(\"Error while delete template\")\r\n    }\r\n    return response.json()\r\n}\r\n\r\n","// parse svg string into DOM\r\nexport function parseSVG(svgString) {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(svgString, \"image/svg+xml\");\r\n    return doc;\r\n}\r\n\r\n// get color of element\r\n// we can also check styles of element and other properties like \"stroke\"\r\nexport function getElementColor(el) {\r\n    return el.getAttribute(\"fill\");\r\n}\r\n\r\n// find all colors used in svg\r\nexport function getColors(svgString) {\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n    const usedColors = [];\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        // if color is defined and uniq we will add it\r\n        if (color && usedColors.indexOf(color) === -1) {\r\n            usedColors.push(color);\r\n        }\r\n    }\r\n    return usedColors;\r\n}\r\n\r\n// convert svg string into base64 data URL\r\nexport function svgToURL(s) {\r\n    const uri = window.btoa(unescape(encodeURIComponent(s)));\r\n    return \"data:image/svg+xml;base64,\" + uri;\r\n}\r\n\r\n// replace colors in svg string\r\nexport function replaceColors(svgString, map) {\r\n    // we can do some RegExp magic here\r\n    // but I will just manually check every element\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        if (map[color]) {\r\n            element.setAttribute(\"fill\", map[color]);\r\n        }\r\n    }\r\n    var xmlSerializer = new XMLSerializer();\r\n    const str = xmlSerializer.serializeToString(doc);\r\n    return str;\r\n}\r\n\r\nexport function getSvgStringFromUpload(files) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            var reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                var svgData: any = e.target.result;\r\n                var parser = new DOMParser();\r\n                var doc = parser.parseFromString(svgData, \"image/svg+xml\");\r\n                resolve(doc.documentElement.outerHTML)\r\n            }\r\n            reader.readAsText(files[0]);\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}","export const titleCase = (uservalue) => {\r\n    if (uservalue) {\r\n\r\n        let value = uservalue?.toLowerCase().split(\"_\")\r\n        for (let i = 0; i < value?.length; i++) {\r\n            value[i] = value[i][0].toUpperCase() + value[i].slice(1)\r\n        }\r\n        return value?.join(\" \")\r\n\r\n    }\r\n    console.log(\"no value to convert to titleCase\")\r\n    return uservalue || \"\"\r\n}","const useSvg = (xmlns, viewBox, fill, stroke, path) => {\r\n\r\n    let svg = `<svg xmlns=\"${xmlns}\" fill=\"${fill}\" viewBox=\"${viewBox}\" stroke=\"${stroke}\">${path}</svg>`\r\n\r\n    let blob = new Blob([svg], { type: 'image/svg+xml' });\r\n    let url = URL.createObjectURL(blob);\r\n\r\n    return url\r\n}\r\n\r\nexport default useSvg\r\n\r\n"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAAA;AASA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;AC5EA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}