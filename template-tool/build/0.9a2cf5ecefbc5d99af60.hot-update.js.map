{"version":3,"file":"0.9a2cf5ecefbc5d99af60.hot-update.js","sources":["webpack:///./src/assets/svgs/chevron-down.svg","webpack:///./src/assets/svgs/plus.svg","webpack:///./src/components/tailwindComponents/CustomSelect.tsx","webpack:///./src/components/tailwindComponents/CustomTextField.tsx","webpack:///./src/components/tailwindComponents/LoadingButton.tsx","webpack:///./src/components/tailwindComponents/SaveTemplate.tsx","webpack:///./src/hooks/useComponentVisible.tsx","webpack:///./src/utils/titleCase.ts","webpack:///./src/utils/useSvg.tsx"],"sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chevron-down.c16040f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.cc6d96c4.svg\";","import React, { memo } from 'react'\r\nimport dropdownIcon from \"../../assets/svgs/chevron-down.svg\"\r\nimport useComponentVisible from '../../hooks/useComponentVisible';\r\nimport { titleCase } from '../../utils/titleCase';\r\n\r\nconst CustomSelect: React.FC<any> = ({ label, value, onChange, dataArray, width, ...res }) => {\r\n\r\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\r\n\r\n    return (\r\n        <>\r\n            <div className={`flex flex-col bg-gray94  w-60 `}>\r\n                <label className='text-base text-left text-grey top-16  '>\r\n                    {label}\r\n                </label>\r\n                <div className=\" w-full relative\" ref={ref}>\r\n                    <button\r\n                        onClick={() => setIsComponentVisible(!isComponentVisible)}\r\n                        className=\"relative bg-white text-left pl-5 w-full border py-2 border-gray95 rounded-md shadow-sm cursor-pointer focus:outline-none text-jacksonsPurple focus:ring-1 focus:ring-radicalRed focus:border-radicalRed text-base\">\r\n                        <h2 className=\"truncate\">\r\n                            {titleCase(value)}\r\n                        </h2>\r\n                        <div className=\"absolute inset-y-0 right-0 pr-2 flex items-center  pointer-events-none\">\r\n                            <img src={dropdownIcon} className='w-4 ' />\r\n                        </div>\r\n                    </button>\r\n\r\n\r\n                    <ul className={isComponentVisible ? \"w-full absolute z-20 mt-1  bg-white shadow-lg  rounded-md py-1 text-base ring-1 ring-black ring-opacity-5  focus:outline-none sm:text-sm\" : \"hidden\"} >\r\n                        {dataArray?.length && dataArray.map((val, ind) => (\r\n                            <li\r\n                                key={ind}\r\n                                className=\"text-mineShaft select-none cursor-pointer relative py-2 pl-3 pr-9 hover:bg-gray94  \"\r\n                                value={val}\r\n                                onClick={() => {\r\n                                    onChange(val)\r\n                                    setIsComponentVisible(false)\r\n                                }}\r\n                            >\r\n                                <div className=\"flex items-center\">\r\n                                    <h2 className=\"text-jacksonsPurple font-normal ml-3 block truncate \">\r\n                                        {titleCase(val)}\r\n                                    </h2>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CustomSelect)\r\n","import React, { memo } from 'react'\r\nconst CustomTextField: React.FC<any> = ({\r\n    onClick,\r\n    startIcon,\r\n    endIcon,\r\n    error,\r\n    helperText,\r\n    className,\r\n    label,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-4 relative  \">\r\n                <label className=\"text-jacksonsPurple\">{label}</label>\r\n                <br />\r\n\r\n                <input\r\n                    {...rest}\r\n                    className={className}\r\n                    style={{\r\n                        textIndent: startIcon ? '15px' : ''\r\n                    }}\r\n                />\r\n                {/* //? start icon */}\r\n                <img src={startIcon} alt=\"error\" width=\"18\" className={startIcon ? ' absolute left-0 top-0 mt-9 ml-2' : \"hidden\"} />\r\n\r\n                {/* //? end Icon */}\r\n                <img onClick={onClick} src={endIcon} alt=\"error\" width=\"18\" className={endIcon ? 'absolute right-0 top-0 mt-9 mr-4  cursor-pointer ' : \"hidden\"} />\r\n\r\n                {/* //? Helper Text */}\r\n                <p className={helperText ? 'text-red text-sm pl-2 transition duration-500' : 'hidden'}>{helperText}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CustomTextField)\r\n","import React, { memo } from 'react';\r\nconst LoadingButton: React.FC<any> = ({\r\n    isLoading, loadingProps, startIcon, endIcon, className, style, children, ...rest\r\n}) => {\r\n    return (\r\n        <>\r\n            <button\r\n                className={className ? className : 'w-full  justify-center place-items-center flex focus:outline-none relative '}\r\n                style={{\r\n                    paddingLeft: startIcon ? '30px' : ''\r\n                }}\r\n                {...rest}>\r\n                {\r\n                    isLoading ?\r\n                        <svg className='animate-spin w-6 ' xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"white\" {...loadingProps} >\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                        :\r\n                        children\r\n                }\r\n            </button>\r\n\r\n            <img src={startIcon} alt=\"error\" width=\"20\" className={startIcon ? 'absolute    ml-2 ' : \"hidden\"} />\r\n\r\n            <img src={endIcon} alt=\"error\" width=\"20\" className={endIcon ? 'absolute right-0 top-0 mt-3.5 mr-4  cursor-pointer ' : \"hidden\"} />\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(LoadingButton)\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport plus from \"../../assets/svgs/plus.svg\";\r\nimport CustomTextField from \"./CustomTextField\";\r\nimport LoadingButton from \"./LoadingButton\";\r\nimport useSvg from \"../../utils/useSvg\";\r\nimport CustomSelect from \"./CustomSelect\";\r\nimport useCategoryList from \"../../hooks/useCategoryList\";\r\n\r\nconst svgPath = `  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />`;\r\n\r\ninterface Props {\r\n    templateData: any\r\n    handleSaveTemplate: (tags: string[], selectedCategory: string) => void\r\n}\r\n\r\nconst SaveTemplate: React.FC<Props> = ({ templateData, handleSaveTemplate }) => {\r\n    const [tagsList, setTagsList] = useState([]);\r\n    const [isFirstTag, setIsFirstTag] = useState(true);\r\n    const [tag, setTag] = useState(\"\");\r\n    const { categoriesList, error, isLoading } = useCategoryList()\r\n    const [selectedCategory, setSelectedCategory] = useState(!!categoriesList[0] ? categoriesList[0] : null)\r\n\r\n    useEffect(() => {\r\n        if (!!templateData.tags?.length) {\r\n            setTagsList(templateData.tags)\r\n        }\r\n    }, [])\r\n\r\n    const closeIcon = useSvg(\r\n        \"http://www.w3.org/2000/svg\",\r\n        \"0 0 24 24\",\r\n        \"white\",\r\n        \"#FF3C69\",\r\n        svgPath\r\n    );\r\n\r\n    const pushTagToTagsList = (tagName) => {\r\n        if (!tagName) {\r\n            return;\r\n        }\r\n        let checkExisting = tagsList.filter((currentTag) => currentTag == tagName);\r\n        if (checkExisting.length && !isFirstTag) {\r\n            swal({\r\n                title: \"Tag already added\",\r\n                icon: \"error\",\r\n            });\r\n        } else {\r\n            setTagsList([...tagsList, tagName]);\r\n            setIsFirstTag(false);\r\n        }\r\n    };\r\n    const removeFromTagsList = (index) => {\r\n        let newTagsList = [...tagsList];\r\n        newTagsList.splice(index, 1);\r\n        setTagsList(newTagsList);\r\n    };\r\n\r\n    const handleChangeTag = (e) => {\r\n        setTag(e.target.value);\r\n    };\r\n\r\n    const handlePushTag = () => {\r\n        pushTagToTagsList(tag);\r\n        setTag(\"\");\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            pushTagToTagsList(tag);\r\n            setTag(\"\");\r\n        }\r\n    };\r\n\r\n    const onCategoryChange = (val) => {\r\n        setSelectedCategory(val)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        handleSaveTemplate(tagsList, selectedCategory.id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n                <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n                    <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                        <div className=\"h-96\">\r\n                            <div>\r\n                                <CustomTextField\r\n                                    label=\"Enter Tag\"\r\n                                    id=\"tagName\"\r\n                                    name=\"tagName\"\r\n                                    value={tag}\r\n                                    onChange={handleChangeTag}\r\n                                    placeholder=\"Enter tag\"\r\n                                    onKeyDown={handleKeyDown}\r\n                                    onClick={handlePushTag}\r\n                                    endIcon={plus}\r\n                                    className=\"relative  border border-grey appearance-none rounded w-full p-2 mt-0 focus:outline-none cursor-text\"\r\n                                />\r\n                                <div className=\"flex flex-grow flex-wrap flex-col\">\r\n                                    {tagsList.map((item, index) => (\r\n                                        <div key={index} className=\"flex justify-between rounded-3xl px-5 py-1 border-radicalRed border-2 mt-1 text-radicalRed \">\r\n                                            <p>{item}</p>\r\n                                            <img\r\n                                                onClick={() => removeFromTagsList(index)}\r\n                                                src={closeIcon}\r\n                                                alt=\"error\"\r\n                                                className=\"w-4  cursor-pointer \"\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n\r\n                                <div className=\"z-20\" >\r\n                                    <CustomSelect\r\n                                        label=\"Select Category\"\r\n                                        value={selectedCategory}\r\n                                        onChange={onCategoryChange}\r\n                                        dataArray={categoriesList}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 px-4 py-3 sm:px-6 flex justify-between\">\r\n                        <div className=\"mt-2\">\r\n                            <LoadingButton\r\n                                loadingProps={{\r\n                                    size: 24,\r\n                                    style: { color: \"white\" },\r\n                                }}\r\n                                disableElevation\r\n                                onClick={onSubmit}\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className=\"red-button\"\r\n                            >\r\n                                Close\r\n                            </LoadingButton>\r\n                        </div>\r\n                        <div className=\"mt-2\">\r\n                            <LoadingButton\r\n                                loadingProps={{\r\n                                    size: 24,\r\n                                    style: { color: \"white\" },\r\n                                }}\r\n                                disableElevation\r\n                                onClick={onSubmit}\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className=\"red-button\"\r\n                            >\r\n                                Save Template\r\n                            </LoadingButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default SaveTemplate;\r\n","import { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function useComponentVisible(initialIsVisible) {\r\n    const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);\r\n    const ref = useRef(null);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            setIsComponentVisible(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    return { ref, isComponentVisible, setIsComponentVisible };\r\n}","export const titleCase = (uservalue) => {\r\n    if (uservalue) {\r\n\r\n        let value = uservalue?.toLowerCase().split(\"_\")\r\n        for (let i = 0; i < value?.length; i++) {\r\n            value[i] = value[i][0].toUpperCase() + value[i].slice(1)\r\n        }\r\n        return value?.join(\" \")\r\n\r\n    }\r\n    console.log(\"no value to convert to titleCase\")\r\n    return uservalue || \"\"\r\n}","const useSvg = (xmlns, viewBox, fill, stroke, path) => {\r\n\r\n    let svg = `<svg xmlns=\"${xmlns}\" fill=\"${fill}\" viewBox=\"${viewBox}\" stroke=\"${stroke}\">${path}</svg>`\r\n\r\n    let blob = new Blob([svg], { type: 'image/svg+xml' });\r\n    let url = URL.createObjectURL(blob);\r\n\r\n    return url\r\n}\r\n\r\nexport default useSvg\r\n\r\n"],"mappings":"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","sourceRoot":""}