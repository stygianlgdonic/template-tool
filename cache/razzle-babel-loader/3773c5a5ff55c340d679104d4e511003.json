{"ast":null,"code":"import _extends from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\DesignTool.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport { stageDimensions, rectangle, ORIGINAL_SVG } from \"../utils/defaults\";\nimport * as svg from \"../utils/svg\";\nimport { SketchPicker } from 'react-color';\nimport Rectangle from \"./Rectangle\";\nimport UImage from \"./UImage\";\nimport TransformerComponent from \"./UTransformer\";\nimport useImage from 'use-image';\nimport useTemplateData from '../hooks/useTemplateData';\n\nvar DesignTool = function DesignTool() {\n  var _templateData$rectang, _templateData$rectang2;\n\n  var colors = svg.getColors(ORIGINAL_SVG);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      colorMap = _React$useState2[0],\n      setColorMap = _React$useState2[1];\n\n  var modifiedSVG = svg.replaceColors(ORIGINAL_SVG, colorMap);\n\n  var _useImage = useImage(svg.svgToURL(modifiedSVG)),\n      _useImage2 = _slicedToArray(_useImage, 1),\n      image = _useImage2[0];\n\n  var _useState = useState({\n    id: \"svg\",\n    name: \"svg\",\n    type: \"svg\",\n    x: 10,\n    y: 10,\n    draggable: true\n  }),\n      imageAttrs = _useState[0],\n      setImageAttrs = _useState[1];\n\n  var _useState2 = useState(false),\n      showSvgColorPicker = _useState2[0],\n      setShowSvgColorPicker = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentSelectedSvgColor = _useState3[0],\n      setCurrentSelectedSvgColor = _useState3[1];\n\n  var _useTemplateData = useTemplateData(),\n      templateData = _useTemplateData.templateData,\n      setTemplateData = _useTemplateData.setTemplateData;\n\n  var _useState4 = useState(null),\n      selectedId = _useState4[0],\n      selectShape = _useState4[1];\n\n  useEffect(function () {\n    document.addEventListener(\"keydown\", function (e) {\n      return e.key === \"Escape\" && selectShape(null);\n    }, false);\n    return function () {\n      document.removeEventListener(\"keydown\", function (e) {\n        return e.key === \"Escape\" && selectShape(null);\n      }, false);\n    };\n  }, []);\n\n  var checkDeselect = function checkDeselect(e) {\n    // deselect when clicked on empty area\n    var clickedOnEmpty = e.target === e.target.getStage();\n\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  var handleColorChange = function handleColorChange(color) {\n    setTemplateData(function (prev) {\n      var _prev$rectangles;\n\n      var index = (_prev$rectangles = prev.rectangles) === null || _prev$rectangles === void 0 ? void 0 : _prev$rectangles.findIndex(function (rect) {\n        return rect.id === selectedId;\n      });\n      prev.rectangles[index].fill = color.hex;\n    });\n  };\n\n  var handleAddNewRect = function handleAddNewRect() {\n    setTemplateData(function (prev) {\n      prev.rectangles.push(rectangle);\n    });\n  };\n\n  var handleSvgCurrentColor = function handleSvgCurrentColor(color) {\n    setCurrentSelectedSvgColor(color);\n    setShowSvgColorPicker(true);\n  };\n\n  var setNewColor = function setNewColor(oldColor, newColor) {\n    setColorMap(_objectSpread(_objectSpread({}, colorMap), {}, _defineProperty({}, oldColor, newColor)));\n  };\n\n  var rectangles = templateData.rectangles;\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '100px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundColor: 'coral'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    onClick: handleAddNewRect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Add new rect\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Stage, _extends({}, stageDimensions, {\n    onMouseDown: checkDeselect,\n    onTouchStart: checkDeselect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }), __jsx(Layer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, rectangles === null || rectangles === void 0 ? void 0 : rectangles.map(function (rect, i) {\n    return __jsx(Rectangle, {\n      key: i,\n      shapeProps: rect,\n      onSelect: function onSelect() {\n        selectShape(rect.id);\n      },\n      onChange: function onChange(newAttrs) {\n        setTemplateData(function (prev) {\n          var index = prev.rectangles.findIndex(function (item) {\n            return item.id === rect.id;\n          });\n          prev.rectangles[index] = newAttrs;\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    });\n  }), __jsx(UImage, {\n    image: image,\n    imageProps: imageAttrs,\n    onSelect: function onSelect(id) {\n      return selectShape(id);\n    },\n    onChange: function onChange(event) {\n      return setImageAttrs(_objectSpread(_objectSpread({}, imageAttrs), {}, {\n        x: event.target.attrs.x,\n        y: event.target.attrs.y\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }), __jsx(TransformerComponent, {\n    id: \"tr\".concat(selectedId),\n    selectedShapeName: selectedId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      display: !!selectedId && selectedId !== \"svg\" ? '' : 'none',\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), __jsx(SketchPicker, {\n    color: (_templateData$rectang = templateData.rectangles) === null || _templateData$rectang === void 0 ? void 0 : (_templateData$rectang2 = _templateData$rectang.find(function (rect) {\n      return rect.id === selectedId;\n    })) === null || _templateData$rectang2 === void 0 ? void 0 : _templateData$rectang2.fill,\n    onChange: handleColorChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    style: {\n      display: !!selectedId && selectedId === \"svg\" ? '' : 'none',\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), colors.map(function (item, index) {\n    return __jsx(\"div\", {\n      key: index,\n      style: {\n        display: 'inline-block',\n        width: '30px',\n        height: '30px',\n        backgroundColor: item,\n        margin: '5px'\n      },\n      onClick: function onClick() {\n        return handleSvgCurrentColor(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    });\n  }), __jsx(\"div\", {\n    style: {\n      display: currentSelectedSvgColor ? \"\" : \"none\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, console.log({\n    currentSelectedSvgColor: currentSelectedSvgColor\n  }), currentSelectedSvgColor && __jsx(SketchPicker, {\n    color: currentSelectedSvgColor,\n    onChange: function onChange(color) {\n      return setNewColor(currentSelectedSvgColor, color);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 49\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default DesignTool;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/DesignTool.tsx"],"names":["React","useEffect","useState","Stage","Layer","stageDimensions","rectangle","ORIGINAL_SVG","svg","SketchPicker","Rectangle","UImage","TransformerComponent","useImage","useTemplateData","DesignTool","colors","getColors","colorMap","setColorMap","modifiedSVG","replaceColors","svgToURL","image","id","name","type","x","y","draggable","imageAttrs","setImageAttrs","showSvgColorPicker","setShowSvgColorPicker","currentSelectedSvgColor","setCurrentSelectedSvgColor","templateData","setTemplateData","selectedId","selectShape","document","addEventListener","e","key","removeEventListener","checkDeselect","clickedOnEmpty","target","getStage","handleColorChange","color","prev","index","rectangles","findIndex","rect","fill","hex","handleAddNewRect","push","handleSvgCurrentColor","setNewColor","oldColor","newColor","display","justifyContent","marginTop","backgroundColor","map","i","newAttrs","item","event","attrs","padding","find","width","height","margin","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport { stageDimensions, rectangle, ORIGINAL_SVG } from \"../utils/defaults\"\r\nimport * as svg from \"../utils/svg\"\r\nimport { SketchPicker } from 'react-color'\r\nimport Rectangle from \"./Rectangle\"\r\nimport UImage from \"./UImage\"\r\nimport TransformerComponent from \"./UTransformer\"\r\nimport useImage from 'use-image';\r\nimport useTemplateData from '../hooks/useTemplateData';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const colors = svg.getColors(ORIGINAL_SVG);\r\n    const [colorMap, setColorMap] = React.useState({});\r\n    const modifiedSVG = svg.replaceColors(ORIGINAL_SVG, colorMap);\r\n    const [image] = useImage(svg.svgToURL(modifiedSVG));\r\n    const [imageAttrs, setImageAttrs] = useState({\r\n        id: \"svg\",\r\n        name: \"svg\",\r\n        type: \"svg\",\r\n        x: 10,\r\n        y: 10,\r\n        draggable: true\r\n    })\r\n\r\n    const [showSvgColorPicker, setShowSvgColorPicker] = useState<boolean>(false)\r\n    const [currentSelectedSvgColor, setCurrentSelectedSvgColor] = useState<string | null>(null)\r\n\r\n    const { templateData, setTemplateData } = useTemplateData()\r\n    const [selectedId, selectShape] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        };\r\n    }, []);\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage()\r\n        if (clickedOnEmpty) {\r\n            selectShape(null)\r\n        }\r\n    };\r\n\r\n    const handleColorChange = (color) => {\r\n        setTemplateData((prev) => {\r\n            const index = prev.rectangles?.findIndex(rect => rect.id === selectedId)\r\n            prev.rectangles[index].fill = color.hex\r\n        })\r\n    }\r\n\r\n    const handleAddNewRect = () => {\r\n        setTemplateData((prev) => {\r\n            prev.rectangles.push(rectangle)\r\n        })\r\n    }\r\n\r\n    const handleSvgCurrentColor = (color: string) => {\r\n        setCurrentSelectedSvgColor(color)\r\n        setShowSvgColorPicker(true)\r\n    }\r\n\r\n    const setNewColor = (oldColor, newColor) => {\r\n        setColorMap({\r\n            ...colorMap,\r\n            [oldColor]: newColor\r\n        });\r\n    };\r\n\r\n    const { rectangles } = templateData\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\r\n            <div style={{ backgroundColor: 'coral' }}>\r\n                <button onClick={handleAddNewRect}>Add new rect</button>\r\n            </div>\r\n            <div>\r\n                <Stage\r\n                    {...stageDimensions}\r\n                    onMouseDown={checkDeselect}\r\n                    onTouchStart={checkDeselect}\r\n                >\r\n                    <Layer>\r\n                        {rectangles?.map((rect, i) => {\r\n                            return (\r\n                                <Rectangle\r\n                                    key={i}\r\n                                    shapeProps={rect}\r\n                                    onSelect={() => {\r\n                                        selectShape(rect.id)\r\n                                    }}\r\n                                    onChange={(newAttrs) => {\r\n                                        setTemplateData((prev) => {\r\n                                            const index = prev.rectangles.findIndex(item => item.id === rect.id)\r\n                                            prev.rectangles[index] = newAttrs\r\n                                        });\r\n                                    }}\r\n                                />\r\n                            );\r\n                        })}\r\n                        <UImage\r\n                            image={image}\r\n                            imageProps={imageAttrs}\r\n                            onSelect={(id) => selectShape(id)}\r\n                            onChange={(event) => setImageAttrs({ ...imageAttrs, x: event.target.attrs.x, y: event.target.attrs.y })}\r\n                        />\r\n                        <TransformerComponent\r\n                            id={`tr${selectedId}`}\r\n                            selectedShapeName={selectedId}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            <div style={{ display: !!selectedId && selectedId !== \"svg\" ? '' : 'none', backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                <SketchPicker\r\n                    color={templateData.rectangles?.find(rect => rect.id === selectedId)?.fill}\r\n                    onChange={handleColorChange}\r\n                />\r\n            </div>\r\n            <div style={{ display: !!selectedId && selectedId === \"svg\" ? '' : 'none', backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                {colors.map((item, index) => (\r\n                    <div\r\n                        key={index}\r\n                        style={{ display: 'inline-block', width: '30px', height: '30px', backgroundColor: item, margin: '5px' }}\r\n                        onClick={() => handleSvgCurrentColor(item)}\r\n                    >\r\n                    </div>\r\n                ))}\r\n                <div style={{ display: currentSelectedSvgColor ? \"\" : \"none\" }}>\r\n                    {console.log({ currentSelectedSvgColor })}\r\n                    {currentSelectedSvgColor && <SketchPicker\r\n                        color={currentSelectedSvgColor}\r\n                        onChange={(color) => setNewColor(currentSelectedSvgColor, color)}\r\n                    />}\r\n                    <br />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DesignTool\r\n"]},"metadata":{},"sourceType":"module"}