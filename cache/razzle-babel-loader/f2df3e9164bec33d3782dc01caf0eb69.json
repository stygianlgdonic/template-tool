{"ast":null,"code":"import _extends from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\DesignTool.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport { stageDimensions, rectangle } from \"../utils/defaults\";\nimport * as svg from \"../utils/svg\";\nimport { SketchPicker } from 'react-color';\nimport Rectangle from \"./Rectangle\"; // import UImage from \"./UImage\"\n\nimport USvg from \"./USvg\";\nimport TransformerComponent from \"./UTransformer\"; // import useTemplateData from '../hooks/useTemplateData';\n\nimport { TemplateContext } from '../contexts/TemplateContext';\n\nvar DesignTool = function DesignTool() {\n  var _templateData$rectang, _templateData$rectang2;\n\n  var _useState = useState(null),\n      currentSelectedShape = _useState[0],\n      setCurrentSelectedShape = _useState[1];\n\n  var _useState2 = useState(null),\n      svgString = _useState2[0],\n      setSvgString = _useState2[1]; // const colors = svg.getColors(svgString);\n  // const [colorMap, setColorMap] = React.useState({});\n  // const modifiedSVG = svg.replaceColors(svgString, colorMap);\n  // const [image] = useImage(svg.svgToURL(modifiedSVG));\n  // const [imageAttrs, setImageAttrs] = useState({\n  //     id: \"svg\",\n  //     name: \"svg\",\n  //     type: \"svg\",\n  //     x: 10,\n  //     y: 10,\n  //     draggable: true\n  // })\n\n\n  var _useState3 = useState(null),\n      currentSelectedSvgColor = _useState3[0],\n      setCurrentSelectedSvgColor = _useState3[1];\n\n  var _useContext = useContext(TemplateContext),\n      templateData = _useContext[0],\n      setTemplateData = _useContext[1];\n\n  var _useState4 = useState(null),\n      selectedId = _useState4[0],\n      selectShape = _useState4[1];\n\n  useEffect(function () {\n    document.addEventListener(\"keydown\", function (e) {\n      return e.key === \"Escape\" && selectShape(null);\n    }, false);\n    return function () {\n      document.removeEventListener(\"keydown\", function (e) {\n        return e.key === \"Escape\" && selectShape(null);\n      }, false);\n    };\n  }, []);\n\n  var checkDeselect = function checkDeselect(e) {\n    // deselect when clicked on empty area\n    var clickedOnEmpty = e.target === e.target.getStage();\n\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  var handleColorChange = function handleColorChange(color) {\n    setTemplateData(function (prev) {\n      var _prev$rectangles;\n\n      var index = (_prev$rectangles = prev.rectangles) === null || _prev$rectangles === void 0 ? void 0 : _prev$rectangles.findIndex(function (rect) {\n        return rect.id === selectedId;\n      });\n      prev.rectangles[index].fill = color.hex;\n    });\n  };\n\n  var handleAddNewRect = function handleAddNewRect() {\n    setTemplateData(function (prev) {\n      // ANCHOR - get the dynamic id thing done\n      var imageId = new Date().getTime();\n      prev.rectangles.push(_objectSpread(_objectSpread({}, rectangle), {}, {\n        id: \"rect_\".concat(imageId.toString())\n      }));\n    });\n  };\n\n  var handleSvgCurrentColor = function handleSvgCurrentColor(color) {\n    setCurrentSelectedSvgColor(color);\n  }; // const setNewColor = (oldColor, newColor) => {\n  //     setColorMap({\n  //         ...colorMap,\n  //         [oldColor]: newColor\n  //     });\n  // };\n\n\n  var handleSvgUpload = function handleSvgUpload(e) {\n    svg.getSvgStringFromUpload(e.target.files).then(function (SVG_STRING) {// setTemplateData((prev) => {\n      //     prev.svgs.push({\n      //     })\n      // })\n    });\n  };\n\n  var rectangles = templateData.rectangles;\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '100px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundColor: 'coral'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    onClick: handleAddNewRect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Add new rect\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"upload svg\"), __jsx(\"input\", {\n    type: \"file\",\n    accept: \".svg\",\n    onChange: handleSvgUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Stage, _extends({}, stageDimensions, {\n    onMouseDown: checkDeselect,\n    onTouchStart: checkDeselect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), __jsx(Layer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, rectangles === null || rectangles === void 0 ? void 0 : rectangles.map(function (rect, i) {\n    return __jsx(Rectangle, {\n      key: i,\n      shapeProps: rect,\n      onSelect: function onSelect() {\n        selectShape(rect.id);\n      },\n      onChange: function onChange(newAttrs) {\n        setTemplateData(function (prev) {\n          var index = prev.rectangles.findIndex(function (item) {\n            return item.id === rect.id;\n          });\n          prev.rectangles[index] = newAttrs;\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    });\n  }), templateData.svgs.map(function (item, index) {\n    return __jsx(USvg, {\n      key: index,\n      svgProps: item,\n      image: image,\n      onSelect: function onSelect(id) {\n        selectShape(id);\n        setCurrentSelectedShape(item);\n      },\n      onChange: function onChange(event) {\n        return setTemplateData(function (prev) {\n          prev.svgs[index].x = event.target.attrs.x;\n          prev.svgs[index].y = event.target.attrs.y;\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    });\n  }), __jsx(TransformerComponent, {\n    id: \"tr\".concat(selectedId),\n    selectedShapeName: selectedId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      display: !!selectedId ? \"\" : \"none\",\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), __jsx(\"div\", {\n    style: {\n      display: (selectedId === null || selectedId === void 0 ? void 0 : selectedId.split('_')[0]) === \"rect\" ? '' : 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, \"Select from palette\"), templateData.palette.map(function (item, index) {\n    return __jsx(\"div\", {\n      key: index,\n      style: {\n        display: 'inline-block'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }, item.name, \" : \", __jsx(\"div\", {\n      style: {\n        display: 'inline-block',\n        backgroundColor: item.color,\n        width: '30px',\n        height: '30px'\n      },\n      onClick: function onClick() {\n        return handleColorChange({\n          hex: item.color\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 43\n      }\n    }));\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, \"or Select a custom color\"), __jsx(SketchPicker, {\n    color: (_templateData$rectang = templateData.rectangles) === null || _templateData$rectang === void 0 ? void 0 : (_templateData$rectang2 = _templateData$rectang.find(function (rect) {\n      return rect.id === selectedId;\n    })) === null || _templateData$rectang2 === void 0 ? void 0 : _templateData$rectang2.fill,\n    onChange: handleColorChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  })), console.log({\n    selectedId: selectedId\n  }), __jsx(\"div\", {\n    style: {\n      display: (selectedId === null || selectedId === void 0 ? void 0 : selectedId.split('_')[0]) === \"svg\" ? '' : 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Select a color you want to change...\"), colors.map(function (item, index) {\n    return __jsx(\"div\", {\n      key: index,\n      style: {\n        display: 'inline-block',\n        width: '30px',\n        height: '30px',\n        backgroundColor: colorMap[item] || item,\n        margin: '5px'\n      },\n      onClick: function onClick() {\n        return handleSvgCurrentColor(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    });\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, currentSelectedSvgColor && __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 33\n    }\n  }, \"Select from palette\"), templateData.palette.map(function (item, index) {\n    return __jsx(\"div\", {\n      key: index,\n      style: {\n        display: 'inline-block'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 37\n      }\n    }, item.name, \" : \", __jsx(\"div\", {\n      style: {\n        display: 'inline-block',\n        backgroundColor: item.color,\n        width: '30px',\n        height: '30px'\n      },\n      onClick: function onClick() {\n        return setNewColor(currentSelectedSvgColor, item.color);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 55\n      }\n    }));\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 33\n    }\n  }, \"or Select a custom color\"), __jsx(SketchPicker, {\n    color: colorMap[currentSelectedSvgColor],\n    onChange: function onChange(color) {\n      return setNewColor(currentSelectedSvgColor, color.hex);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 33\n    }\n  }))))));\n};\n\nexport default DesignTool;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/DesignTool.tsx"],"names":["React","useContext","useEffect","useState","Stage","Layer","stageDimensions","rectangle","svg","SketchPicker","Rectangle","USvg","TransformerComponent","TemplateContext","DesignTool","currentSelectedShape","setCurrentSelectedShape","svgString","setSvgString","currentSelectedSvgColor","setCurrentSelectedSvgColor","templateData","setTemplateData","selectedId","selectShape","document","addEventListener","e","key","removeEventListener","checkDeselect","clickedOnEmpty","target","getStage","handleColorChange","color","prev","index","rectangles","findIndex","rect","id","fill","hex","handleAddNewRect","imageId","Date","getTime","push","toString","handleSvgCurrentColor","handleSvgUpload","getSvgStringFromUpload","files","then","SVG_STRING","display","justifyContent","marginTop","backgroundColor","map","i","newAttrs","item","svgs","image","event","x","attrs","y","padding","split","palette","name","width","height","find","console","log","colors","colorMap","margin","setNewColor"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport { stageDimensions, rectangle } from \"../utils/defaults\"\r\nimport * as svg from \"../utils/svg\"\r\nimport { SketchPicker } from 'react-color'\r\nimport Rectangle from \"./Rectangle\"\r\n// import UImage from \"./UImage\"\r\nimport USvg from \"./USvg\"\r\nimport TransformerComponent from \"./UTransformer\"\r\n// import useTemplateData from '../hooks/useTemplateData';\r\nimport { TemplateContext } from '../contexts/TemplateContext';\r\nimport useImage from 'use-image';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const [currentSelectedShape, setCurrentSelectedShape] = useState(null)\r\n\r\n    const [svgString, setSvgString] = useState(null)\r\n    // const colors = svg.getColors(svgString);\r\n    // const [colorMap, setColorMap] = React.useState({});\r\n    // const modifiedSVG = svg.replaceColors(svgString, colorMap);\r\n    // const [image] = useImage(svg.svgToURL(modifiedSVG));\r\n    // const [imageAttrs, setImageAttrs] = useState({\r\n    //     id: \"svg\",\r\n    //     name: \"svg\",\r\n    //     type: \"svg\",\r\n    //     x: 10,\r\n    //     y: 10,\r\n    //     draggable: true\r\n    // })\r\n\r\n    const [currentSelectedSvgColor, setCurrentSelectedSvgColor] = useState<string | null>(null)\r\n\r\n    const [templateData, setTemplateData] = useContext(TemplateContext)\r\n    const [selectedId, selectShape] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        };\r\n    }, []);\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage()\r\n        if (clickedOnEmpty) {\r\n            selectShape(null)\r\n        }\r\n    };\r\n\r\n    const handleColorChange = (color) => {\r\n        setTemplateData((prev) => {\r\n            const index = prev.rectangles?.findIndex(rect => rect.id === selectedId)\r\n            prev.rectangles[index].fill = color.hex\r\n        })\r\n    }\r\n\r\n    const handleAddNewRect = () => {\r\n        setTemplateData((prev) => {\r\n            // ANCHOR - get the dynamic id thing done\r\n            let imageId = new Date().getTime();\r\n            prev.rectangles.push({ ...rectangle, id: `rect_${imageId.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleSvgCurrentColor = (color: string) => {\r\n        setCurrentSelectedSvgColor(color)\r\n    }\r\n\r\n    // const setNewColor = (oldColor, newColor) => {\r\n    //     setColorMap({\r\n    //         ...colorMap,\r\n    //         [oldColor]: newColor\r\n    //     });\r\n    // };\r\n\r\n    const handleSvgUpload = (e) => {\r\n        svg.getSvgStringFromUpload(e.target.files).then((SVG_STRING) => {\r\n\r\n            // setTemplateData((prev) => {\r\n            //     prev.svgs.push({\r\n\r\n            //     })\r\n            // })\r\n        })\r\n    }\r\n\r\n    const { rectangles } = templateData\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\r\n            <div style={{ backgroundColor: 'coral' }}>\r\n                <button onClick={handleAddNewRect}>Add new rect</button>\r\n                <br />\r\n                <p>upload svg</p>\r\n                <input type=\"file\" accept=\".svg\" onChange={handleSvgUpload} />\r\n            </div>\r\n            <div>\r\n                <Stage\r\n                    {...stageDimensions}\r\n                    onMouseDown={checkDeselect}\r\n                    onTouchStart={checkDeselect}\r\n                >\r\n                    <Layer>\r\n                        {rectangles?.map((rect, i) => {\r\n                            return (\r\n                                <Rectangle\r\n                                    key={i}\r\n                                    shapeProps={rect}\r\n                                    onSelect={() => {\r\n                                        selectShape(rect.id)\r\n                                    }}\r\n                                    onChange={(newAttrs) => {\r\n                                        setTemplateData((prev) => {\r\n                                            const index = prev.rectangles.findIndex(item => item.id === rect.id)\r\n                                            prev.rectangles[index] = newAttrs\r\n                                        });\r\n                                    }}\r\n                                />\r\n                            );\r\n                        })}\r\n                        {templateData.svgs.map((item, index) => (\r\n                            <USvg\r\n                                key={index}\r\n                                svgProps={item}\r\n                                image={image}\r\n                                onSelect={(id) => {\r\n                                    selectShape(id)\r\n                                    setCurrentSelectedShape(item)\r\n                                }}\r\n                                onChange={(event) => setTemplateData((prev) => {\r\n                                    prev.svgs[index].x = event.target.attrs.x\r\n                                    prev.svgs[index].y = event.target.attrs.y\r\n                                })}\r\n                            />\r\n                        ))}\r\n                        <TransformerComponent\r\n                            id={`tr${selectedId}`}\r\n                            selectedShapeName={selectedId}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            <div style={{ display: !!selectedId ? \"\" : \"none\", backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                <div style={{ display: selectedId?.split('_')[0] === \"rect\" ? '' : 'none' }}>\r\n                    <p>Select from palette</p>\r\n                    {templateData.palette.map((item, index) => (\r\n                        <div key={index} style={{ display: 'inline-block' }} >\r\n                            {item.name} : <div\r\n                                style={{ display: 'inline-block', backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                                onClick={() => handleColorChange({ hex: item.color })}\r\n                            ></div>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <p>or Select a custom color</p>\r\n\r\n                    <SketchPicker\r\n                        color={templateData.rectangles?.find(rect => rect.id === selectedId)?.fill}\r\n                        onChange={handleColorChange}\r\n                    />\r\n                </div>\r\n                {console.log({ selectedId })}\r\n                <div style={{ display: selectedId?.split('_')[0] === \"svg\" ? '' : 'none' }}>\r\n                    <p>Select a color you want to change...</p>\r\n                    {colors.map((item, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{ display: 'inline-block', width: '30px', height: '30px', backgroundColor: colorMap[item] || item, margin: '5px' }}\r\n                            onClick={() => handleSvgCurrentColor(item)}\r\n                        >\r\n                        </div>\r\n                    ))}\r\n                    <div>\r\n                        {currentSelectedSvgColor && (\r\n                            <>\r\n                                <p>Select from palette</p>\r\n                                {templateData.palette.map((item, index) => (\r\n                                    <div key={index} style={{ display: 'inline-block' }} >\r\n                                        {item.name} : <div\r\n                                            style={{ display: 'inline-block', backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                                            onClick={() => setNewColor(currentSelectedSvgColor, item.color)}\r\n                                        ></div>\r\n                                    </div>\r\n                                ))}\r\n\r\n                                <p>or Select a custom color</p>\r\n\r\n                                <SketchPicker\r\n                                    color={colorMap[currentSelectedSvgColor]}\r\n                                    onChange={(color) => setNewColor(currentSelectedSvgColor, color.hex)}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DesignTool\r\n"]},"metadata":{},"sourceType":"module"}