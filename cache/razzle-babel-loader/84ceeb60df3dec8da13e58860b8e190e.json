{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n// parse svg string into DOM\nexport function parseSVG(svgString) {\n  var parser = new DOMParser();\n  var doc = parser.parseFromString(svgString, \"image/svg+xml\");\n  return doc;\n} // get color of element\n// we can also check styles of element and other properties like \"stroke\"\n\nexport function getElementColor(el) {\n  return el.getAttribute(\"fill\");\n} // find all colors used in svg\n\nexport function getColors(svgString) {\n  var doc = parseSVG(svgString);\n  var elements = doc.getElementsByTagName(\"*\");\n  var usedColors = [];\n\n  var _iterator = _createForOfIteratorHelper(elements),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var element = _step.value;\n      var color = getElementColor(element); // if color is defined and uniq we will add it\n\n      if (color && usedColors.indexOf(color) === -1) {\n        usedColors.push(color);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return usedColors;\n} // convert svg string into base64 data URL\n\nexport function svgToURL(s) {\n  var uri = window.btoa(unescape(encodeURIComponent(s)));\n  return \"data:image/svg+xml;base64,\" + uri;\n} // replace colors in svg string\n\nexport function replaceColors(svgString, map) {\n  // we can do some RegExp magic here\n  // but I will just manually check every element\n  var doc = parseSVG(svgString);\n  var elements = doc.getElementsByTagName(\"*\");\n\n  var _iterator2 = _createForOfIteratorHelper(elements),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var element = _step2.value;\n      var color = getElementColor(element);\n\n      if (map[color]) {\n        element.setAttribute(\"fill\", map[color]);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var xmlSerializer = new XMLSerializer();\n  var str = xmlSerializer.serializeToString(doc);\n  return str;\n}\nexport function handleFiles(files) {\n  var reader = new FileReader();\n\n  reader.onload = function (e) {\n    var svgData = e.target.result;\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(svgData, \"image/svg+xml\");\n    console.log({\n      doc: doc\n    }); // var pathTags = doc.getElementsByTagName(\"path\");\n    //Do whatever you want with pathTags\n  };\n\n  reader.readAsText(files[0]);\n}","map":{"version":3,"sources":["D:/dev/template-tool/src/utils/svg.ts"],"names":["parseSVG","svgString","parser","DOMParser","doc","parseFromString","getElementColor","el","getAttribute","getColors","elements","getElementsByTagName","usedColors","element","color","indexOf","push","svgToURL","s","uri","window","btoa","unescape","encodeURIComponent","replaceColors","map","setAttribute","xmlSerializer","XMLSerializer","str","serializeToString","handleFiles","files","reader","FileReader","onload","e","svgData","target","result","console","log","readAsText"],"mappings":";AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,SAAlB,EAA6B;AAChC,MAAMC,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBJ,SAAvB,EAAkC,eAAlC,CAAZ;AACA,SAAOG,GAAP;AACH,C,CAED;AACA;;AACA,OAAO,SAASE,eAAT,CAAyBC,EAAzB,EAA6B;AAChC,SAAOA,EAAE,CAACC,YAAH,CAAgB,MAAhB,CAAP;AACH,C,CAED;;AACA,OAAO,SAASC,SAAT,CAAmBR,SAAnB,EAA8B;AACjC,MAAMG,GAAG,GAAGJ,QAAQ,CAACC,SAAD,CAApB;AACA,MAAIS,QAAQ,GAAGN,GAAG,CAACO,oBAAJ,CAAyB,GAAzB,CAAf;AACA,MAAMC,UAAU,GAAG,EAAnB;;AAHiC,6CAIXF,QAJW;AAAA;;AAAA;AAIjC,wDAAgC;AAAA,UAArBG,OAAqB;AAC5B,UAAMC,KAAK,GAAGR,eAAe,CAACO,OAAD,CAA7B,CAD4B,CAE5B;;AACA,UAAIC,KAAK,IAAIF,UAAU,CAACG,OAAX,CAAmBD,KAAnB,MAA8B,CAAC,CAA5C,EAA+C;AAC3CF,QAAAA,UAAU,CAACI,IAAX,CAAgBF,KAAhB;AACH;AACJ;AAVgC;AAAA;AAAA;AAAA;AAAA;;AAWjC,SAAOF,UAAP;AACH,C,CAED;;AACA,OAAO,SAASK,QAAT,CAAkBC,CAAlB,EAAqB;AACxB,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYC,QAAQ,CAACC,kBAAkB,CAACL,CAAD,CAAnB,CAApB,CAAZ;AACA,SAAO,+BAA+BC,GAAtC;AACH,C,CAED;;AACA,OAAO,SAASK,aAAT,CAAuBvB,SAAvB,EAAkCwB,GAAlC,EAAuC;AAC1C;AACA;AACA,MAAMrB,GAAG,GAAGJ,QAAQ,CAACC,SAAD,CAApB;AACA,MAAIS,QAAQ,GAAGN,GAAG,CAACO,oBAAJ,CAAyB,GAAzB,CAAf;;AAJ0C,8CAMpBD,QANoB;AAAA;;AAAA;AAM1C,2DAAgC;AAAA,UAArBG,OAAqB;AAC5B,UAAMC,KAAK,GAAGR,eAAe,CAACO,OAAD,CAA7B;;AACA,UAAIY,GAAG,CAACX,KAAD,CAAP,EAAgB;AACZD,QAAAA,OAAO,CAACa,YAAR,CAAqB,MAArB,EAA6BD,GAAG,CAACX,KAAD,CAAhC;AACH;AACJ;AAXyC;AAAA;AAAA;AAAA;AAAA;;AAY1C,MAAIa,aAAa,GAAG,IAAIC,aAAJ,EAApB;AACA,MAAMC,GAAG,GAAGF,aAAa,CAACG,iBAAd,CAAgC1B,GAAhC,CAAZ;AACA,SAAOyB,GAAP;AACH;AAED,OAAO,SAASE,WAAT,CAAqBC,KAArB,EAA4B;AAC/B,MAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,UAAUC,CAAV,EAAa;AACzB,QAAIC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,MAAvB;AACA,QAAIrC,MAAM,GAAG,IAAIC,SAAJ,EAAb;AACA,QAAIC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBgC,OAAvB,EAAgC,eAAhC,CAAV;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAErC,MAAAA,GAAG,EAAHA;AAAF,KAAZ,EAJyB,CAKzB;AACA;AACH,GAPD;;AAQA6B,EAAAA,MAAM,CAACS,UAAP,CAAkBV,KAAK,CAAC,CAAD,CAAvB;AACH","sourcesContent":["// parse svg string into DOM\r\nexport function parseSVG(svgString) {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(svgString, \"image/svg+xml\");\r\n    return doc;\r\n}\r\n\r\n// get color of element\r\n// we can also check styles of element and other properties like \"stroke\"\r\nexport function getElementColor(el) {\r\n    return el.getAttribute(\"fill\");\r\n}\r\n\r\n// find all colors used in svg\r\nexport function getColors(svgString) {\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n    const usedColors = [];\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        // if color is defined and uniq we will add it\r\n        if (color && usedColors.indexOf(color) === -1) {\r\n            usedColors.push(color);\r\n        }\r\n    }\r\n    return usedColors;\r\n}\r\n\r\n// convert svg string into base64 data URL\r\nexport function svgToURL(s) {\r\n    const uri = window.btoa(unescape(encodeURIComponent(s)));\r\n    return \"data:image/svg+xml;base64,\" + uri;\r\n}\r\n\r\n// replace colors in svg string\r\nexport function replaceColors(svgString, map) {\r\n    // we can do some RegExp magic here\r\n    // but I will just manually check every element\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        if (map[color]) {\r\n            element.setAttribute(\"fill\", map[color]);\r\n        }\r\n    }\r\n    var xmlSerializer = new XMLSerializer();\r\n    const str = xmlSerializer.serializeToString(doc);\r\n    return str;\r\n}\r\n\r\nexport function handleFiles(files) {\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n        var svgData = e.target.result;\r\n        var parser = new DOMParser();\r\n        var doc = parser.parseFromString(svgData, \"image/svg+xml\");\r\n        console.log({ doc })\r\n        // var pathTags = doc.getElementsByTagName(\"path\");\r\n        //Do whatever you want with pathTags\r\n    }\r\n    reader.readAsText(files[0]);\r\n}"]},"metadata":{},"sourceType":"module"}