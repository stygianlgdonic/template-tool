{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\SelectPalette.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from 'react'; // import useTemplateData from '../hooks/useTemplateData'\n\nimport { SketchPicker } from 'react-color';\nimport { NavLink } from 'react-router-dom';\nimport { ROUTE_NAMES } from '../routes/route_names';\nimport { TemplateContext } from '../contexts/TemplateContext';\n\nconst SelectPalette = () => {\n  const {\n    0: templateData,\n    1: setTemplateData\n  } = useContext(TemplateContext);\n  const {\n    0: showColorPicker,\n    1: setShowColorPicker\n  } = useState(false);\n  const {\n    0: currentSelectedColor,\n    1: setCurrentSelectedColor\n  } = useState(null);\n\n  const handleShowColorPicker = Color => {\n    setShowColorPicker(true);\n    setCurrentSelectedColor(Color);\n  };\n\n  const handleCloseColorPicker = () => {\n    setShowColorPicker(false);\n  };\n\n  const handleColorChange = colorObj => {\n    setTemplateData(prev => {\n      const index = prev.palette.findIndex(item => item.name === (currentSelectedColor === null || currentSelectedColor === void 0 ? void 0 : currentSelectedColor.name));\n      prev.palette[index].color = colorObj.hex;\n      setCurrentSelectedColor(_objectSpread(_objectSpread({}, currentSelectedColor), {}, {\n        color: colorObj.hex\n      }));\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"Select palette for your template\")), templateData.palette.map((item, index) => __jsx(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, item.name, \" : \", __jsx(\"div\", {\n    style: {\n      backgroundColor: item.color,\n      width: '30px',\n      height: '30px'\n    },\n    onClick: () => handleShowColorPicker(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 35\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      display: showColorPicker ? \"\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(SketchPicker, {\n    color: currentSelectedColor === null || currentSelectedColor === void 0 ? void 0 : currentSelectedColor.color,\n    onChange: handleColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    onClick: handleCloseColorPicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Close\")), __jsx(\"div\", {\n    style: {\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(NavLink, {\n    to: ROUTE_NAMES.design_tool,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Proceed\")));\n};\n\nexport default SelectPalette;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/SelectPalette.tsx"],"names":["React","useState","useContext","SketchPicker","NavLink","ROUTE_NAMES","TemplateContext","SelectPalette","templateData","setTemplateData","showColorPicker","setShowColorPicker","currentSelectedColor","setCurrentSelectedColor","handleShowColorPicker","Color","handleCloseColorPicker","handleColorChange","colorObj","prev","index","palette","findIndex","item","name","color","hex","map","backgroundColor","width","height","display","marginTop","design_tool"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\n// import useTemplateData from '../hooks/useTemplateData'\r\nimport { SketchPicker } from 'react-color'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { ROUTE_NAMES } from '../routes/route_names'\r\nimport { TemplateContext } from '../contexts/TemplateContext'\r\n\r\ninterface IColor {\r\n    name: string\r\n    color: string\r\n}\r\n\r\nconst SelectPalette = () => {\r\n\r\n    const [templateData, setTemplateData] = useContext(TemplateContext)\r\n    const [showColorPicker, setShowColorPicker] = useState<boolean>(false)\r\n    const [currentSelectedColor, setCurrentSelectedColor] = useState<IColor | null>(null)\r\n\r\n    const handleShowColorPicker = (Color: IColor) => {\r\n        setShowColorPicker(true)\r\n        setCurrentSelectedColor(Color)\r\n    }\r\n\r\n    const handleCloseColorPicker = () => {\r\n        setShowColorPicker(false)\r\n    }\r\n\r\n    const handleColorChange = (colorObj: any) => {\r\n        setTemplateData(prev => {\r\n            const index = prev.palette.findIndex(item => item.name === currentSelectedColor?.name)\r\n            prev.palette[index].color = colorObj.hex\r\n            setCurrentSelectedColor({ ...currentSelectedColor, color: colorObj.hex })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <b>Select palette for your template</b>\r\n            </div>\r\n            {templateData.palette.map((item, index) => (\r\n                <div key={index} >\r\n                    {item.name} : <div\r\n                        style={{ backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                        onClick={() => handleShowColorPicker(item)}\r\n                    ></div>\r\n                </div>\r\n            ))}\r\n            <div style={{ display: showColorPicker ? \"\" : \"none\" }}>\r\n                <SketchPicker\r\n                    color={currentSelectedColor?.color}\r\n                    onChange={handleColorChange}\r\n                />\r\n                <br />\r\n                <button onClick={handleCloseColorPicker}>Close</button>\r\n            </div>\r\n            <div style={{ marginTop: '50px' }}>\r\n                <NavLink to={ROUTE_NAMES.design_tool}>Proceed</NavLink>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SelectPalette\r\n"]},"metadata":{},"sourceType":"module"}