{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\USvg.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Image } from 'react-konva';\nimport useSvg from '../hooks/useSvg';\n\nconst USvg = ({\n  svgProps,\n  onChange,\n  onSelect\n}) => {\n  const {} = useSvg(svgProps.svgString); // const colors = svg.getColors(svgProps.svgString);\n  // const [colorMap, setColorMap] = React.useState({});\n  // const modifiedSVG = svg.replaceColors(svgProps.svgString, colorMap);\n  // const [image] = useImage(svg.svgToURL(modifiedSVG));\n\n  const {\n    0: currentSelectedSvgColor,\n    1: setCurrentSelectedSvgColor\n  } = useState(null);\n  React.useEffect(() => {\n    console.log({\n      svgProps\n    });\n  }, []);\n\n  const handleSvgCurrentColor = color => {\n    setCurrentSelectedSvgColor(color);\n  };\n\n  const setNewColor = (oldColor, newColor) => {\n    setColorMap(_objectSpread(_objectSpread({}, colorMap), {}, {\n      [oldColor]: newColor\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Image, _extends({}, svgProps, {\n    image: image,\n    onClick: () => onSelect(svgProps.id),\n    onTap: () => onSelect(svgProps.id),\n    onDragEnd: onChange,\n    onTransformEnd: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default USvg;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/USvg.tsx"],"names":["React","useState","Image","useSvg","USvg","svgProps","onChange","onSelect","svgString","currentSelectedSvgColor","setCurrentSelectedSvgColor","useEffect","console","log","handleSvgCurrentColor","color","setNewColor","oldColor","newColor","setColorMap","colorMap","image","id"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;;AASA,MAAMC,IAAqB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAD,KAAuC;AAEjE,QAAM,KAAMJ,MAAM,CAACE,QAAQ,CAACG,SAAV,CAAlB,CAFiE,CAIjE;AACA;AACA;AACA;;AAEA,QAAM;AAAA,OAACC,uBAAD;AAAA,OAA0BC;AAA1B,MAAwDT,QAAQ,CAAgB,IAAhB,CAAtE;AAEAD,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAER,MAAAA;AAAF,KAAZ;AACH,GAFD,EAEG,EAFH;;AAIA,QAAMS,qBAAqB,GAAIC,KAAD,IAAmB;AAC7CL,IAAAA,0BAA0B,CAACK,KAAD,CAA1B;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACxCC,IAAAA,WAAW,iCACJC,QADI;AAEP,OAACH,QAAD,GAAYC;AAFL,OAAX;AAIH,GALD;;AAOA,SACI,4BACI,MAAC,KAAD,eACQb,QADR;AAEI,IAAA,KAAK,EAAEgB,KAFX;AAGI,IAAA,OAAO,EAAE,MAAMd,QAAQ,CAACF,QAAQ,CAACiB,EAAV,CAH3B;AAII,IAAA,KAAK,EAAE,MAAMf,QAAQ,CAACF,QAAQ,CAACiB,EAAV,CAJzB;AAKI,IAAA,SAAS,EAAEhB,QALf;AAMI,IAAA,cAAc,EAAEA,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CADJ;AAaH,CAvCD;;AAwCA,eAAeF,IAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport useSvg from '../hooks/useSvg';\r\nimport * as svg from \"../utils/svg\"\r\n\r\ninterface Props {\r\n    svgProps: any\r\n    onChange: any\r\n    onSelect: any\r\n}\r\n\r\nconst USvg: React.FC<Props> = ({ svgProps, onChange, onSelect, }) => {\r\n\r\n    const { } = useSvg(svgProps.svgString)\r\n\r\n    // const colors = svg.getColors(svgProps.svgString);\r\n    // const [colorMap, setColorMap] = React.useState({});\r\n    // const modifiedSVG = svg.replaceColors(svgProps.svgString, colorMap);\r\n    // const [image] = useImage(svg.svgToURL(modifiedSVG));\r\n\r\n    const [currentSelectedSvgColor, setCurrentSelectedSvgColor] = useState<string | null>(null)\r\n\r\n    React.useEffect(() => {\r\n        console.log({ svgProps })\r\n    }, [])\r\n\r\n    const handleSvgCurrentColor = (color: string) => {\r\n        setCurrentSelectedSvgColor(color)\r\n    }\r\n\r\n    const setNewColor = (oldColor, newColor) => {\r\n        setColorMap({\r\n            ...colorMap,\r\n            [oldColor]: newColor\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Image\r\n                {...svgProps}\r\n                image={image}\r\n                onClick={() => onSelect(svgProps.id)}\r\n                onTap={() => onSelect(svgProps.id)}\r\n                onDragEnd={onChange}\r\n                onTransformEnd={onChange}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default USvg\r\n"]},"metadata":{},"sourceType":"module"}