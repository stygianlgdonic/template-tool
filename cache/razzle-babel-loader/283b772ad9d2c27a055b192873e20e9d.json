{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\DesignTool.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport { stageDimensions, rectangle, ORIGINAL_SVG } from \"../utils/defaults\";\nimport * as svg from \"../utils/svg\";\nimport { SketchPicker } from 'react-color';\nimport Rectangle from \"./Rectangle\";\nimport UImage from \"./UImage\";\nimport TransformerComponent from \"./UTransformer\";\nimport useImage from 'use-image';\nimport useTemplateData from '../hooks/useTemplateData';\n\nconst DesignTool = () => {\n  var _templateData$rectang, _templateData$rectang2, _currentSelectedColor;\n\n  const colors = svg.getColors(ORIGINAL_SVG);\n  const [colorMap, setColorMap] = React.useState({});\n  const modifiedSVG = svg.replaceColors(ORIGINAL_SVG, colorMap);\n  const [image] = useImage(svg.svgToURL(modifiedSVG));\n  const {\n    0: imageAttrs,\n    1: setImageAttrs\n  } = useState({\n    id: \"svg\",\n    name: \"svg\",\n    type: \"svg\",\n    x: 10,\n    y: 10,\n    draggable: true\n  });\n  const {\n    0: showSvgColorPicker,\n    1: setShowSvgColorPicker\n  } = useState(false);\n  const {\n    0: currentSelectedSvgColor,\n    1: setCurrentSelectedSvgColor\n  } = useState(null);\n  const {\n    templateData,\n    setTemplateData\n  } = useTemplateData();\n  const {\n    0: selectedId,\n    1: selectShape\n  } = useState(null);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", e => e.key === \"Escape\" && selectShape(null), false);\n    return () => {\n      document.removeEventListener(\"keydown\", e => e.key === \"Escape\" && selectShape(null), false);\n    };\n  }, []);\n\n  const checkDeselect = e => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  const handleColorChange = color => {\n    setTemplateData(prev => {\n      var _prev$rectangles;\n\n      const index = (_prev$rectangles = prev.rectangles) === null || _prev$rectangles === void 0 ? void 0 : _prev$rectangles.findIndex(rect => rect.id === selectedId);\n      prev.rectangles[index].fill = color.hex;\n    });\n  };\n\n  const handleAddNewRect = () => {\n    setTemplateData(prev => {\n      prev.rectangles.push(rectangle);\n    });\n  };\n\n  const handleSvgCurrentColor = color => {\n    setCurrentSelectedSvgColor(color);\n  };\n\n  const setNewColor = (oldColor, newColor) => {\n    setColorMap(_objectSpread(_objectSpread({}, colorMap), {}, {\n      [oldColor]: newColor\n    }));\n  };\n\n  const {\n    rectangles\n  } = templateData;\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundColor: 'coral'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    onClick: handleAddNewRect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"Add new rect\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, __jsx(Stage, _extends({}, stageDimensions, {\n    onMouseDown: checkDeselect,\n    onTouchStart: checkDeselect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }), __jsx(Layer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, rectangles === null || rectangles === void 0 ? void 0 : rectangles.map((rect, i) => {\n    return __jsx(Rectangle, {\n      key: i,\n      shapeProps: rect,\n      onSelect: () => {\n        selectShape(rect.id);\n      },\n      onChange: newAttrs => {\n        setTemplateData(prev => {\n          const index = prev.rectangles.findIndex(item => item.id === rect.id);\n          prev.rectangles[index] = newAttrs;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    });\n  }), __jsx(UImage, {\n    image: image,\n    imageProps: imageAttrs,\n    onSelect: id => selectShape(id),\n    onChange: event => setImageAttrs(_objectSpread(_objectSpread({}, imageAttrs), {}, {\n      x: event.target.attrs.x,\n      y: event.target.attrs.y\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }), __jsx(TransformerComponent, {\n    id: `tr${selectedId}`,\n    selectedShapeName: selectedId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      display: !!selectedId && selectedId !== \"svg\" ? '' : 'none',\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), __jsx(SketchPicker, {\n    color: (_templateData$rectang = templateData.rectangles) === null || _templateData$rectang === void 0 ? void 0 : (_templateData$rectang2 = _templateData$rectang.find(rect => rect.id === selectedId)) === null || _templateData$rectang2 === void 0 ? void 0 : _templateData$rectang2.fill,\n    onChange: handleColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    style: {\n      display: !!selectedId && selectedId === \"svg\" ? '' : 'none',\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), colors.map((item, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      display: 'inline-block',\n      width: '30px',\n      height: '30px',\n      backgroundColor: item,\n      margin: '5px'\n    },\n    onClick: handleSvgCurrentColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  })), __jsx(\"div\", {\n    style: {\n      display: showSvgColorPicker ? \"\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, __jsx(SketchPicker, {\n    color: (_currentSelectedColor = currentSelectedColor) === null || _currentSelectedColor === void 0 ? void 0 : _currentSelectedColor.color,\n    onChange: handleColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }), __jsx(\"button\", {\n    onClick: handleCloseColorPicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Close\"))));\n};\n\nexport default DesignTool;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/DesignTool.tsx"],"names":["React","useEffect","useState","Stage","Layer","stageDimensions","rectangle","ORIGINAL_SVG","svg","SketchPicker","Rectangle","UImage","TransformerComponent","useImage","useTemplateData","DesignTool","colors","getColors","colorMap","setColorMap","modifiedSVG","replaceColors","image","svgToURL","imageAttrs","setImageAttrs","id","name","type","x","y","draggable","showSvgColorPicker","setShowSvgColorPicker","currentSelectedSvgColor","setCurrentSelectedSvgColor","templateData","setTemplateData","selectedId","selectShape","document","addEventListener","e","key","removeEventListener","checkDeselect","clickedOnEmpty","target","getStage","handleColorChange","color","prev","index","rectangles","findIndex","rect","fill","hex","handleAddNewRect","push","handleSvgCurrentColor","setNewColor","oldColor","newColor","display","justifyContent","marginTop","backgroundColor","map","i","newAttrs","item","event","attrs","padding","find","width","height","margin","currentSelectedColor","handleCloseColorPicker"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport { stageDimensions, rectangle, ORIGINAL_SVG } from \"../utils/defaults\"\r\nimport * as svg from \"../utils/svg\"\r\nimport { SketchPicker } from 'react-color'\r\nimport Rectangle from \"./Rectangle\"\r\nimport UImage from \"./UImage\"\r\nimport TransformerComponent from \"./UTransformer\"\r\nimport useImage from 'use-image';\r\nimport useTemplateData from '../hooks/useTemplateData';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const colors = svg.getColors(ORIGINAL_SVG);\r\n    const [colorMap, setColorMap] = React.useState({});\r\n    const modifiedSVG = svg.replaceColors(ORIGINAL_SVG, colorMap);\r\n    const [image] = useImage(svg.svgToURL(modifiedSVG));\r\n    const [imageAttrs, setImageAttrs] = useState({\r\n        id: \"svg\",\r\n        name: \"svg\",\r\n        type: \"svg\",\r\n        x: 10,\r\n        y: 10,\r\n        draggable: true\r\n    })\r\n\r\n    const [showSvgColorPicker, setShowSvgColorPicker] = useState(false)\r\n    const [currentSelectedSvgColor, setCurrentSelectedSvgColor] = useState(null)\r\n\r\n    const { templateData, setTemplateData } = useTemplateData()\r\n    const [selectedId, selectShape] = useState(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        };\r\n    }, []);\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage()\r\n        if (clickedOnEmpty) {\r\n            selectShape(null)\r\n        }\r\n    };\r\n\r\n    const handleColorChange = (color) => {\r\n        setTemplateData((prev) => {\r\n            const index = prev.rectangles?.findIndex(rect => rect.id === selectedId)\r\n            prev.rectangles[index].fill = color.hex\r\n        })\r\n    }\r\n\r\n    const handleAddNewRect = () => {\r\n        setTemplateData((prev) => {\r\n            prev.rectangles.push(rectangle)\r\n        })\r\n    }\r\n\r\n    const handleSvgCurrentColor = (color: string) => {\r\n        setCurrentSelectedSvgColor(color)\r\n    }\r\n\r\n    const setNewColor = (oldColor, newColor) => {\r\n        setColorMap({\r\n            ...colorMap,\r\n            [oldColor]: newColor\r\n        });\r\n    };\r\n\r\n    const { rectangles } = templateData\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\r\n            <div style={{ backgroundColor: 'coral' }}>\r\n                <button onClick={handleAddNewRect}>Add new rect</button>\r\n            </div>\r\n            <div>\r\n                <Stage\r\n                    {...stageDimensions}\r\n                    onMouseDown={checkDeselect}\r\n                    onTouchStart={checkDeselect}\r\n                >\r\n                    <Layer>\r\n                        {rectangles?.map((rect, i) => {\r\n                            return (\r\n                                <Rectangle\r\n                                    key={i}\r\n                                    shapeProps={rect}\r\n                                    onSelect={() => {\r\n                                        selectShape(rect.id)\r\n                                    }}\r\n                                    onChange={(newAttrs) => {\r\n                                        setTemplateData((prev) => {\r\n                                            const index = prev.rectangles.findIndex(item => item.id === rect.id)\r\n                                            prev.rectangles[index] = newAttrs\r\n                                        });\r\n                                    }}\r\n                                />\r\n                            );\r\n                        })}\r\n                        <UImage\r\n                            image={image}\r\n                            imageProps={imageAttrs}\r\n                            onSelect={(id) => selectShape(id)}\r\n                            onChange={(event) => setImageAttrs({ ...imageAttrs, x: event.target.attrs.x, y: event.target.attrs.y })}\r\n                        />\r\n                        <TransformerComponent\r\n                            id={`tr${selectedId}`}\r\n                            selectedShapeName={selectedId}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            <div style={{ display: !!selectedId && selectedId !== \"svg\" ? '' : 'none', backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                <SketchPicker\r\n                    color={templateData.rectangles?.find(rect => rect.id === selectedId)?.fill}\r\n                    onChange={handleColorChange}\r\n                />\r\n            </div>\r\n            <div style={{ display: !!selectedId && selectedId === \"svg\" ? '' : 'none', backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                {colors.map((item, index) => (\r\n                    <div\r\n                        key={index}\r\n                        style={{ display: 'inline-block', width: '30px', height: '30px', backgroundColor: item, margin: '5px' }}\r\n                        onClick={handleSvgCurrentColor}\r\n                    >\r\n                    </div>\r\n                ))}\r\n                <div style={{ display: showSvgColorPicker ? \"\" : \"none\" }}>\r\n                    <SketchPicker\r\n                        color={currentSelectedColor?.color}\r\n                        onChange={handleColorChange}\r\n                    />\r\n                    <br />\r\n                    <button onClick={handleCloseColorPicker}>Close</button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DesignTool\r\n"]},"metadata":{},"sourceType":"module"}