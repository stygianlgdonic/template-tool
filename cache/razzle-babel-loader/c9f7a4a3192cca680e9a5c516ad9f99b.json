{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\DesignTool.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport { stageDimensions, rectangle } from \"../utils/defaults\";\nimport * as svg from \"../utils/svg\";\nimport { SketchPicker } from 'react-color';\nimport Rectangle from \"./Rectangle\"; // import UImage from \"./UImage\"\n\nimport USvg from \"./USvg\";\nimport TransformerComponent from \"./UTransformer\"; // import useTemplateData from '../hooks/useTemplateData';\n\nimport { TemplateContext } from '../contexts/TemplateContext';\n\nconst DesignTool = () => {\n  var _templateData$rectang, _templateData$rectang2;\n\n  const {\n    0: currentSelectedShape,\n    1: setCurrentSelectedShape\n  } = useState(null);\n  const {\n    0: svgString,\n    1: setSvgString\n  } = useState(null); // const colors = svg.getColors(svgString);\n  // const [colorMap, setColorMap] = React.useState({});\n  // const modifiedSVG = svg.replaceColors(svgString, colorMap);\n  // const [image] = useImage(svg.svgToURL(modifiedSVG));\n  // const [imageAttrs, setImageAttrs] = useState({\n  //     id: \"svg\",\n  //     name: \"svg\",\n  //     type: \"svg\",\n  //     x: 10,\n  //     y: 10,\n  //     draggable: true\n  // })\n\n  const {\n    0: currentSelectedSvgColor,\n    1: setCurrentSelectedSvgColor\n  } = useState(null);\n  const {\n    0: templateData,\n    1: setTemplateData\n  } = useContext(TemplateContext);\n  const {\n    0: selectedId,\n    1: selectShape\n  } = useState(null);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", e => e.key === \"Escape\" && selectShape(null), false);\n    return () => {\n      document.removeEventListener(\"keydown\", e => e.key === \"Escape\" && selectShape(null), false);\n    };\n  }, []);\n\n  const checkDeselect = e => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  const handleColorChange = color => {\n    setTemplateData(prev => {\n      var _prev$rectangles;\n\n      const index = (_prev$rectangles = prev.rectangles) === null || _prev$rectangles === void 0 ? void 0 : _prev$rectangles.findIndex(rect => rect.id === selectedId);\n      prev.rectangles[index].fill = color.hex;\n    });\n  };\n\n  const handleAddNewRect = () => {\n    setTemplateData(prev => {\n      let imageId = new Date().getTime();\n      prev.rectangles.push(_objectSpread(_objectSpread({}, rectangle), {}, {\n        id: `rect_${imageId.toString()}`\n      }));\n    });\n  };\n\n  const handleSvgCurrentColor = color => {\n    setCurrentSelectedSvgColor(color);\n  }; // const setNewColor = (oldColor, newColor) => {\n  //     setColorMap({\n  //         ...colorMap,\n  //         [oldColor]: newColor\n  //     });\n  // };\n\n\n  const handleSvgUpload = e => {\n    svg.getSvgStringFromUpload(e.target.files).then(SVG_STRING => {\n      setTemplateData(prev => {\n        let svgId = new Date().getTime();\n        prev.svgs.push({\n          id: \"svg_default\",\n          type: \"svg\",\n          svgString: SVG_STRING,\n          x: 100,\n          y: 200,\n          width: 100,\n          height: 100,\n          draggable: true\n        });\n      });\n    });\n  };\n\n  const {\n    rectangles\n  } = templateData;\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundColor: 'coral'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    onClick: handleAddNewRect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Add new rect\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"upload svg\"), __jsx(\"input\", {\n    type: \"file\",\n    accept: \".svg\",\n    onChange: handleSvgUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, __jsx(Stage, _extends({}, stageDimensions, {\n    onMouseDown: checkDeselect,\n    onTouchStart: checkDeselect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }), __jsx(Layer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, rectangles === null || rectangles === void 0 ? void 0 : rectangles.map((rect, i) => {\n    return __jsx(Rectangle, {\n      key: i,\n      shapeProps: rect,\n      onSelect: () => {\n        selectShape(rect.id);\n      },\n      onChange: newAttrs => {\n        setTemplateData(prev => {\n          const index = prev.rectangles.findIndex(item => item.id === rect.id);\n          prev.rectangles[index] = newAttrs;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }\n    });\n  }), templateData.svgs.map((item, index) => __jsx(USvg, {\n    key: index,\n    svgProps: item,\n    onSelect: id => {\n      selectShape(id);\n      setCurrentSelectedShape(item);\n    },\n    onChange: event => setTemplateData(prev => {\n      prev.svgs[index].x = event.target.attrs.x;\n      prev.svgs[index].y = event.target.attrs.y;\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  })), __jsx(TransformerComponent, {\n    id: `tr${selectedId}`,\n    selectedShapeName: selectedId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      display: !!selectedId ? \"\" : \"none\",\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), __jsx(\"div\", {\n    style: {\n      display: (selectedId === null || selectedId === void 0 ? void 0 : selectedId.split('_')[0]) === \"rect\" ? '' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, \"Select from palette\"), templateData.palette.map((item, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }, item.name, \" : \", __jsx(\"div\", {\n    style: {\n      display: 'inline-block',\n      backgroundColor: item.color,\n      width: '30px',\n      height: '30px'\n    },\n    onClick: () => handleColorChange({\n      hex: item.color\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 43\n    }\n  }))), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"or Select a custom color\"), __jsx(SketchPicker, {\n    color: (_templateData$rectang = templateData.rectangles) === null || _templateData$rectang === void 0 ? void 0 : (_templateData$rectang2 = _templateData$rectang.find(rect => rect.id === selectedId)) === null || _templateData$rectang2 === void 0 ? void 0 : _templateData$rectang2.fill,\n    onChange: handleColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default DesignTool;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/DesignTool.tsx"],"names":["React","useContext","useEffect","useState","Stage","Layer","stageDimensions","rectangle","svg","SketchPicker","Rectangle","USvg","TransformerComponent","TemplateContext","DesignTool","currentSelectedShape","setCurrentSelectedShape","svgString","setSvgString","currentSelectedSvgColor","setCurrentSelectedSvgColor","templateData","setTemplateData","selectedId","selectShape","document","addEventListener","e","key","removeEventListener","checkDeselect","clickedOnEmpty","target","getStage","handleColorChange","color","prev","index","rectangles","findIndex","rect","id","fill","hex","handleAddNewRect","imageId","Date","getTime","push","toString","handleSvgCurrentColor","handleSvgUpload","getSvgStringFromUpload","files","then","SVG_STRING","svgId","svgs","type","x","y","width","height","draggable","display","justifyContent","marginTop","backgroundColor","map","i","newAttrs","item","event","attrs","padding","split","palette","name","find"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport { stageDimensions, rectangle } from \"../utils/defaults\"\r\nimport * as svg from \"../utils/svg\"\r\nimport { SketchPicker } from 'react-color'\r\nimport Rectangle from \"./Rectangle\"\r\n// import UImage from \"./UImage\"\r\nimport USvg from \"./USvg\"\r\nimport TransformerComponent from \"./UTransformer\"\r\n// import useTemplateData from '../hooks/useTemplateData';\r\nimport { TemplateContext } from '../contexts/TemplateContext';\r\nimport useImage from 'use-image';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const [currentSelectedShape, setCurrentSelectedShape] = useState(null)\r\n\r\n    const [svgString, setSvgString] = useState(null)\r\n    // const colors = svg.getColors(svgString);\r\n    // const [colorMap, setColorMap] = React.useState({});\r\n    // const modifiedSVG = svg.replaceColors(svgString, colorMap);\r\n    // const [image] = useImage(svg.svgToURL(modifiedSVG));\r\n    // const [imageAttrs, setImageAttrs] = useState({\r\n    //     id: \"svg\",\r\n    //     name: \"svg\",\r\n    //     type: \"svg\",\r\n    //     x: 10,\r\n    //     y: 10,\r\n    //     draggable: true\r\n    // })\r\n\r\n    const [currentSelectedSvgColor, setCurrentSelectedSvgColor] = useState<string | null>(null)\r\n\r\n    const [templateData, setTemplateData] = useContext(TemplateContext)\r\n    const [selectedId, selectShape] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        };\r\n    }, []);\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage()\r\n        if (clickedOnEmpty) {\r\n            selectShape(null)\r\n        }\r\n    };\r\n\r\n    const handleColorChange = (color) => {\r\n        setTemplateData((prev) => {\r\n            const index = prev.rectangles?.findIndex(rect => rect.id === selectedId)\r\n            prev.rectangles[index].fill = color.hex\r\n        })\r\n    }\r\n\r\n    const handleAddNewRect = () => {\r\n        setTemplateData((prev) => {\r\n            let imageId = new Date().getTime();\r\n            prev.rectangles.push({ ...rectangle, id: `rect_${imageId.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleSvgCurrentColor = (color: string) => {\r\n        setCurrentSelectedSvgColor(color)\r\n    }\r\n\r\n    // const setNewColor = (oldColor, newColor) => {\r\n    //     setColorMap({\r\n    //         ...colorMap,\r\n    //         [oldColor]: newColor\r\n    //     });\r\n    // };\r\n\r\n    const handleSvgUpload = (e) => {\r\n        svg.getSvgStringFromUpload(e.target.files).then((SVG_STRING) => {\r\n\r\n            setTemplateData((prev) => {\r\n                let svgId = new Date().getTime()\r\n                prev.svgs.push({\r\n\r\n                    id: \"svg_default\",\r\n                    type: \"svg\",\r\n                    svgString: SVG_STRING,\r\n                    x: 100,\r\n                    y: 200,\r\n                    width: 100,\r\n                    height: 100,\r\n                    draggable: true,\r\n\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    const { rectangles } = templateData\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\r\n            <div style={{ backgroundColor: 'coral' }}>\r\n                <button onClick={handleAddNewRect}>Add new rect</button>\r\n                <br />\r\n                <p>upload svg</p>\r\n                <input type=\"file\" accept=\".svg\" onChange={handleSvgUpload} />\r\n            </div>\r\n            <div>\r\n                <Stage\r\n                    {...stageDimensions}\r\n                    onMouseDown={checkDeselect}\r\n                    onTouchStart={checkDeselect}\r\n                >\r\n                    <Layer>\r\n                        {rectangles?.map((rect, i) => {\r\n                            return (\r\n                                <Rectangle\r\n                                    key={i}\r\n                                    shapeProps={rect}\r\n                                    onSelect={() => {\r\n                                        selectShape(rect.id)\r\n                                    }}\r\n                                    onChange={(newAttrs) => {\r\n                                        setTemplateData((prev) => {\r\n                                            const index = prev.rectangles.findIndex(item => item.id === rect.id)\r\n                                            prev.rectangles[index] = newAttrs\r\n                                        });\r\n                                    }}\r\n                                />\r\n                            );\r\n                        })}\r\n                        {templateData.svgs.map((item, index) => (\r\n                            <USvg\r\n                                key={index}\r\n                                svgProps={item}\r\n                                onSelect={(id) => {\r\n                                    selectShape(id)\r\n                                    setCurrentSelectedShape(item)\r\n                                }}\r\n                                onChange={(event) => setTemplateData((prev) => {\r\n                                    prev.svgs[index].x = event.target.attrs.x\r\n                                    prev.svgs[index].y = event.target.attrs.y\r\n                                })}\r\n                            />\r\n                        ))}\r\n                        <TransformerComponent\r\n                            id={`tr${selectedId}`}\r\n                            selectedShapeName={selectedId}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            <div style={{ display: !!selectedId ? \"\" : \"none\", backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                <div style={{ display: selectedId?.split('_')[0] === \"rect\" ? '' : 'none' }}>\r\n                    <p>Select from palette</p>\r\n                    {templateData.palette.map((item, index) => (\r\n                        <div key={index} style={{ display: 'inline-block' }} >\r\n                            {item.name} : <div\r\n                                style={{ display: 'inline-block', backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                                onClick={() => handleColorChange({ hex: item.color })}\r\n                            ></div>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <p>or Select a custom color</p>\r\n\r\n                    <SketchPicker\r\n                        color={templateData.rectangles?.find(rect => rect.id === selectedId)?.fill}\r\n                        onChange={handleColorChange}\r\n                    />\r\n                </div>\r\n                {/* <div style={{ display: selectedId?.split('_')[0] === \"svg\" ? '' : 'none' }}>\r\n                    <p>Select a color you want to change...</p>\r\n                    {colors.map((item, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{ display: 'inline-block', width: '30px', height: '30px', backgroundColor: colorMap[item] || item, margin: '5px' }}\r\n                            onClick={() => handleSvgCurrentColor(item)}\r\n                        >\r\n                        </div>\r\n                    ))}\r\n                    <div>\r\n                        {currentSelectedSvgColor && (\r\n                            <>\r\n                                <p>Select from palette</p>\r\n                                {templateData.palette.map((item, index) => (\r\n                                    <div key={index} style={{ display: 'inline-block' }} >\r\n                                        {item.name} : <div\r\n                                            style={{ display: 'inline-block', backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                                            onClick={() => setNewColor(currentSelectedSvgColor, item.color)}\r\n                                        ></div>\r\n                                    </div>\r\n                                ))}\r\n\r\n                                <p>or Select a custom color</p>\r\n\r\n                                <SketchPicker\r\n                                    color={colorMap[currentSelectedSvgColor]}\r\n                                    onChange={(color) => setNewColor(currentSelectedSvgColor, color.hex)}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n\r\n                </div> */}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DesignTool\r\n"]},"metadata":{},"sourceType":"module"}