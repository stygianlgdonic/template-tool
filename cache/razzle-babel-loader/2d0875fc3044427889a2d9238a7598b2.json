{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\DesignTool.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport { stageDimensions, rectangle } from \"../utils/defaults\";\nimport * as svg from \"../utils/svg\";\nimport { SketchPicker } from 'react-color';\nimport Rectangle from \"./Rectangle\";\nimport USvg from \"./USvg\";\nimport TransformerComponent from \"./UTransformer\";\nimport useImage from 'use-image'; // import useTemplateData from '../hooks/useTemplateData';\n\nimport { TemplateContext } from '../contexts/TemplateContext';\n\nconst DesignTool = () => {\n  var _templateData$rectang, _templateData$rectang2;\n\n  const {\n    0: currentSelectedShape,\n    1: setCurrentSelectedShape\n  } = useState(null); // const { colors, colorMap, setColorMap, image } = useSvg(currentSelectedShape?.svgString || null)\n\n  const {\n    0: svgString,\n    1: setSvgString\n  } = useState(null);\n  const colors = svg.getColors(svgString);\n  const [colorMap, setColorMap] = React.useState({});\n  const modifiedSVG = svg.replaceColors(svgString, colorMap);\n  const [image] = useImage(svg.svgToURL(modifiedSVG));\n  const {\n    0: imageAttrs,\n    1: setImageAttrs\n  } = useState({\n    id: \"svg\",\n    name: \"svg\",\n    type: \"svg\",\n    x: 10,\n    y: 10,\n    draggable: true\n  });\n  const {\n    0: currentSelectedSvgColor,\n    1: setCurrentSelectedSvgColor\n  } = useState(null);\n  const {\n    0: templateData,\n    1: setTemplateData\n  } = useContext(TemplateContext);\n  const {\n    0: selectedId,\n    1: selectShape\n  } = useState(null);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", e => e.key === \"Escape\" && selectShape(null), false);\n    return () => {\n      document.removeEventListener(\"keydown\", e => e.key === \"Escape\" && selectShape(null), false);\n    };\n  }, []);\n\n  const checkDeselect = e => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  const handleColorChange = color => {\n    setTemplateData(prev => {\n      var _prev$rectangles;\n\n      const index = (_prev$rectangles = prev.rectangles) === null || _prev$rectangles === void 0 ? void 0 : _prev$rectangles.findIndex(rect => rect.id === selectedId);\n      prev.rectangles[index].fill = color.hex;\n    });\n  };\n\n  const handleAddNewRect = () => {\n    setTemplateData(prev => {\n      // ANCHOR - get the dynamic id thing done\n      let imageId = new Date().getTime();\n      prev.rectangles.push(_objectSpread(_objectSpread({}, rectangle), {}, {\n        id: `rect_${imageId.toString()}`\n      }));\n    });\n  };\n\n  const handleSvgCurrentColor = color => {\n    setCurrentSelectedSvgColor(color);\n  };\n\n  const setNewColor = (oldColor, newColor) => {\n    setColorMap(_objectSpread(_objectSpread({}, colorMap), {}, {\n      [oldColor]: newColor\n    }));\n  };\n\n  const handleSvgUpload = e => {\n    svg.getSvgStringFromUpload(e.target.files).then(SVG_STRING => {// setTemplateData((prev) => {\n      //     prev.svgs.push({\n      //     })\n      // })\n    });\n  };\n\n  const {\n    rectangles\n  } = templateData;\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundColor: 'coral'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    onClick: handleAddNewRect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"Add new rect\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"upload svg\"), __jsx(\"input\", {\n    type: \"file\",\n    accept: \".svg\",\n    onChange: handleSvgUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(Stage, _extends({}, stageDimensions, {\n    onMouseDown: checkDeselect,\n    onTouchStart: checkDeselect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }), __jsx(Layer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, rectangles === null || rectangles === void 0 ? void 0 : rectangles.map((rect, i) => {\n    return __jsx(Rectangle, {\n      key: i,\n      shapeProps: rect,\n      onSelect: () => {\n        selectShape(rect.id);\n      },\n      onChange: newAttrs => {\n        setTemplateData(prev => {\n          const index = prev.rectangles.findIndex(item => item.id === rect.id);\n          prev.rectangles[index] = newAttrs;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    });\n  }), templateData.svgs.map((item, index) => __jsx(USvg, {\n    key: index,\n    svgProps: item,\n    onSelect: id => {\n      selectShape(id);\n      setCurrentSelectedShape(item);\n    },\n    onChange: event => setTemplateData(prev => {\n      prev.svgs[index].x = event.target.attrs.x;\n      prev.svgs[index].y = event.target.attrs.y;\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  })), __jsx(TransformerComponent, {\n    id: `tr${selectedId}`,\n    selectedShapeName: selectedId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      display: !!selectedId ? \"\" : \"none\",\n      backgroundColor: 'coral',\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, \"Hit escape to close\"), __jsx(\"div\", {\n    style: {\n      display: (selectedId === null || selectedId === void 0 ? void 0 : selectedId.split('_')[0]) === \"rect\" ? '' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, \"Select from palette\"), templateData.palette.map((item, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }, item.name, \" : \", __jsx(\"div\", {\n    style: {\n      display: 'inline-block',\n      backgroundColor: item.color,\n      width: '30px',\n      height: '30px'\n    },\n    onClick: () => handleColorChange({\n      hex: item.color\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 43\n    }\n  }))), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, \"or Select a custom color\"), __jsx(SketchPicker, {\n    color: (_templateData$rectang = templateData.rectangles) === null || _templateData$rectang === void 0 ? void 0 : (_templateData$rectang2 = _templateData$rectang.find(rect => rect.id === selectedId)) === null || _templateData$rectang2 === void 0 ? void 0 : _templateData$rectang2.fill,\n    onChange: handleColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  })), console.log({\n    selectedId\n  }), __jsx(\"div\", {\n    style: {\n      display: (selectedId === null || selectedId === void 0 ? void 0 : selectedId.split('_')[0]) === \"svg\" ? '' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, \"Select a color you want to change...\"), colors.map((item, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      display: 'inline-block',\n      width: '30px',\n      height: '30px',\n      backgroundColor: colorMap[item] || item,\n      margin: '5px'\n    },\n    onClick: () => handleSvgCurrentColor(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, currentSelectedSvgColor && __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 33\n    }\n  }, \"Select from palette\"), templateData.palette.map((item, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 37\n    }\n  }, item.name, \" : \", __jsx(\"div\", {\n    style: {\n      display: 'inline-block',\n      backgroundColor: item.color,\n      width: '30px',\n      height: '30px'\n    },\n    onClick: () => setNewColor(currentSelectedSvgColor, item.color),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 55\n    }\n  }))), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 33\n    }\n  }, \"or Select a custom color\"), __jsx(SketchPicker, {\n    color: colorMap[currentSelectedSvgColor],\n    onChange: color => setNewColor(currentSelectedSvgColor, color.hex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 33\n    }\n  }))))));\n};\n\nexport default DesignTool;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/DesignTool.tsx"],"names":["React","useContext","useEffect","useState","Stage","Layer","stageDimensions","rectangle","svg","SketchPicker","Rectangle","USvg","TransformerComponent","useImage","TemplateContext","DesignTool","currentSelectedShape","setCurrentSelectedShape","svgString","setSvgString","colors","getColors","colorMap","setColorMap","modifiedSVG","replaceColors","image","svgToURL","imageAttrs","setImageAttrs","id","name","type","x","y","draggable","currentSelectedSvgColor","setCurrentSelectedSvgColor","templateData","setTemplateData","selectedId","selectShape","document","addEventListener","e","key","removeEventListener","checkDeselect","clickedOnEmpty","target","getStage","handleColorChange","color","prev","index","rectangles","findIndex","rect","fill","hex","handleAddNewRect","imageId","Date","getTime","push","toString","handleSvgCurrentColor","setNewColor","oldColor","newColor","handleSvgUpload","getSvgStringFromUpload","files","then","SVG_STRING","display","justifyContent","marginTop","backgroundColor","map","i","newAttrs","item","svgs","event","attrs","padding","split","palette","width","height","find","console","log","margin"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport { stageDimensions, rectangle } from \"../utils/defaults\"\r\nimport * as svg from \"../utils/svg\"\r\nimport { SketchPicker } from 'react-color'\r\nimport Rectangle from \"./Rectangle\"\r\nimport UImage from \"./UImage\"\r\nimport USvg from \"./USvg\"\r\nimport TransformerComponent from \"./UTransformer\"\r\nimport useImage from 'use-image';\r\n// import useTemplateData from '../hooks/useTemplateData';\r\nimport { TemplateContext } from '../contexts/TemplateContext';\r\nimport useSvg from '../hooks/useSvg';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const [currentSelectedShape, setCurrentSelectedShape] = useState(null)\r\n    // const { colors, colorMap, setColorMap, image } = useSvg(currentSelectedShape?.svgString || null)\r\n\r\n    const [svgString, setSvgString] = useState(null)\r\n    const colors = svg.getColors(svgString);\r\n    const [colorMap, setColorMap] = React.useState({});\r\n    const modifiedSVG = svg.replaceColors(svgString, colorMap);\r\n    const [image] = useImage(svg.svgToURL(modifiedSVG));\r\n    const [imageAttrs, setImageAttrs] = useState({\r\n        id: \"svg\",\r\n        name: \"svg\",\r\n        type: \"svg\",\r\n        x: 10,\r\n        y: 10,\r\n        draggable: true\r\n    })\r\n\r\n    const [currentSelectedSvgColor, setCurrentSelectedSvgColor] = useState<string | null>(null)\r\n\r\n    const [templateData, setTemplateData] = useContext(TemplateContext)\r\n    const [selectedId, selectShape] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", (e) => e.key === \"Escape\" && selectShape(null), false);\r\n        };\r\n    }, []);\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage()\r\n        if (clickedOnEmpty) {\r\n            selectShape(null)\r\n        }\r\n    };\r\n\r\n    const handleColorChange = (color) => {\r\n        setTemplateData((prev) => {\r\n            const index = prev.rectangles?.findIndex(rect => rect.id === selectedId)\r\n            prev.rectangles[index].fill = color.hex\r\n        })\r\n    }\r\n\r\n    const handleAddNewRect = () => {\r\n        setTemplateData((prev) => {\r\n            // ANCHOR - get the dynamic id thing done\r\n            let imageId = new Date().getTime();\r\n            prev.rectangles.push({ ...rectangle, id: `rect_${imageId.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleSvgCurrentColor = (color: string) => {\r\n        setCurrentSelectedSvgColor(color)\r\n    }\r\n\r\n    const setNewColor = (oldColor, newColor) => {\r\n        setColorMap({\r\n            ...colorMap,\r\n            [oldColor]: newColor\r\n        });\r\n    };\r\n\r\n    const handleSvgUpload = (e) => {\r\n        svg.getSvgStringFromUpload(e.target.files).then((SVG_STRING) => {\r\n\r\n            // setTemplateData((prev) => {\r\n            //     prev.svgs.push({\r\n\r\n            //     })\r\n            // })\r\n        })\r\n    }\r\n\r\n    const { rectangles } = templateData\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\r\n            <div style={{ backgroundColor: 'coral' }}>\r\n                <button onClick={handleAddNewRect}>Add new rect</button>\r\n                <br />\r\n                <p>upload svg</p>\r\n                <input type=\"file\" accept=\".svg\" onChange={handleSvgUpload} />\r\n            </div>\r\n            <div>\r\n                <Stage\r\n                    {...stageDimensions}\r\n                    onMouseDown={checkDeselect}\r\n                    onTouchStart={checkDeselect}\r\n                >\r\n                    <Layer>\r\n                        {rectangles?.map((rect, i) => {\r\n                            return (\r\n                                <Rectangle\r\n                                    key={i}\r\n                                    shapeProps={rect}\r\n                                    onSelect={() => {\r\n                                        selectShape(rect.id)\r\n                                    }}\r\n                                    onChange={(newAttrs) => {\r\n                                        setTemplateData((prev) => {\r\n                                            const index = prev.rectangles.findIndex(item => item.id === rect.id)\r\n                                            prev.rectangles[index] = newAttrs\r\n                                        });\r\n                                    }}\r\n                                />\r\n                            );\r\n                        })}\r\n                        {templateData.svgs.map((item, index) => (\r\n                            <USvg\r\n                                key={index}\r\n                                svgProps={item}\r\n                                onSelect={(id) => {\r\n                                    selectShape(id)\r\n                                    setCurrentSelectedShape(item)\r\n                                }}\r\n                                onChange={(event) => setTemplateData((prev) => {\r\n                                    prev.svgs[index].x = event.target.attrs.x\r\n                                    prev.svgs[index].y = event.target.attrs.y\r\n                                })}\r\n                            />\r\n                        ))}\r\n                        <TransformerComponent\r\n                            id={`tr${selectedId}`}\r\n                            selectedShapeName={selectedId}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            <div style={{ display: !!selectedId ? \"\" : \"none\", backgroundColor: 'coral', padding: '20px' }}>\r\n                <p>Hit escape to close</p>\r\n                <div style={{ display: selectedId?.split('_')[0] === \"rect\" ? '' : 'none' }}>\r\n                    <p>Select from palette</p>\r\n                    {templateData.palette.map((item, index) => (\r\n                        <div key={index} style={{ display: 'inline-block' }} >\r\n                            {item.name} : <div\r\n                                style={{ display: 'inline-block', backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                                onClick={() => handleColorChange({ hex: item.color })}\r\n                            ></div>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <p>or Select a custom color</p>\r\n\r\n                    <SketchPicker\r\n                        color={templateData.rectangles?.find(rect => rect.id === selectedId)?.fill}\r\n                        onChange={handleColorChange}\r\n                    />\r\n                </div>\r\n                {console.log({ selectedId })}\r\n                <div style={{ display: selectedId?.split('_')[0] === \"svg\" ? '' : 'none' }}>\r\n                    <p>Select a color you want to change...</p>\r\n                    {colors.map((item, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{ display: 'inline-block', width: '30px', height: '30px', backgroundColor: colorMap[item] || item, margin: '5px' }}\r\n                            onClick={() => handleSvgCurrentColor(item)}\r\n                        >\r\n                        </div>\r\n                    ))}\r\n                    <div>\r\n                        {currentSelectedSvgColor && (\r\n                            <>\r\n                                <p>Select from palette</p>\r\n                                {templateData.palette.map((item, index) => (\r\n                                    <div key={index} style={{ display: 'inline-block' }} >\r\n                                        {item.name} : <div\r\n                                            style={{ display: 'inline-block', backgroundColor: item.color, width: '30px', height: '30px' }}\r\n                                            onClick={() => setNewColor(currentSelectedSvgColor, item.color)}\r\n                                        ></div>\r\n                                    </div>\r\n                                ))}\r\n\r\n                                <p>or Select a custom color</p>\r\n\r\n                                <SketchPicker\r\n                                    color={colorMap[currentSelectedSvgColor]}\r\n                                    onChange={(color) => setNewColor(currentSelectedSvgColor, color.hex)}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DesignTool\r\n"]},"metadata":{},"sourceType":"module"}