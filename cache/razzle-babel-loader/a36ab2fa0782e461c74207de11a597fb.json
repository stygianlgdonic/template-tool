{"ast":null,"code":"import _objectSpread from \"D:/dev/template-tool/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\template-tool\\\\src\\\\components\\\\UTransformer.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { Transformer } from 'react-konva';\nexport var MIN_WIDTH = 50;\nexport var MIN_HEIGHT = 30;\n\nvar TransformerComponent = function TransformerComponent(_ref) {\n  var id = _ref.id,\n      selectedShapeName = _ref.selectedShapeName;\n  var transformer = useRef(null);\n  useEffect(function () {\n    checkNode();\n    console.log({\n      selectedShapeName: selectedShapeName\n    });\n  }, [selectedShapeName]);\n\n  var checkNode = function checkNode() {\n    var stage = transformer.current.getStage();\n    var selectedNode = stage.findOne(\"#\" + selectedShapeName);\n\n    if (selectedNode) {\n      transformer.current.nodes([selectedNode]);\n    } else {\n      transformer.current.detach();\n    }\n\n    transformer.current.getLayer().batchDraw();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Transformer, {\n    id: id,\n    ref: transformer,\n    boundBoxFunc: function boundBoxFunc(oldBox, newBox) {\n      if (newBox.width < MIN_WIDTH) {\n        return _objectSpread(_objectSpread({}, oldBox), {}, {\n          width: MIN_WIDTH\n        });\n      }\n\n      return newBox;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default TransformerComponent;","map":{"version":3,"sources":["D:/dev/template-tool/src/components/UTransformer.tsx"],"names":["React","useEffect","useRef","Transformer","MIN_WIDTH","MIN_HEIGHT","TransformerComponent","id","selectedShapeName","transformer","checkNode","console","log","stage","current","getStage","selectedNode","findOne","nodes","detach","getLayer","batchDraw","oldBox","newBox","width"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,IAAMC,SAAS,GAAG,EAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,EAAnB;;AAOP,IAAMC,oBAAqC,GAAG,SAAxCA,oBAAwC,OAA+B;AAAA,MAA5BC,EAA4B,QAA5BA,EAA4B;AAAA,MAAxBC,iBAAwB,QAAxBA,iBAAwB;AAEzE,MAAMC,WAAW,GAAGP,MAAM,CAAC,IAAD,CAA1B;AACAD,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,SAAS;AAETC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,MAAAA,iBAAiB,EAAjBA;AAAF,KAAZ;AAEH,GALQ,EAKN,CAACA,iBAAD,CALM,CAAT;;AAMA,MAAME,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,QAAMG,KAAK,GAAGJ,WAAW,CAACK,OAAZ,CAAoBC,QAApB,EAAd;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,OAAN,CAAc,MAAMT,iBAApB,CAArB;;AACA,QAAIQ,YAAJ,EAAkB;AACdP,MAAAA,WAAW,CAACK,OAAZ,CAAoBI,KAApB,CAA0B,CAACF,YAAD,CAA1B;AACH,KAFD,MAEO;AACHP,MAAAA,WAAW,CAACK,OAAZ,CAAoBK,MAApB;AACH;;AACDV,IAAAA,WAAW,CAACK,OAAZ,CAAoBM,QAApB,GAA+BC,SAA/B;AACH,GATD;;AAWA,SACI,4BACI,MAAC,WAAD;AACI,IAAA,EAAE,EAAEd,EADR;AAEI,IAAA,GAAG,EAAEE,WAFT;AAGI,IAAA,YAAY,EAAE,sBAACa,MAAD,EAASC,MAAT,EAAoB;AAC9B,UAAIA,MAAM,CAACC,KAAP,GAAepB,SAAnB,EAA8B;AAC1B,+CAAYkB,MAAZ;AAAoBE,UAAAA,KAAK,EAAEpB;AAA3B;AACH;;AACD,aAAOmB,MAAP;AACH,KARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAcH,CAlCD;;AAoCA,eAAejB,oBAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Transformer } from 'react-konva'\r\n\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    selectedShapeName: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({ id, selectedShapeName }) => {\r\n\r\n    const transformer = useRef(null)\r\n    useEffect(() => {\r\n        checkNode();\r\n\r\n        console.log({ selectedShapeName })\r\n\r\n    }, [selectedShapeName])\r\n    const checkNode = () => {\r\n        const stage = transformer.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            transformer.current.nodes([selectedNode])\r\n        } else {\r\n            transformer.current.detach();\r\n        }\r\n        transformer.current.getLayer().batchDraw();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                id={id}\r\n                ref={transformer}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent"]},"metadata":{},"sourceType":"module"}