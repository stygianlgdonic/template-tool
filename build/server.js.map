{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///./src/utils/defaults.ts","webpack:///external \"react-konva\"","webpack:///external \"react-color\"","webpack:///external \"use-image\"","webpack:///external \"react-router-dom\"","webpack:///./src/contexts/TemplateContext.tsx","webpack:///external \"express\"","webpack:///./src/routes/route_names.tsx","webpack:///external \"@shrugsy/use-immer-state\"","webpack:///external \"use-file-upload\"","webpack:///external \"react-dom/server\"","webpack:///./node_modules/css-loader/dist/runtime/cssWithMappingToString.js","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///external \"sweetalert\"","webpack:///external \"webfontloader\"","webpack:///./src/index.ts","webpack:///./node_modules/tailwindcss/tailwind.css","webpack:///./src/NoSSR.tsx","webpack:///./src/App.tsx","webpack:///./src/server.tsx","webpack:///./src/components/tailwindComponents/SelectVariation.tsx","webpack:///./src/components/tailwindComponents/SaveVariation.tsx","webpack:///./src/utils/svg.ts","webpack:///./src/components/DesignTool/SideBar/index.tsx","webpack:///./src/components/DesignTool/TopToolBar/index.tsx","webpack:///./src/components/DesignTool/Rectangle.tsx","webpack:///./src/components/DesignTool/UCircle.tsx","webpack:///./src/components/DesignTool/UPolygon.tsx","webpack:///./src/components/DesignTool/ULine.tsx","webpack:///./src/components/DesignTool/USvg.tsx","webpack:///./src/components/DesignTool/UText.tsx","webpack:///./src/components/DesignTool/UTransformer.tsx","webpack:///./src/components/DesignTool/UImage.tsx","webpack:///./src/components/DesignTool/MainStage/index.tsx","webpack:///./src/components/tailwindComponents/EditTextBox.tsx","webpack:///./src/components/tailwindComponents/ShapeColorSelector.tsx","webpack:///./src/components/tailwindComponents/SvgColorSelector.tsx","webpack:///./src/components/DesignTool/EditingTools/index.tsx","webpack:///./src/components/DesignTool/index.tsx","webpack:///./src/components/tailwindComponents/PaletteColorSelect.tsx","webpack:///./src/components/SelectPalette/index.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","e","Promise","resolve","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","oe","err","process","nextTick","s","require","stageDimensions","width","height","defaultImage","x","y","draggable","type","defaultSvg","colorMap","defaultRect","stroke","strokeWidth","fill","defaultRoundedRect","cornerRadius","defaultCircle","radius","defaultPolygon","sides","defaultTriangle","points","tension","closed","defaultTextBox","text","fontSize","googleFontsList","INITIAL_STATE","palette","color","variations","face","textBoxes","images","svgs","shapes","id","fillLinearGradientStartPoint","fillLinearGradientEndPoint","fillLinearGradientColorStops","TemplateContext","createContext","TemplateProvider","children","templateData","setTemplateData","goForward","goBack","stepNum","history","useImmerState","Provider","ROUTE_NAMES","select_palette","design_tool","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_i","iterator","_s","_e","_arr","_n","_d","next","done","push","length","_iterableToArrayLimit","minLen","_arrayLikeToArray","toString","slice","constructor","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","item","_item","content","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","concat","sourceMapping","sourceURLs","sources","map","source","sourceRoot","join","cssWithMappingToString","list","this","mediaQuery","dedupe","alreadyImportedModules","app","default","express","use","req","res","handle","listen","console","log","___CSS_LOADER_EXPORT___","NoSSR","isClient","setIsClient","useState","useEffect","DesignTool","React","lazy","SelectPalette","App","exact","path","render","Suspense","fallback","assets","renderApp","context","markup","renderToString","location","url","redirect","html","entrypoint","css","asset","cssLinksFromAssets","extra","js","jsScriptTagsFromAssets","server","disable","static","send","SelectVariation","variationIndex","setVariationIndex","className","index","onClick","role","tabIndex","SaveVariation","handleSaveVariation","variationData","setVariationData","aria-labelledby","aria-modal","aria-hidden","placeholder","onChange","prev","target","style","backgroundColor","parseSVG","svgString","DOMParser","parseFromString","getElementColor","el","getAttribute","SideBar","file","selectFile","useFileUpload","shapeID","Date","getTime","textID","accept","files","reject","reader","FileReader","onload","svgData","result","doc","documentElement","outerHTML","readAsText","error","then","SVG_STRING","svgId","multiple","readAsDataURL","imageID","src","TopToolBar","onUndo","onRedo","selectedId","shapeIndex","split","findIndex","temp","Rectangle","shapeProps","onSelect","onEditClick","shapeRef","useRef","patternImageUrl","restProps","image","useImage","rectWidth","rectHeight","imageWidth","imageHeight","patternScale","Math","max","Fragment","ref","onTap","onDblClick","onDblTap","strokeScaleEnabled","onTransformEnd","node","current","scaleX","scaleY","onDragEnd","fillPatternImage","fillPatternOffset","fillPatternScaleX","fillPatternScaleY","fillPatternRepeat","UCircle","attrs","UPolygon","offset","scale","fillPatternScale","fillPatternOffsetX","fillPatternOffsetY","ULine","USvg","svgProps","elements","getElementsByTagName","element","setAttribute","XMLSerializer","serializeToString","svg","window","UText","textProps","textNode","onTransform","SX","W","setAttrs","TransformerComponent","selectedShapeName","$tr","checkNode","selectedNode","getStage","findOne","nodes","detach","getLayer","batchDraw","ignoreStroke","boundBoxFunc","oldBox","newBox","UImage","imageProps","rest","MainStage","setSelectedId","unSelectAll","handleEditSelectedItem","$stage","$layer","selectionRectRef","selection","visible","x1","y1","x2","y2","nodesArray","setNodes","Konva","updateSelectionRect","min","abs","oldPos","onMouseDown","isElement","findAncestor","isTransformer","pos","getPointerPosition","onMouseUp","selBox","getClientRect","find","forEach","elementNode","elBox","Util","haveIntersection","listenClickTap","onMouseMove","onTouchStart","stage","layer","tr","draw","hasName","metaPressed","evt","shiftKey","ctrlKey","metaKey","isSelected","indexOf","splice","onDragMove","linesArray","destroy","guides","lineGuideStops","itemBounds","resultV","resultH","vertical","lineGuide","itemBound","diff","guide","snap","horizontal","minV","sort","a","b","minH","orientation","getGuides","skipShape","guideItem","box","flat","getLineGuideStops","round","getObjectSnappingEdges","lg","lines","Line","dash","add","drawGuides","filter","rect","undefined","includes","newAttrs","circle","line","polygon","event","parse","EditTextBox","handleCloseEditTextModal","inputValue","setInputValue","setFontSize","fontStyle","setFontStyle","fontFamily","setFontFamily","textAlign","setTextAlign","align","parseInt","val","selected","ShapeColorSelector","currentPalette","handleShapeFill","selectedShape","handleGradientColor","color1","color2","selectedShapeData","opacity","step","parseFloat","hex","SvgColorSelector","currentColor","setCurrentColor","colors","usedColors","handleSvgElementColorChange","oldColor","newColor","EditingTools","isOpenColorPicker","isEditTextBox","handleDeleteSelectedItem","showSaveVariationModal","setShowSaveVariationModal","useContext","setIsOpenColorPicker","setIsEditTextBox","handleEscape","document","addEventListener","WebFont","load","google","families","removeEventListener","swal","Modal","currentSelectedColor","handleColorChange","handleCloseColorPicker","showColorPicker","setShowColorPicker","setCurrentSelectedColor","PaletteColorSelect","handleShowColorPicker","Color","to"],"mappings":"2BACE,IAAIA,EAAmB,GASvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAuEf,OAjEAF,EAAoBQ,EAAI,WACvB,OAAOC,QAAQC,WAIhBV,EAAoBW,EAAIL,EAGxBN,EAAoBY,EAAIb,EAGxBC,EAAoBa,EAAI,SAASX,EAASY,EAAMC,GAC3Cf,EAAoBgB,EAAEd,EAASY,IAClCG,OAAOC,eAAehB,EAASY,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEf,EAAoBqB,EAAI,SAASnB,GACX,oBAAXoB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAehB,EAASoB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAehB,EAAS,aAAc,CAAEsB,OAAO,KAQvDxB,EAAoByB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQxB,EAAoBwB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA7B,EAAoBqB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOxB,EAAoBa,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIR5B,EAAoBgC,EAAI,SAAS7B,GAChC,IAAIY,EAASZ,GAAUA,EAAOwB,WAC7B,WAAwB,OAAOxB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBa,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRf,EAAoBgB,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe7B,KAAK0B,EAAQC,IAGzGlC,EAAoBqC,EAAI,IAGxBrC,EAAoBsC,GAAK,SAASC,GACjCC,QAAQC,UAAS,WAChB,MAAMF,MAMDvC,EAAoBA,EAAoB0C,EAAI,I,gBCrGrDvC,EAAOD,QAAUyC,QAAQ,U,6BCAzB,oVAAO,MAAMC,EAAkB,CAAEC,MAAO,IAAKC,OAAQ,KAExCC,EAAe,CAAEjC,KAAM,SAAUkC,EAAG,IAAKC,EAAG,IAAKJ,MAAO,IAAKC,OAAQ,IAAKI,WAAW,EAAMC,KAAM,SACjGC,EAAa,CAAEtC,KAAM,SAAUuC,SAAU,GAAIF,KAAM,MAAOH,EAAG,IAAKC,EAAG,IAAKJ,MAAO,IAAKC,OAAQ,IAAKI,WAAW,GAC9GI,EAAc,CAAExC,KAAM,SAAUkC,EAAG,IAAKC,EAAG,IAAKJ,MAAO,IAAKU,OAAQ,UAAWC,YAAa,EAAGV,OAAQ,IAAKW,KAAM,UAAWP,WAAW,EAAMC,KAAM,aACpJO,EAAqB,CAAE5C,KAAM,SAAUkC,EAAG,IAAKC,EAAG,IAAKJ,MAAO,IAAKU,OAAQ,UAAWC,YAAa,EAAGV,OAAQ,IAAKa,aAAc,GAAIF,KAAM,UAAWP,WAAW,EAAMC,KAAM,aAC7KS,EAAgB,CAAE9C,KAAM,SAAUkC,EAAG,IAAKC,EAAG,IAAKY,OAAQ,GAAIN,OAAQ,UAAWC,YAAa,EAAGC,KAAM,UAAWP,WAAW,EAAMC,KAAM,UACzIW,EAAiB,CAAEhD,KAAM,SAAUkC,EAAG,IAAKC,EAAG,IAAKc,MAAO,EAAGR,OAAQ,UAAWC,YAAa,EAAGK,OAAQ,GAAIJ,KAAM,UAAWN,KAAM,WACnIa,EAAkB,CAAElD,KAAM,SAAUkC,EAAG,GAAIC,EAAG,IAAKM,OAAQ,UAAWC,YAAa,EAAGC,KAAM,UAAWQ,OAAQ,CAAC,EAAG,IAAK,GAAI,EAAG,IAAK,KAAMC,QAAS,EAAGC,QAAQ,EAAMhB,KAAM,QAC1KiB,EAAiB,CAAEtD,KAAM,SAAUuD,KAAM,WAAYrB,EAAG,IAAKC,EAAG,IAAKqB,SAAU,GAAIpB,WAAW,EAAML,MAAO,IAAKM,KAAM,QACtHoB,EAAkB,CAAC,aAAc,YAAa,kBAAmB,eAAgB,SAAU,gBAAiB,UAAW,SAAU,UAAW,iBAAkB,iBAAkB,SAAU,cAAe,YAAa,UAAW,mBAAoB,UAAW,cAAe,qBAAsB,uB,cCVlTpE,EAAOD,QAAUyC,QAAQ,gB,cCAzBxC,EAAOD,QAAUyC,QAAQ,gB,cCAzBxC,EAAOD,QAAUyC,QAAQ,c,cCAzBxC,EAAOD,QAAUyC,QAAQ,qB,uJCIlB,MAAM6B,EAAgB,CACzBC,QAAS,CACL,CAAE3D,KAAM,UAAW4D,MAAO,WAC1B,CAAE5D,KAAM,YAAa4D,MAAO,WAC5B,CAAE5D,KAAM,WAAY4D,MAAO,YAE/BC,WAAY,CACR,CACI7D,KAAM,WACN8D,KAAM,GAcNC,UAAW,GACXC,OAAQ,GACRC,KAAM,GACNC,OAAQ,CAAC,CACLC,GAAI,oBACJ9B,KAAM,YACNH,EAAG,EACHC,EAAG,EACHJ,MAAOD,IAAgBC,MACvBC,OAAQF,IAAgBE,OAExBoC,6BAA8B,CAAElC,EAAG,EAAGC,EAAG,GACzCkC,2BAA4B,CAAEnC,EAAGJ,IAAgBC,MAAOI,EAAGL,IAAgBE,QAC3EsC,6BAA8B,CAAC,EAAG,UAAW,EAAG,WAChDlC,WAAW,OAMdmC,EAAkBC,wBAAc,MAEhCC,EAAmB,EAAGC,eAE/B,MAAOC,EAAcC,GAAiB,UAAEC,EAAF,OAAaC,EAAb,QAAqBC,EAArB,QAA8BC,IAAaC,wBAAcvB,GAE/F,OACI,EAACa,EAAgBW,SAAjB,CACIxE,MAAO,CAACiE,EAAcC,EAAiB,CAAEC,YAAWC,SAAQC,UAASC,aAEpEN,K,cCzDbrF,EAAOD,QAAUyC,QAAQ,Y,6BCAzB,kCAAO,MAAMsD,EAAc,CACvBC,eAAgB,IAChBC,YAAa,U,cCFjBhG,EAAOD,QAAUyC,QAAQ,6B,cCAzBxC,EAAOD,QAAUyC,QAAQ,oB,cCAzBxC,EAAOD,QAAUyC,QAAQ,qB,6BCEzB,SAASyD,EAAeC,EAAKjG,GAAK,OAUlC,SAAyBiG,GAAO,GAAIC,MAAMC,QAAQF,GAAM,OAAOA,EAVtBG,CAAgBH,IAQzD,SAA+BA,EAAKjG,GAAK,IAAIqG,EAAKJ,IAA0B,oBAAX/E,QAA0B+E,EAAI/E,OAAOoF,WAAaL,EAAI,eAAgB,GAAU,MAANI,EAAY,OAAQ,IAAkDE,EAAIC,EAAlDC,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAmB,IAAM,IAAKN,EAAKA,EAAGlG,KAAK8F,KAAQS,GAAMH,EAAKF,EAAGO,QAAQC,QAAoBJ,EAAKK,KAAKP,EAAGnF,QAAYpB,GAAKyG,EAAKM,SAAW/G,GAA3D0G,GAAK,IAAoE,MAAOvE,GAAOwE,GAAK,EAAMH,EAAKrE,EAAO,QAAU,IAAWuE,GAAsB,MAAhBL,EAAW,QAAWA,EAAW,SAAO,QAAU,GAAIM,EAAI,MAAMH,GAAQ,OAAOC,EAR7aO,CAAsBf,EAAKjG,IAI5F,SAAqCY,EAAGqG,GAAU,IAAKrG,EAAG,OAAQ,GAAiB,iBAANA,EAAgB,OAAOsG,EAAkBtG,EAAGqG,GAAS,IAAIrF,EAAIf,OAAOkB,UAAUoF,SAAShH,KAAKS,GAAGwG,MAAM,GAAI,GAAc,WAANxF,GAAkBhB,EAAEyG,cAAazF,EAAIhB,EAAEyG,YAAY3G,MAAM,GAAU,QAANkB,GAAqB,QAANA,EAAa,OAAOsE,MAAMoB,KAAK1G,GAAI,GAAU,cAANgB,GAAqB,2CAA2C2F,KAAK3F,GAAI,OAAOsF,EAAkBtG,EAAGqG,GAJpTO,CAA4BvB,EAAKjG,IAEnI,WAA8B,MAAM,IAAIyH,UAAU,6IAFuFC,GAMzI,SAASR,EAAkBjB,EAAK0B,IAAkB,MAAPA,GAAeA,EAAM1B,EAAIc,UAAQY,EAAM1B,EAAIc,QAAQ,IAAK,IAAI/G,EAAI,EAAG4H,EAAO,IAAI1B,MAAMyB,GAAM3H,EAAI2H,EAAK3H,IAAO4H,EAAK5H,GAAKiG,EAAIjG,GAAM,OAAO4H,EAMhL7H,EAAOD,QAAU,SAAgC+H,GAC/C,IAAIC,EAAQ9B,EAAe6B,EAAM,GAC7BE,EAAUD,EAAM,GAChBE,EAAaF,EAAM,GAEvB,GAAoB,mBAATG,KAAqB,CAE9B,IAAIC,EAASD,KAAKE,SAASC,mBAAmBC,KAAKC,UAAUN,MACzDO,EAAO,+DAA+DC,OAAON,GAC7EO,EAAgB,OAAOD,OAAOD,EAAM,OACpCG,EAAaV,EAAWW,QAAQC,KAAI,SAAUC,GAChD,MAAO,iBAAiBL,OAAOR,EAAWc,YAAc,IAAIN,OAAOK,EAAQ,UAE7E,MAAO,CAACd,GAASS,OAAOE,GAAYF,OAAO,CAACC,IAAgBM,KAAK,MAGnE,MAAO,CAAChB,GAASgB,KAAK,Q,6BCtBxBhJ,EAAOD,QAAU,SAAUkJ,GACzB,IAAIC,EAAO,GAuDX,OArDAA,EAAK9B,SAAW,WACd,OAAO+B,KAAKN,KAAI,SAAUf,GACxB,IAAIE,EAAUiB,EAAuBnB,GAErC,OAAIA,EAAK,GACA,UAAUW,OAAOX,EAAK,GAAI,MAAMW,OAAOT,EAAS,KAGlDA,KACNgB,KAAK,KAKVE,EAAKjJ,EAAI,SAAUE,EAASiJ,EAAYC,GACf,iBAAZlJ,IAETA,EAAU,CAAC,CAAC,KAAMA,EAAS,MAG7B,IAAImJ,EAAyB,GAE7B,GAAID,EACF,IAAK,IAAIpJ,EAAI,EAAGA,EAAIkJ,KAAKnC,OAAQ/G,IAAK,CAEpC,IAAI6E,EAAKqE,KAAKlJ,GAAG,GAEP,MAAN6E,IACFwE,EAAuBxE,IAAM,GAKnC,IAAK,IAAIwB,EAAK,EAAGA,EAAKnG,EAAQ6G,OAAQV,IAAM,CAC1C,IAAIwB,EAAO,GAAGW,OAAOtI,EAAQmG,IAEzB+C,GAAUC,EAAuBxB,EAAK,MAKtCsB,IACGtB,EAAK,GAGRA,EAAK,GAAK,GAAGW,OAAOW,EAAY,SAASX,OAAOX,EAAK,IAFrDA,EAAK,GAAKsB,GAMdF,EAAKnC,KAAKe,MAIPoB,I,cChETlJ,EAAOD,QAAUyC,QAAQ,e,cCAzBxC,EAAOD,QAAUyC,QAAQ,kB,8DCAzB,2BAEA,IAAI+G,EAAM/G,EAAQ,IAAYgH,QAgBfC,gBACVC,IAAI,CAACC,EAAKC,IAAQL,EAAIM,OAAOF,EAAKC,IAClCE,OAJQzH,IAIK,KACV0H,QAAQC,IAAK,0C,6BCrBrB,6BAGIC,EAHJ,MAG8B,GAA4B,KAE1DA,EAAwBlD,KAAK,CAAC/G,EAAOC,EAAI,qEAAsE,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,qDAAqD,MAAQ,GAAG,SAAW,uCAAuC,eAAiB,CAAC,sEAAsE,WAAa,O,qsBCOlViK,MAVD,EAAG7E,eACb,MAAM,EAAC8E,EAAD,EAAWC,GAAeC,oBAAS,GAMzC,OAJAC,oBAAU,KACNF,GAAY,IACb,IAEID,EAAW9E,EAAW,M,0CCJjC,MAAMkF,EAAaC,IAAMC,KAAK,IAAM,yCAC9BC,EAAgBF,IAAMC,KAAK,IAAM,yCA8BxBE,MA3BH,IACR,EAAC,SAAD,KACI,EAAC,EAAD,KACI,EAAC,IAAD,KACI,EAAC,QAAD,CACIC,OAAO,EACPC,KAAM/E,IAAYC,eAClB+E,OAAQ,IACJ,EAAC,IAAMC,SAAP,CAAgBC,SAAU,6BACtB,EAACN,EAAD,SAIZ,EAAC,QAAD,CACIE,OAAO,EACPC,KAAM/E,IAAYE,YAClB8E,OAAQ,IACJ,EAAC,IAAMC,SAAP,CAAgBC,SAAU,6BACtB,EAACT,EAAD,Y,oBCpB5B,IAAIU,EAGFA,EAASzI,EAAQH,IAInB,MAca6I,EAAY,CAACvB,EAAsBC,KAC9C,MAAMuB,EAAe,GAEfC,EAASC,yBACb,EAAC,eAAD,CAAcF,QAASA,EAASG,SAAU3B,EAAI4B,KAC5C,EAAC,EAAD,QAIJ,GAAIJ,EAAQI,IACV,MAAO,CAAEC,SAAUL,EAAQI,KAmB3B,MAAO,CAAEE,KAfN,uRA5BoB,EAACR,EAAQS,IAC3BT,EAAOS,IAAcT,EAAOS,GAAYC,IAC/CV,EAAOS,GAAYC,IAAI9C,IAAI+C,GACxB,gCAA+BA,OAChC5C,KAAK,IAAW,GA+BV6C,CAAmBZ,EAAQ,8DAGZG,oBA/BM,EAACH,EAAQS,EAAYI,EAAQ,KACnDb,EAAOS,IAAcT,EAAOS,GAAYK,GAC/Cd,EAAOS,GAAYK,GAAGlD,IAAI+C,GACvB,gBAAeA,KAASE,gBACzB9C,KAAK,IAAW,GA4BVgD,CAAuBf,EAAQ,SAAU,kDAQ7CgB,EAASxC,MACZyC,QAAQ,gBACRxC,IAAID,IAAQ0C,OAAO9J,kBACnBpB,IAAI,KAAM,CAAC0I,EAAsBC,KAChC,MAAM,KAAE6B,EAAO,GAAT,SAAaD,GAAW,GAAUN,EAAUvB,EAAKC,GACnD4B,EACF5B,EAAI4B,SAASA,GAEb5B,EAAIwC,KAAKX,KAIAQ,a,mFCtDAI,MAjBS,EAAG7H,aAAY8H,iBAAgBC,uBAG/C,SAAKC,UAAU,QACVhI,EAAWqE,IAAI,CAACf,EAAM2E,IACnB,OACI9K,IAAK8K,EACLD,UAAY,GAAEF,IAAmBG,EAAQ,eAAiB,kGAAkGH,IAAmBG,EAAQ,8BAAgC,KACvNC,QAAS,IAAMH,EAAkBE,GACjCE,KAAK,WACLC,UAAW,GACb9E,EAAKnH,Q,2BCwCRkM,MA7CwB,EAAGC,sBAAqBxH,mBAE3D,MAAOyH,EAAeC,GAAoBpH,wBAAc,CAAEjF,KAAM,WAAY8D,KAAM,YAElF,OACI,SAAK+H,UAAU,qCAAqCS,kBAAgB,cAAcN,KAAK,SAASO,aAAW,QACvG,SAAKV,UAAU,0FACX,SAAKA,UAAU,6DAA6DW,cAAY,SAExF,UAAMX,UAAU,qDAAqDW,cAAY,QAAjF,KAEA,SAAKX,UAAU,4JACX,SAAKA,UAAU,0CACX,SAAKA,UAAU,IACX,yBAAqB,WAAOxJ,KAAK,OAAOoK,YAAY,iBAAiBC,SAAWhN,GAAM2M,EAAiBM,IAAUA,EAAK3M,KAAON,EAAEkN,OAAOlM,UACtI,8BAAmB,SACfmL,UAAU,oCACVgB,MAAO,CAAEC,gBAAiBV,EAActI,SAE5C,4BACCa,EAAahB,QAAQuE,IAAI,CAACf,EAAM2E,IAC7B,SAAK9K,IAAK8K,EAAOD,UAAU,gBACvB,SACIA,UAAU,oCACVgB,MAAO,CAAEC,gBAAiB3F,EAAKvD,OAC/BmI,QAAS,IAAMM,EAAiBM,IAAUA,EAAK7I,KAAOqD,EAAKvD,cAM/E,SAAKiI,UAAU,4DACX,YACIE,QAAS,IAAMI,EAAoBC,GACnC/J,KAAK,SACLwJ,UAAU,6QAHd,a,wBCvCjB,SAASkB,EAASC,GAGrB,OAFe,IAAIC,WACAC,gBAAgBF,EAAW,iBAM3C,SAASG,EAAgBC,GAC5B,OAAOA,EAAGC,aAAa,Q,utBC+HZC,MApIC,EAAG3B,iBAAgB/G,sBAC/B,MAAO2I,EAAMC,GAAcC,0BA6E3B,OACI,aAEI,SAAK5B,UAAU,uBACX,YACIA,UAAU,8JACVE,QAjFS,KACrBnH,EAAiB+H,IACb,IAAIe,GAAU,IAAIC,MAAOC,UACzBjB,EAAK9I,WAAW8H,GAAgBzH,OAAOkC,KAAvC,OAAiD5D,KAAjD,IAA8D2B,GAAK,UAASuJ,EAAQjH,kBA4EhF,mBAKJ,SAAKoF,UAAU,uBACX,YACIA,UAAU,8JACVE,QAhFW,KACvBnH,EAAiB+H,IACb,IAAIe,GAAU,IAAIC,MAAOC,UACzBjB,EAAK9I,WAAW8H,GAAgBzH,OAAOkC,KAAvC,OAAiDtD,KAAjD,IAAgEqB,GAAK,UAASuJ,EAAQjH,kBA2ElF,mBAKJ,SAAKoF,UAAU,uBACX,YACIA,UAAU,8JACVE,QAhFa,KACzBnH,EAAiB+H,IACb,IAAIe,GAAU,IAAIC,MAAOC,UACzBjB,EAAK9I,WAAW8H,GAAgBzH,OAAOkC,KAAvC,OAAiDlD,KAAjD,IAAkEiB,GAAK,UAASuJ,EAAQjH,kBA2EpF,qBAKJ,SAAKoF,UAAU,uBACX,YACIA,UAAU,8JACVE,QAhFY,KACxBnH,EAAiB+H,IACb,IAAIe,GAAU,IAAIC,MAAOC,UACzBjB,EAAK9I,WAAW8H,GAAgBzH,OAAOkC,KAAvC,OAAiDpD,KAAjD,IAAiEmB,GAAK,UAASuJ,EAAQjH,kBA2EnF,qBAKJ,SAAKoF,UAAU,uBACX,YACIA,UAAU,8JACVE,QAhFgB,KAC5BnH,EAAiB+H,IACb,IAAIe,GAAU,IAAIC,MAAOC,UACzBjB,EAAK9I,WAAW8H,GAAgBzH,OAAOkC,KAAvC,OAAiDxD,KAAjD,IAAqEuB,GAAK,UAASuJ,EAAQjH,kBA2EvF,2BAKJ,SAAKoF,UAAU,uBACX,YACIA,UAAU,8JACVE,QA3CS,KACrBnH,EAAiB+H,IACb,IAAIkB,GAAS,IAAIF,MAAOC,UACxBjB,EAAK9I,WAAW8H,GAAgB5H,UAAUqC,KAA1C,OAAoD9C,KAApD,IAAoEa,GAAK,aAAY0J,EAAOpH,kBAsCxF,iBAKJ,SAAKoF,UAAU,uBACX,yBACA,WAAOA,UAAU,GAAGxJ,KAAK,OAAOyL,OAAO,OAAOpB,SApFjChN,IDYtB,IAAgCqO,KCXJrO,EAAEkN,OAAOmB,MDYjC,IAAIpO,QAAQ,CAACC,EAASoO,KACzB,IACI,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUzO,GACtB,IAAI0O,EAAe1O,EAAEkN,OAAOyB,OAExBC,GADS,IAAIrB,WACAC,gBAAgBkB,EAAS,iBAC1CxO,EAAQ0O,EAAIC,gBAAgBC,YAEhCP,EAAOQ,WAAWV,EAAM,IAC1B,MAAOW,GACLV,EAAOU,OCvBgCC,KAAMC,IAE7ChK,EAAiB+H,IACb,IAAIkC,GAAQ,IAAIlB,MAAOC,UACvBjB,EAAK9I,WAAW8H,GAAgB1H,KAAKmC,KAArC,GAEIjC,GAAK,QAAO0K,EAAMpI,WAClBuG,UAAW4B,GACRtM,cA6EX,SAAKuJ,UAAU,uBACX,YACIA,UAAU,8JACVE,QA1EU,KACtByB,EAAW,CAAEM,OAAQ,mCAAoCgB,UAAU,GAC/D,EAAGvB,WAEC,MAAMU,EAAS,IAAIC,WACnBD,EAAOc,cAAcxB,GAErBU,EAAOE,OAAS,KAEZvJ,EAAiB+H,IACb,IAAIqC,GAAU,IAAIrB,MAAOC,UACzBjB,EAAK9I,WAAW8H,GAAgB3H,OAAOoC,KAAvC,OACOnE,KADP,IAEIgN,IAAKhB,EAAOI,OACZlK,GAAK,UAAS6K,EAAQvI,qBA0DlC,mB,qCCjDDyI,MA5EI,EACfC,SACAC,SACAxK,kBACA+G,iBACA0D,gBA0CI,SAAKxD,UAAU,uBACX,SAAKA,UAAU,uBACX,YACIE,QA1CO,KACdsD,GACLzK,EAAiB+H,IACb,MAAM2C,EAAa3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAIC,UACxErI,GAASA,EAAKhD,KAAOkL,GAE1B,GAAIC,EAAc3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAIlJ,OAAS,EAAI,CAErF,MAAMoJ,EAAO9C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,GAEvE3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,GAAc3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,EAAa,GAE/I3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,EAAa,GAAKG,MA+BxE5D,UAAU,+JAFd,mBAKJ,SAAKA,UAAU,uBACX,YACIE,QA9BM,KACbsD,GACLzK,EAAiB+H,IACb,MAAM2C,EAAa3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAIC,UACxErI,GAASA,EAAKhD,KAAOkL,GAI1B,GAAIC,EAAa,EAAG,CAEhB,MAAMG,EAAO9C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,GAEvE3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,GAAc3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,EAAa,GAE/I3C,EAAK9I,WAAW8H,GAAgB0D,EAAWE,MAAM,KAAK,IAAID,EAAa,GAAKG,MAiBxE5D,UAAU,+JAFd,kBAKJ,SAAKA,UAAU,uBACX,YACIE,QAASoD,EACTtD,UAAU,+JAFd,SAKJ,SAAKA,UAAU,uBACX,YACIE,QAASqD,EACTvD,UAAU,+JAFd,U,q0CCID6D,MA9DoB,EAAGC,aAAYC,WAAUlD,WAAUmD,kBAElE,MAAMC,EAAWC,iBAAO,OAElB,gBAAEC,GAAkCL,EAAdM,EAA5B,EAA0CN,EAA1C,IACOO,GAASC,IAASH,GAAmB,MACtCI,EAAYH,EAAUlO,MACtBsO,EAAaJ,EAAUjO,OACvBsO,EAAaJ,EAAQA,EAAMnO,MAAQ,GACnCwO,EAAcL,EAAQA,EAAMlO,OAAS,GACrCwO,EAAeP,EAAUO,cAAgBC,KAAKC,IAChDN,EAAYE,EACZD,EAAaE,GAGjB,OACI,EAAC,IAAMI,SAAP,KACI,EAAC,OAAD,GACIC,IAAKd,EACL/D,QAAS6D,EACTiB,MAAOjB,EACPkB,WAAYjB,EACZkB,SAAUlB,EACVzN,WAAS,EACT4O,oBAAoB,EACpBC,eAAiBvR,IAKb,MAAMwR,EAAOpB,EAASqB,QAChBC,EAASF,EAAKE,SACdC,EAASH,EAAKG,SAGpBH,EAAKE,OAAO,GACZF,EAAKG,OAAO,GACZ3E,EAAS,OACFiD,GADC,IAEJzN,EAAGgP,EAAKhP,IACRC,EAAG+O,EAAK/O,IACRJ,MAAO0O,KAAKC,IAAIQ,EAAKnP,QAAUqP,GAC/BpP,OAAQyO,KAAKC,IAAIQ,EAAKlP,SAAWqP,OAGzCC,UAAY5R,IACRgN,EAAS,OACFiD,GADC,IAEJzN,EAAGxC,EAAEkN,OAAO1K,IACZC,EAAGzC,EAAEkN,OAAOzK,SAGhB8N,EAnCR,CAoCIsB,iBAAkBrB,EAClBsB,kBAAmB,CAAEtP,EAAG,EAAGC,EAAG,GAC9BsP,kBAAmBjB,EACnBkB,kBAAmBlB,EACnBmB,kBAAkB,iB,05BC9BnBC,MA5BkB,EAAGjC,aAAYC,WAAUlD,WAAUmD,iBAG5D,EAAC,IAAMc,SAAP,KACI,EAAC,SAAD,GACI5E,QAAS6D,EACTiB,MAAOjB,EACPkB,WAAYjB,EACZkB,SAAUlB,EACVzN,WAAS,EACT4O,oBAAoB,EACpBC,eAAiBvR,IACbgN,EAAS,KACFhN,EAAEkN,OAAOiF,SAGpBP,UAAY5R,IACRgN,EAAS,OACFiD,GADC,IAEJzN,EAAGxC,EAAEkN,OAAO1K,IACZC,EAAGzC,EAAEkN,OAAOzK,SAGhBwN,K,8yCC4BLmC,MAlDmB,EAAGnC,aAAYC,WAAUlD,WAAUmD,kBAAkB,QAEnF,MAAMC,EAAWC,iBAAO,OAElB,gBAAEC,GAAkCL,EAAdM,EAA5B,EAA0CN,EAA1C,IACOO,GAASC,IAASH,GAAmB,MAEtCM,GADYL,EAAUlN,OACTmN,EAAQA,EAAMnO,MAAQ,IACnCwO,EAAcL,EAAQA,EAAMlO,OAAS,GAO3C,OANAoH,QAAQC,IAAI,CAAEiH,aAAYC,cAAawB,OAAQjC,SAAF,UAAEA,EAAUqB,eAAZ,aAAE,EAAmBK,oBAAqBQ,MAAOlC,SAAF,UAAEA,EAAUqB,eAAZ,aAAE,EAAmBc,qBAO7G,EAAC,IAAMtB,SAAP,KACI,EAAC,iBAAD,GACIC,IAAKd,EACL/D,QAAS6D,EACTiB,MAAOjB,EACPkB,WAAYjB,EACZkB,SAAUlB,EACVzN,WAAS,EACT4O,oBAAoB,EACpBM,UAAY5R,IACRgN,EAAS,OACFiD,GADC,IAEJzN,EAAGxC,EAAEkN,OAAO1K,IACZC,EAAGzC,EAAEkN,OAAOzK,QAGpB8O,eAAiBvR,IACbgN,EAAS,OACFiD,GADC,IAEJyB,OAAQ1R,EAAEkN,OAAOiF,MAAMT,OACvBC,OAAQ3R,EAAEkN,OAAOiF,MAAMR,YAG3BpB,EAtBR,CAuBIsB,iBAAkBrB,EAClBgC,mBAAoB,EACpBC,mBAAoB,EACpBV,kBAAmB,GACnBC,kBAAmB,GACnBC,kBAAkB,iB,65BCvBnBS,OAvBgB,EAAGzC,aAAYC,WAAUlD,WAAUmD,iBAG1D,EAAC,IAAMc,SAAP,KACI,EAAC,OAAD,GACI5E,QAAS6D,EACTiB,MAAOjB,EACPkB,WAAYjB,EACZkB,SAAUlB,EACVzN,WAAS,EACT4O,oBAAoB,EACpBM,UAAY5R,IACRgN,EAAS,SACFiD,GADC,IAEJzN,EAAGxC,EAAEkN,OAAO1K,IACZC,EAAGzC,EAAEkN,OAAOzK,SAGhBwN,K,sOCIL0C,OApBe,EAAGC,WAAU5F,WAAUkD,WAAUC,kBAE3D,MAAOK,GAASC,KPeKvO,EAMlB,SAAuBoL,EAAW9E,GAGrC,MAAMoG,EAAMvB,EAASC,GACrB,IAAIuF,EAAWjE,EAAIkE,qBAAqB,KAExC,IAAK,MAAMC,KAAWF,EAAU,CAC5B,MAAM3O,EAAQuJ,EAAgBsF,GAC1BvK,EAAItE,IACJ6O,EAAQC,aAAa,OAAQxK,EAAItE,IAKzC,OAFoB,IAAI+O,eACEC,kBAAkBtE,GOlCNuE,CAAkBP,EAAStF,UAAWsF,EAAS/P,UPiB9E,6BADKuQ,OAAOvL,KAAKE,SAASC,mBAAmB9F,OADjD,IAAkBA,EObrB,OACI,qBACI,GAAC,QAAD,MACQ0Q,EADR,CAEIpC,MAAOA,EACPnE,QAAS6D,EACTiB,MAAOjB,EACPkB,WAAYjB,EACZkB,SAAUlB,EACVyB,UAAW5E,EACXuE,eAAgBvE,O,sOCOjBqG,OA9BD,EAAGC,YAAWtG,WAAUkD,WAAUC,kBAC5C,MAAMoD,EAAWlD,iBAAO,MAExB,OACI,GAAC,OAAD,IACIa,IAAKqC,EACL7Q,WAAS,EACT2J,QAAS6D,EACTiB,MAAOjB,EACPkB,WAAYjB,EACZkB,SAAUlB,EACVqD,YAAcxT,IACV,IAAIyT,EAAKF,EAAS9B,QAAQC,SACtBgC,EAAIH,EAAS9B,QAAQpP,QAEzBkR,EAAS9B,QAAQkC,SAAS,CAGtBtR,MAAOqR,EAAID,EACX/B,OAAQ,EACRC,OAAQ,KAIhBC,UAAW5E,GACPsG,K,ktBCkBDM,OAlC+B,EAAGnP,KAAIoP,oBAAmBC,UAEpE7J,oBAAU,KACN8J,KACD,CAACF,IACJ,MAAME,EAAY,KACd,MACMC,EADQF,EAAIrC,QAAQwC,WACCC,QAAQ,IAAML,GACrCG,EACAF,EAAIrC,QAAQ0C,MAAM,CAACH,IAEnBF,EAAIrC,QAAQ2C,SAEhBN,EAAIrC,QAAQ4C,WAAWC,aAG3B,OACI,qBACI,GAAC,cAAD,CACI7P,GAAIA,EACJyM,IAAK4C,EACLS,cAAc,EACdC,aAAc,CAACC,EAAQC,IACO,sBAAtBb,EAAkDY,EAClDC,EAAOrS,MAjCN,GAkCD,SAAYoS,GAAZ,IAAoBpS,MAlCnB,KAoCEqS,M,gnBCTZC,OApBiB,EAAGC,aAAY5H,WAAUkD,eAErD,MAAOM,GAASC,IAASmE,EAAWrF,MAE9B,IAAEA,GAAiBqF,EAATC,EAAhB,GAAyBD,EAAzB,IACA,OACI,qBACI,GAAC,QAAD,MACQC,EADR,CAEIrE,MAAOA,EACPnE,QAAS,IAAM6D,EAAS0E,EAAWnQ,IACnC0M,MAAO,IAAMjB,EAAS0E,EAAWnQ,IACjCmN,UAAW5E,EACXuE,eAAgBvE,O,m6BCwfjB8H,OAjgBG,EACd7P,eACAC,kBACA+G,iBACA0D,aACAoF,gBACAC,cACAC,6BACE,0BAEF,MACMC,EAAS7E,iBAAO,MAChB8E,EAAS9E,iBAAO,MAChByD,EAAMzD,iBAAO,MACb+E,EAAmB/E,iBAAO,MAC1BgF,EAAYhF,iBAAO,CACrBiF,SAAS,EACTC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,KAGF,EAACC,EAAD,EAAaC,GAAY5L,mBAAS,IAClC6L,EAAQzC,OAAOyC,MAsOfC,EAAsB,KACxB,MAAMtE,EAAO4D,EAAiB3D,QAC9BD,EAAKmC,SAAS,CACV2B,QAASD,EAAU5D,QAAQ6D,QAC3B9S,EAAGuO,KAAKgF,IAAIV,EAAU5D,QAAQ8D,GAAIF,EAAU5D,QAAQgE,IACpDhT,EAAGsO,KAAKgF,IAAIV,EAAU5D,QAAQ+D,GAAIH,EAAU5D,QAAQiE,IACpDrT,MAAO0O,KAAKiF,IAAIX,EAAU5D,QAAQ8D,GAAKF,EAAU5D,QAAQgE,IACzDnT,OAAQyO,KAAKiF,IAAIX,EAAU5D,QAAQ+D,GAAKH,EAAU5D,QAAQiE,IAC1DzS,KAAM,2BAEVuO,EAAK6C,WAAWC,aAGd2B,EAAS9L,IAAMkG,OAAO,MA6F5B,OACI,GAAC,QAAD,IACIa,IAAKgE,EACLgB,YA/FalW,IACjB,MAAMmW,EAAYnW,EAAEkN,OAAOkJ,aAAa,uBAClCC,EAAgBrW,EAAEkN,OAAOkJ,aAAa,eAC5C,GAAID,GAAaE,EACb,OAGJ,MAAMC,EAAMtW,EAAEkN,OAAO+G,WAAWsC,qBAChClB,EAAU5D,QAAQ6D,SAAU,EAC5BD,EAAU5D,QAAQ8D,GAAKe,EAAI9T,EAC3B6S,EAAU5D,QAAQ+D,GAAKc,EAAI7T,EAC3B4S,EAAU5D,QAAQgE,GAAKa,EAAI9T,EAC3B6S,EAAU5D,QAAQiE,GAAKY,EAAI7T,EAC3BqT,KAmFIU,UAtEU,KAEd,GADAP,EAAOxE,QAAU,MACZ4D,EAAU5D,QAAQ6D,QACnB,OAEJ,MAAMmB,EAASrB,EAAiB3D,QAAQiF,gBAElC7D,EAAW,GACjBsC,EAAO1D,QAAQkF,KAAK,WAAWC,QAASC,IACpC,MAAMC,EAAQD,EAAYH,gBACtBb,EAAMkB,KAAKC,iBAAiBP,EAAQK,IACpCjE,EAASnM,KAAKmQ,KAGtB/C,EAAIrC,QAAQ0C,MAAMtB,GAClBwC,EAAU5D,QAAQ6D,SAAU,EAE5BO,EAAMoB,gBAAiB,EACvBnB,KAqDIoB,YAjFalX,IACjB,IAAKqV,EAAU5D,QAAQ6D,QACnB,OAEJ,MAAMgB,EAAMtW,EAAEkN,OAAO+G,WAAWsC,qBAChClB,EAAU5D,QAAQgE,GAAKa,EAAI9T,EAC3B6S,EAAU5D,QAAQiE,GAAKY,EAAI7T,EAC3BqT,KA2EIqB,aA3HenX,IAEIA,EAAEkN,SAAWlN,EAAEkN,OAAO+G,aAEzCe,IACAlB,EAAIrC,QAAQ0C,MAAM,IAClByB,EAAS,MAsHTvJ,QApDYrM,IAEhB,GAAIoV,EAAiB3D,QAAQ6D,UACzB,OAEJ,IAAI8B,EAAQpX,EAAEkN,OAAO+G,WACjBoD,EAAQlC,EAAO1D,QACf6F,EAAKxD,EAAIrC,QAEb,GAAIzR,EAAEkN,SAAWkK,EAKb,OAJApC,IACAY,EAAS,IACT0B,EAAGnD,MAAM,SACTkD,EAAME,OAKV,IAAKvX,EAAEkN,OAAOsK,QAAQ,WAClB,OAIJ,MAAMC,EAAczX,EAAE0X,IAAIC,UAAY3X,EAAE0X,IAAIE,SAAW5X,EAAE0X,IAAIG,QACvDC,EAAaR,EAAGnD,QAAQ4D,QAAQ/X,EAAEkN,SAAW,EAEnD,GAAKuK,GAAgBK,GAId,GAAIL,GAAeK,EAAY,CAGlC,MAAM3D,EAAQmD,EAAGnD,QAAQnN,QAEzBmN,EAAM6D,OAAO7D,EAAM4D,QAAQ/X,EAAEkN,QAAS,GACtCoK,EAAGnD,MAAMA,QACN,GAAIsD,IAAgBK,EAAY,CAEnC,MAAM3D,EAAQmD,EAAGnD,QAAQ/L,OAAO,CAACpI,EAAEkN,SACnCoK,EAAGnD,MAAMA,SAXTmD,EAAGnD,MAAM,CAACnU,EAAEkN,SAahBmK,EAAME,SAWEnV,KAEJ,GAAC,QAAD,CACI8O,IAAKiE,EACL8C,WA1MQjY,IAChB,MAAMkY,EAAa/C,EAAO1D,QAAQkF,KAAK,cACjCuB,EAAWvR,QACbuR,EAAWtB,QAAQnP,GAAQA,EAAK0Q,WAEpC,MAEMC,EA1FQ,EAACC,EAAgBC,KAC/B,MAAMC,EAAU,GACVC,EAAU,GAEhBH,EAAeI,SAAS7B,QAAQ8B,IAC5BJ,EAAWG,SAAS7B,QAAQ+B,IACxB,MAAMC,EAAO7H,KAAKiF,IAAI0C,EAAYC,EAAUE,OAExCD,EArFS,GAsFTL,EAAQ7R,KAAK,CACTgS,UAAWA,EACXE,KAAMA,EACNE,KAAMH,EAAUG,KAChBzG,OAAQsG,EAAUtG,aAMlCgG,EAAeU,WAAWnC,QAAQ8B,IAC9BJ,EAAWS,WAAWnC,QAAQ+B,IAC1B,MAAMC,EAAO7H,KAAKiF,IAAI0C,EAAYC,EAAUE,OACxCD,EAnGS,GAoGTJ,EAAQ9R,KAAK,CACTgS,UAAWA,EACXE,KAAMA,EACNE,KAAMH,EAAUG,KAChBzG,OAAQsG,EAAUtG,aAMlC,MAAM+F,EAAS,GAGTY,EAAOT,EAAQU,KAAK,CAACC,EAAGC,IAAMD,EAAEN,KAAOO,EAAEP,MAAM,GAC/CQ,EAAOZ,EAAQS,KAAK,CAACC,EAAGC,IAAMD,EAAEN,KAAOO,EAAEP,MAAM,GAiBrD,OAhBII,GACAZ,EAAO1R,KAAK,CACRgS,UAAWM,EAAKN,UAChBrG,OAAQ2G,EAAK3G,OACbgH,YAAa,IACbP,KAAME,EAAKF,OAGfM,GACAhB,EAAO1R,KAAK,CACRgS,UAAWU,EAAKV,UAChBrG,OAAQ+G,EAAK/G,OACbgH,YAAa,IACbP,KAAMM,EAAKN,OAGZV,GAoCQkB,CAvJOC,KACtB,MAAMd,EAAgB,CAAC,EAAGrW,IAAgBC,MAAQ,EAAGD,IAAgBC,OAC/D0W,EAAkB,CAAC,EAAG3W,IAAgBE,OAAS,EAAGF,IAAgBE,QAYxE,OATA4S,EAAOzD,QAAQkF,KAAK,WAAWC,QAAQ4C,IACnC,GAAIA,IAAcD,EACd,OAEJ,MAAME,EAAMD,EAAU9C,gBAEtB+B,EAAS/R,KAAK,CAAC+S,EAAIjX,EAAGiX,EAAIjX,EAAIiX,EAAIpX,MAAOoX,EAAIjX,EAAIiX,EAAIpX,MAAQ,IAC7D0W,EAAWrS,KAAK,CAAC+S,EAAIhX,EAAGgX,EAAIhX,EAAIgX,EAAInX,OAAQmX,EAAIhX,EAAIgX,EAAInX,OAAS,MAE9D,CACHmW,SAAUA,EAASiB,OACnBX,WAAYA,EAAWW,SAqIJC,CAAkB3Z,EAAEkN,QAjIhBsE,KAC3B,MAAMiI,EAAMjI,EAAKkF,gBAEjB,MAAO,CACH+B,SAAU,CACN,CACII,MAAO9H,KAAK6I,MAAMH,EAAIjX,GACtB6P,OAAQtB,KAAK6I,MAAMpI,EAAKhP,IAAMiX,EAAIjX,GAClCsW,KAAM,SAEV,CACID,MAAO9H,KAAK6I,MAAMH,EAAIjX,EAAIiX,EAAIpX,MAAQ,GACtCgQ,OAAQtB,KAAK6I,MAAMpI,EAAKhP,IAAMiX,EAAIjX,EAAIiX,EAAIpX,MAAQ,GAClDyW,KAAM,UAEV,CACID,MAAO9H,KAAK6I,MAAMH,EAAIjX,EAAIiX,EAAIpX,OAC9BgQ,OAAQtB,KAAK6I,MAAMpI,EAAKhP,IAAMiX,EAAIjX,EAAIiX,EAAIpX,OAC1CyW,KAAM,QAGdC,WAAY,CACR,CACIF,MAAO9H,KAAK6I,MAAMH,EAAIhX,GACtB4P,OAAQtB,KAAK6I,MAAMpI,EAAK/O,IAAMgX,EAAIhX,GAClCqW,KAAM,SAEV,CACID,MAAO9H,KAAK6I,MAAMH,EAAIhX,EAAIgX,EAAInX,OAAS,GACvC+P,OAAQtB,KAAK6I,MAAMpI,EAAK/O,IAAMgX,EAAIhX,EAAIgX,EAAInX,OAAS,GACnDwW,KAAM,UAEV,CACID,MAAO9H,KAAK6I,MAAMH,EAAIhX,EAAIgX,EAAInX,QAC9B+P,OAAQtB,KAAK6I,MAAMpI,EAAK/O,IAAMgX,EAAIhX,EAAIgX,EAAInX,QAC1CwW,KAAM,UA+FCe,CAAuB7Z,EAAEkN,SAEvCkL,EAAOzR,SAlCGyR,KACfA,EAAOxB,QAAQkD,IACX,GAAuB,MAAnBA,EAAGT,YAAqB,CACxB,MAAMU,EAAQ,IAAIlE,EAAMmE,KAAK,CACzBvW,OAAQ,EAAE,IAAMqW,EAAGpB,UAAW,IAAMoB,EAAGpB,WACvC3V,OAAQ,mBACRC,YAAa,EACb1C,KAAM,YACN2Z,KAAM,CAAC,EAAG,KAEd9E,EAAO1D,QAAQyI,IAAIH,GACnB5E,EAAO1D,QAAQ6C,iBACZ,GAAuB,MAAnBwF,EAAGT,YAAqB,CAC/B,MAAMU,EAAQ,IAAIlE,EAAMmE,KAAK,CACzBvW,OAAQ,CAACqW,EAAGpB,WAAY,IAAMoB,EAAGpB,UAAW,KAC5C3V,OAAQ,mBACRC,YAAa,EACb1C,KAAM,YACN2Z,KAAM,CAAC,EAAG,KAEd9E,EAAO1D,QAAQyI,IAAIH,GACnB5E,EAAO1D,QAAQ6C,gBAgBvB6F,CAAW/B,GACXA,EAAOxB,QAAQkD,IACX,OAAQA,EAAGhB,MACP,IAAK,QAeL,IAAK,SAeL,IAAK,MACD,OAAQgB,EAAGT,aACP,IAAK,IACDrZ,EAAEkN,OAAO1K,EAAEsX,EAAGpB,UAAYoB,EAAGzH,QAC7B,MAEJ,IAAK,IACDrS,EAAEkN,OAAOzK,EAAEqX,EAAGpB,UAAYoB,EAAGzH,QAC7B,MAEJ,QACI,OAER,MAEJ,QACI,YA+IJT,UA1IO5R,IACf,MAAMkY,EAAa/C,EAAO1D,QAAQkF,KAAK,cACjCuB,EAAWvR,QACbuR,EAAWtB,QAAQnP,GAAQA,EAAK0Q,WAEpChD,EAAO1D,QAAQ6C,cAkIX,UAKKrP,EAAad,WAAW8H,GAAgBzH,cAL7C,iBAKK,EAAgD4V,OAAO3S,GAAsB,cAAdA,EAAK9E,aALzE,aAKK,EAA2F6F,IAAI,CAAC6R,EAAMza,IAE/F,GAAC,EAAD,CACI0B,IAAK1B,EACLqQ,WAAYoK,EACZnK,SAAWlQ,IACP,QAAkBsa,IAAdta,EAAEyR,QAAuB,CACzB,IAAI1B,EAAO4F,EACNA,EAAW4E,SAASva,EAAEyR,UAAU1B,EAAKrJ,KAAK1G,EAAEyR,SACjDmE,EAAS7F,GACT+D,EAAIrC,QAAQ0C,MAAMwB,GAClB7B,EAAIrC,QAAQ0C,MAAMwB,GAClB7B,EAAIrC,QAAQ4C,WAAWC,YAE3BS,EAAcsF,EAAK5V,KAKvB0L,YAAa8E,EACbjI,SAAWwN,IACPtV,EAAiB+H,IACb,MAAMb,EAAQa,EAAK9I,WAAW8H,GAAgBzH,OAAOsL,UAAUrI,GAAQA,EAAKhD,KAAO4V,EAAK5V,IACxFwI,EAAK9I,WAAW8H,GAAgBzH,OAAO4H,GAASoO,QA5BxE,UAkCKvV,EAAad,WAAW8H,GAAgBzH,cAlC7C,iBAkCK,EAAgD4V,OAAO3S,GAAsB,WAAdA,EAAK9E,aAlCzE,aAkCK,EAAwF6F,IAAI,CAACiS,EAAQ7a,IAE9F,GAAC,EAAD,CACI0B,IAAK1B,EACLqQ,WAAYwK,EACZvK,SAAU,KACN6E,EAAc0F,EAAOhW,KAEzB0L,YAAa8E,EACbjI,SAAWwN,IACPtV,EAAiB+H,IACb,MAAMb,EAAQa,EAAK9I,WAAW8H,GAAgBzH,OAAOsL,UAAUrI,GAAQA,EAAKhD,KAAOgW,EAAOhW,IAC1FwI,EAAK9I,WAAW8H,GAAgBzH,OAAO4H,GAASoO,QA9CxE,UAoDKvV,EAAad,WAAW8H,GAAgBzH,cApD7C,iBAoDK,EAAgD4V,OAAO3S,GAAsB,SAAdA,EAAK9E,aApDzE,aAoDK,EAAsF6F,IAAI,CAACkS,EAAM9a,IAE1F,GAAC,GAAD,CACI0B,IAAK1B,EACLqQ,WAAYyK,EACZxK,SAAU,KACN6E,EAAc2F,EAAKjW,KAEvB0L,YAAa8E,EACbjI,SAAWwN,IACPtV,EAAiB+H,IACb,MAAMb,EAAQa,EAAK9I,WAAW8H,GAAgBzH,OAAOsL,UAAUrI,GAAQA,EAAKhD,KAAOiW,EAAKjW,IACxFwI,EAAK9I,WAAW8H,GAAgBzH,OAAO4H,GAASoO,QAhExE,UAsEKvV,EAAad,WAAW8H,GAAgBzH,cAtE7C,iBAsEK,EAAgD4V,OAAO3S,GAAsB,YAAdA,EAAK9E,aAtEzE,aAsEK,EAAyF6F,IAAI,CAACmS,EAAS/a,IAEhG,GAAC,EAAD,CACI0B,IAAK1B,EACLqQ,WAAY0K,EACZzK,SAAU,KACN6E,EAAc4F,EAAQlW,KAE1B0L,YAAa8E,EACbjI,SAAWwN,IACPtV,EAAiB+H,IACb,MAAMb,EAAQa,EAAK9I,WAAW8H,GAAgBzH,OAAOsL,UAAUrI,GAAQA,EAAKhD,KAAOkW,EAAQlW,IAC3FwI,EAAK9I,WAAW8H,GAAgBzH,OAAO4H,GAASoO,QAlFxE,UAwFKvV,EAAad,WAAW8H,GAAgB1H,YAxF7C,aAwFK,EAA8CiE,IAAI,CAACf,EAAM2E,IACtD,GAAC,GAAD,CACI9K,IAAK8K,EACLwG,SAAUnL,EACVyI,SAAU,KACN6E,EAActN,EAAKhD,KAEvB0L,YAAa8E,EACbjI,SAAW4N,GAAU1V,EAAiB+H,IAClCA,EAAK9I,WAAW8H,GAAgB1H,KAAK6H,GAArC,SACOa,EAAK9I,WAAW8H,GAAgB1H,KAAK6H,IACrCnE,KAAK4S,MAAM5S,KAAKC,UAAU0S,EAAM1N,OAAOiF,cAnG9D,UAwGKlN,EAAad,WAAW8H,GAAgB3H,cAxG7C,aAwGK,EAAgDkE,IAAI,CAACf,EAAM2E,IACxD,GAAC,GAAD,CACI9K,IAAK8K,EACLwI,WAAYnN,EACZyI,SAAU,KACN6E,EAActN,EAAKhD,KAEvBuI,SAAW4N,GAAU1V,EAAiB+H,IAClCA,EAAK9I,WAAW8H,GAAgB3H,OAAO8H,GAAvC,SACOa,EAAK9I,WAAW8H,GAAgB3H,OAAO8H,IACvCnE,KAAK4S,MAAM5S,KAAKC,UAAU0S,EAAM1N,OAAOiF,cAlH9D,UAuHKlN,EAAad,WAAW8H,GAAgB5H,iBAvH7C,aAuHK,EAAmDmE,IAAI,CAACf,EAAM2E,IAC3D,GAAC,GAAD,CACI9K,IAAK8K,EACLkH,UAAW7L,EACXyI,SAAU,KACN6E,EAActN,EAAKhD,KAEvB0L,YAAa8E,EACbjI,SAAW4N,GAAU1V,EAAiB+H,IAClCA,EAAK9I,WAAW8H,GAAgB5H,UAAU+H,GAA1C,MAAwDwO,EAAM1N,OAAOiF,YAIjF,GAAC,GAAD,CACI1N,GAAK,KAAIkL,EACTmE,IAAKA,EACLD,kBAAmBlE,IAEvB,GAAC,OAAD,CAAM1M,KAAK,oBAAoBiO,IAAKkE,O,qBC7ZrC0F,OAjGsB,EAAGnL,aAAY1D,iBAAgBhH,eAAcC,kBAAiB6V,+BAE/F,MAAM,EAACC,EAAD,EAAaC,GAAiBjR,mBAAiB,KAC/C,EAAClG,EAAD,EAAWoX,GAAelR,mBAAiB,KAC3C,EAACmR,EAAD,EAAYC,GAAgBpR,mBAAiB,WAC7C,EAACqR,EAAD,EAAaC,GAAiBtR,mBAASjG,IAAgB,KACvD,EAACwX,EAAD,EAAYC,GAAgBxR,mBAAS,QAE3CC,oBAAU,KACN,GAAkC,eAA9B0F,aAAA,EAAAA,EAAYE,MAAM,KAAK,IAAoB,CAC3C,MAAMzD,EAAQnH,EAAad,WAAW8H,GAAgB5H,UAAUyL,UAAUrI,GAAQA,EAAKhD,KAAOkL,GAC9FsL,EAAchW,EAAad,WAAW8H,GAAgB5H,UAAU+H,GAAOvI,MACvEqX,EAAYjW,EAAad,WAAW8H,GAAgB5H,UAAU+H,GAAOtI,UACrEwX,EAAcrW,EAAad,WAAW8H,GAAgB5H,UAAU+H,GAAOiP,YACvEG,EAAavW,EAAad,WAAW8H,GAAgB5H,UAAU+H,GAAOqP,SAE3E,CAAC9L,IAcJ,OACI,UAAKxD,UAAU,4JACX,UAAKA,UAAU,0CACX,UAAKA,UAAU,IACX,0BACA,YAAOA,UAAU,cAAcxJ,KAAK,SAAS3B,MAAO8C,EAAUkJ,SAAUhN,GAAKkb,EAAYQ,SAAS1b,EAAEkN,OAAOlM,UAC3G,kCACA,aAAQmL,UAAU,cAAc7L,KAAK,aAAa0M,SAAUhN,GAAKob,EAAapb,EAAEkN,OAAOlM,QACnF,aAAQA,MAAM,UAAd,UACA,aAAQA,MAAM,QAAd,QACA,aAAQA,MAAM,UAAd,UACA,aAAQA,MAAM,eAAd,gBAEJ,sCACA,aAAQmL,UAAU,cAAc7L,KAAK,aAAa0M,SAAUhN,GAAKwb,EAAaxb,EAAEkN,OAAOlM,QACnF,aAAQA,MAAM,QAAd,QACA,aAAQA,MAAM,UAAd,UACA,aAAQA,MAAM,SAAd,UAEJ,mCACA,aACIA,MAAOqa,EACPlO,MAAO,CAAEkO,WAAYA,GACrBrO,SAAUhN,GAAKsb,EAActb,EAAEkN,OAAOlM,OACtCmL,UAAU,eAETpI,IAAgByE,IAAI,CAACmT,EAAKvP,IAEnB,aACID,UAAU,sBACVgB,MAAO,CAAEkO,WAAYM,GACrBra,IAAK8K,EACLwP,SAAUD,IAAQN,EAClBra,MAAO2a,GAENA,MAMrB,UAAKxP,UAAU,IACX,eACIA,UAAU,qBACVgB,MAAO,CACHkO,WAAYA,EACZvX,SAAUA,EACVqX,UAAWA,EACXI,UAAWA,GAEfva,MAAOga,EACPhO,SAAWhN,GAAMib,EAAcjb,EAAEkN,OAAOlM,WAIpD,UAAKmL,UAAU,4DACX,aACIE,QArEG,KACfnH,EAAgB+H,IACZ,MAAMb,EAAQa,EAAK9I,WAAW8H,GAAgB5H,UAAUyL,UAAUrI,GAAQA,EAAKhD,KAAOkL,GACtF1C,EAAK9I,WAAW8H,GAAgB5H,UAAU+H,GAAOvI,KAAOmX,EACxD/N,EAAK9I,WAAW8H,GAAgB5H,UAAU+H,GAAOtI,SAAWA,EAC5DmJ,EAAK9I,WAAW8H,GAAgB5H,UAAU+H,GAAO+O,UAAYA,EAC7DlO,EAAK9I,WAAW8H,GAAgB5H,UAAU+H,GAAOiP,WAAaA,EAC9DpO,EAAK9I,WAAW8H,GAAgB5H,UAAU+H,GAAOqP,MAAQF,IAE7DR,KA6DYpY,KAAK,SACLwJ,UAAU,6QAHd,W,6BCuJD0P,OA3O6B,EACxClM,aACA1K,eACAC,kBACA+G,iBACA6P,qBAEA,MAAOjO,EAAMC,GAAcC,0BAgDrBgO,EAAmB7X,IACrBgB,EAAgB+H,IACZ,MAAM+O,EAAgB/O,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACtFqM,EAAc/Y,KAAOiB,EACrB8X,EAAc1L,qBAAkBgK,KAIlC2B,EAAsB,CAACC,EAAgBC,KACzCjX,EAAgB+H,IACZ,MAAM+O,EAAgB/O,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACtFqM,EAAc/Y,KAAO,GACrB+Y,EAAcpX,6BAA+B,CAAC,EAAGsX,EAAQ,EAAGC,GAC5DH,EAActX,6BAA+B,CAAElC,EAAG,EAAGC,EAAG,GACxDuZ,EAAcrX,2BAA6B,CACvCnC,EAAkB,sBAAfmN,EAAqCvN,IAAgBC,MAAQ,IAChEI,EAAkB,sBAAfkN,EAAqCvN,IAAgBE,OAAS,KAErE0Z,EAAc1L,qBAAkBgK,KAuBlC8B,EAAoBnX,EAAad,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GAElG,OACI,UAAKxD,UAAU,4JACX,UAAKA,UAAU,0CACX,UAAKA,UAA0B,sBAAfwD,EAAqC,GAAK,UACtD,8BACA,YACIxD,UAAU,cACVxJ,KAAK,SACLoT,IAAK,EACL/U,MAAOob,aAAF,EAAEA,EAAmBpZ,YAC1BgK,SAjFYhN,IAC5BkF,EAAgB+H,IACUA,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACxE3M,YAAc0Y,SAAS1b,EAAEkN,OAAOlM,YAgFtC,8BACA,YACImL,UAAU,cACVxJ,KAAK,SACL3B,MAAOob,aAAF,EAAEA,EAAmBjZ,aAC1B6J,SAjFOhN,IACvBkF,EAAgB+H,IACUA,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACxExM,aAAeuY,SAAS1b,EAAEkN,OAAOlM,YAgFvC,yBACA,YACImL,UAAU,cACVxJ,KAAK,SACL3B,MAAOob,aAAF,EAAEA,EAAmBC,QAC1BC,KAAM,GAAKvG,IAAK,GAAK/E,IAAK,EAC1BhE,SAlFEhN,IAClBkF,EAAgB+H,IACUA,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACxE0M,QAAUE,WAAWvc,EAAEkN,OAAOlM,YAiFpC,4BACA,GAAC,gBAAD,CACIqB,MAAM,QACN6B,MAAOkY,aAAF,EAAEA,EAAmBrZ,OAC1BiK,SAjFO9I,IACvBgB,EAAgB+H,IACUA,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACxE5M,OAASmB,EAAMsY,UAiFzB,UAAKrQ,UAAaiQ,WAAmBvK,iBAAmB,GAAK,UACzD,gCACA,YACI1F,UAAU,cACVxJ,KAAK,SACL3B,MAAOob,aAAF,EAAEA,EAAmB5J,mBAC1B8J,KAAM,GAAKvG,IAAK,GAAK/E,IAAK,EAC1BhE,SApDa,SAsDjB,gCACA,YACIb,UAAU,cACVxJ,KAAK,SACL3B,MAAOob,aAAF,EAAEA,EAAmB3J,mBAC1B6J,KAAM,GAAKvG,IAAK,GAAK/E,IAAK,EAC1BhE,SAxDa,SA0DjB,+BACA,YACIb,UAAU,cACVxJ,KAAK,SACL3B,MAAOob,aAAF,EAAEA,EAAmBrK,kBAC1BuK,KAAM,GAAKvG,IAAK,GAAK/E,IAAK,EAC1BhE,SA9EahN,IAC7BkF,EAAgB+H,IACZA,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,QA8ExD,+BACA,YACIxD,UAAU,cACVxJ,KAAK,SACL3B,MAAOob,aAAF,EAAEA,EAAmBpK,kBAC1BsK,KAAM,GAAKvG,IAAK,GAAK/E,IAAK,EAC1BhE,SAhFY,UAoFpB,cACK8O,EAAetT,IAAI,CAACf,EAAM2E,IACvB,UAAK9K,IAAK8K,EAAOD,UAAU,+DACvB,QAAGA,UAAU,QAAb,UAA4B1E,EAAKnH,MADrC,IAC+C,UACvC6L,UAAU,gCACVgB,MAAO,CAAEC,gBAAiB3F,EAAKvD,OAC/BmI,QAAS,IAAM0P,EAAgBtU,EAAKvD,YAKpD,UAAKiI,UAAU,0BACX,GAAC,gBAAD,CACI9J,MAAM,OACN6B,MAAOkY,aAAF,EAAEA,EAAmBnZ,KAC1B+J,SAAW9I,GAAU6X,EAAgB7X,EAAMsY,SAIvD,UAAKrQ,UAAU,0CACX,UAAKA,UAAU,uBACX,aACIA,UAAU,8JACVE,QArLW,KAC3ByB,EAAW,CAAEM,OAAQ,mCAAoCgB,UAAU,GAC/D,EAAGvB,WAEC,MAAMU,EAAS,IAAIC,WACnBD,EAAOc,cAAcxB,GAErBU,EAAOE,OAAS,KAEZvJ,EAAiB+H,IACb,MAAM+O,EAAgB/O,EAAK9I,WAAW8H,GAAgBzH,OAAOmS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACtFqM,EAAc/Y,KAAO,GACrB+Y,EAAc1L,gBAAkB/B,EAAOI,cAuK3C,kBAMR,UAAKxC,UAAU,0CACX,yBACA,UAAKA,UAAU,oBACX,cACI,uBACA,UAAKA,UAAU,0BACX,GAAC,gBAAD,CACI9J,MAAM,QACN6B,MAAOkY,WAAmBxX,6BACtBwX,aADG,EACHA,EAAmBxX,6BAA6B,GAChD,UACJoI,SAAW9I,GAAU+X,EACjB/X,EAAMsY,IACNJ,WAAmBxX,6BACfwX,aADJ,EACIA,EAAmBxX,6BAA6B,GAChD,eAIpB,cACI,uBACA,UAAKuH,UAAU,0BACX,GAAC,gBAAD,CACI9J,MAAM,QACN6B,MAAOkY,WAAmBxX,6BACtBwX,aADG,EACHA,EAAmBxX,6BAA6B,GAChDwX,aAFG,EAEHA,EAAmBnZ,KACvB+J,SAAW9I,GAAU+X,EACjBG,WAAmBxX,6BACfwX,aADJ,EACIA,EAAmBxX,6BAA6B,GAChDwX,aAFJ,EAEIA,EAAmBnZ,KACvBiB,EAAMsY,a,qBCxK3BC,OA3D2B,EACtC9M,aACA1K,eACAC,kBACA+G,qBAGA,MAAM,EAACyQ,EAAD,EAAeC,GAAmB3S,mBAAS,WAE3C0E,EAAUzJ,EAAad,WAAW8H,GAAgB1H,KAAKoS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GAChFiN,EdPH,SAAmBtP,GAEtB,IAAIuF,EADQxF,EAASC,GACFwF,qBAAqB,KACxC,MAAM+J,EAAa,GACnB,IAAK,MAAM9J,KAAWF,EAAU,CAC5B,MAAM3O,EAAQuJ,EAAgBsF,GAE1B7O,IAAwC,IAA/B2Y,EAAW9E,QAAQ7T,IAC5B2Y,EAAWnW,KAAKxC,GAGxB,OAAO2Y,EcJQ1J,CAAczE,EAAQpB,WAC/BzK,EAAW6L,EAAQ7L,SAEnBia,EAA8B,CAACC,EAAkBC,KACnD9X,EAAgB+H,IACZA,EAAK9I,WAAW8H,GAAgB1H,KAAKoS,KAAKlP,GAAQA,EAAKhD,KAAOkL,GACzD9M,SAASka,GAAYC,KAIlC,OACI,UAAK7Q,UAAU,4JACX,UAAKA,UAAU,0CACX,cACI,sCACCyQ,EAAOpU,IAAI,CAACf,EAAM2E,IACf,UAAK9K,IAAK8K,EAAOD,UAAU,yBACvB,UACIA,UAAU,gCACVgB,MAAO,CAAEC,gBAAiBsB,EAAQ7L,SAAS4E,IAASA,GACpD4E,QAAS,IAAMsQ,EAAgBlV,QAM/C,UAAK0E,UAAauQ,EAAe,GAAK,UACjCzX,EAAahB,QAAQuE,IAAI,CAACf,EAAM2E,IAC7B,UAAK9K,IAAK8K,EAAOD,UAAU,+DACvB,QAAGA,UAAU,QAAb,UAA4B1E,EAAKnH,MADrC,IAC+C,UACvC6L,UAAW,kCAAoCuQ,IAAiBjV,EAAKvD,OAAS,cAC9EiJ,MAAO,CAAEC,gBAAiB3F,EAAKvD,OAC/BmI,QAAS,IAAMyQ,EAA4BJ,EAAcjV,EAAKvD,YAK9E,UAAKiI,UAAauQ,EAAe,yBAA2B,UACxD,GAAC,gBAAD,CACIra,MAAM,OACN6B,MAAOrB,EAAS6Z,IAAiB,UACjC1P,SAAW9I,GAAU4Y,EAA4BJ,EAAcxY,EAAMsY,W,qBCS9ES,OAlEM,EACjBtN,aACAqF,cACAkI,oBACAC,gBACAlY,eACAC,kBACA+G,iBACAgJ,yBACAmI,2BACArC,8BAII,UAAK5O,UAAU,8BACX,UAAKA,UAAU,uBACX,aACIE,QAAS4I,EACT9I,UAAU,+JAFd,SAKJ,UAAKA,UAAU,uBACX,aACIE,QAAS+Q,EACTjR,UAA0B,sBAAfwD,EAAqC,SAAW,+JAF/D,WAKJ,UAAKxD,UAAU,uBACX,aACIE,QAAS2I,EACT7I,UAAU,+JAFd,UAKH+Q,GAAmD,YAA9BvN,aAAA,EAAAA,EAAYE,MAAM,KAAK,KACzC,GAAC,GAAD,CACIF,WAAYA,EACZ1K,aAAcA,EACdC,gBAAiBA,EACjB+G,eAAgBA,EAChB6P,eAAgB7W,EAAahB,UAIpCiZ,GAAmD,UAA9BvN,aAAA,EAAAA,EAAYE,MAAM,KAAK,KACzC,GAAC,GAAD,CACIF,WAAYA,EACZ1K,aAAcA,EACdC,gBAAiBA,EACjB+G,eAAgBA,IAIvBkR,GAAiB,GAAC,GAAD,CACdxN,WAAYA,EACZ1K,aAAcA,EACdC,gBAAiBA,EACjB+G,eAAgBA,EAChB8O,yBAA0BA,K,qBCoH3B7Q,UAvKc,KAEzB,MAAM,EAAC+B,EAAD,EAAiBC,GAAqBlC,mBAAiB,IAEvD,EAACqT,EAAD,EAAyBC,GAA6BtT,oBAAS,IAE/D,EAAC/E,EAAD,EAAeC,EAAf,GAAgC,UAAEC,EAAF,OAAaC,EAAb,QAAqBC,IAAakY,qBAAW1Y,MAC7E,EAAC8K,EAAD,EAAaoF,GAAiB/K,mBAAwB,OACtD,EAACkT,EAAD,EAAoBM,GAAwBxT,oBAAkB,IAC9D,EAACmT,EAAD,EAAgBM,GAAoBzT,oBAAS,GAE7CgL,EAAc,KAChBwI,GAAqB,GACrBC,GAAiB,GACjB1I,EAAc,OAGZ2I,EAAgB1d,IACJ,WAAVA,EAAEsB,KACF0T,KAIR/K,oBAAU,KACN0T,SAASC,iBAAiB,UAAWF,GAAc,GACnDG,IAAQC,KAAK,CACTC,OAAQ,CACJC,SAAU,CAAC,YAAa,eAAgB,kBAAmB,SAAU,gBAAiB,UAAW,SAAU,UAAW,iBAAkB,iBAAkB,SAAU,cAAe,YAAa,UAAW,aAAc,mBAAoB,iBAAkB,UAAW,cAAe,qBAAsB,yBAIhT,KACHL,SAASM,oBAAoB,UAAWP,GAAc,KAE3D,IAEH,MA4BMzI,EAAyB,KACM,cAA7BtF,EAAWE,MAAM,KAAK,GAI1B2N,GAAqB,GAHjBC,GAAiB,IAoBzB,OACI,UAAKtR,UAAU,aACX,UAAKA,UAAU,uEACX,QAAGA,UAAU,sBAAb,oBAGHkR,GACG,GAAC,EAAD,CACIpY,aAAcA,EACdwH,oBAlDaC,IACzBxH,EAAgB+H,IACZA,EAAK9I,WAAW8H,GAAgB3L,KAAOoM,EAAcpM,KACrD2M,EAAK9I,WAAW8H,GAAgB7H,KAAOsI,EAActI,OAEzDkZ,GAA0B,MAiDtB,UAAKnR,UAAU,0BAGX,GAAC,EAAD,CAASF,eAAgBA,EAAgB/G,gBAAiBA,IAG1D,cACI,GAAC,EAAD,CACIuK,OAvEL,KACTsF,GAAiBC,IACnB3P,EAAU,GAAKD,KAsECsK,OApEL,KACTqF,GAAiBC,IACnB3P,EAAWC,QAAQqB,OAAS,GAAMxB,KAmElBD,gBAAiBA,EACjB+G,eAAgBA,EAChB0D,WAAYA,IAEhB,UAAKxD,UAAU,4BACX,GAAC,GAAD,CACIlH,aAAcA,EACdC,gBAAiBA,EACjB+G,eAAgBA,EAChB0D,WAAYA,EACZoF,cAAeA,EACfC,YAAaA,EACbC,uBAAwBA,KAIhC,UAAK9I,UAAU,4BACX,GAAC,EAAD,CACIhI,WAAYc,EAAad,WACzB8H,eAAgBA,EAChBC,kBAAmBA,KAI3B,UAAKC,UAAU,uBACX,aACIA,UAAU,8JACVE,QAAS,IAAMiR,GAA0B,IAF7C,kBAIA,aACInR,UAAU,8JACVE,QAvFG,KACnBpH,EAAad,WAAWwC,OAAS,GACjCzB,EAAgB+H,IACZA,EAAK9I,WAAWuC,KAAKzB,EAAad,WAAW8H,MAC9C,GACHC,EAAkBe,GAASA,EAAO,IAElCiR,IAAK,2CA8EO,uBAQR,UAAK/R,UAAWwD,EAAa,GAAK,UAC9B,GAAC,GAAD,CACIA,WAAYA,EACZqF,YAAaA,EACbkI,kBAAmBA,EACnBC,cAAeA,EACflY,aAAcA,EACdC,gBAAiBA,EACjB+G,eAAgBA,EAChBgJ,uBAAwBA,EACxBmI,yBApFa,KAC7B,MAAMza,EAAOgN,EAAWE,MAAM,KAAK,GACnC3K,EAAgB+H,IACZA,EAAK9I,WAAW8H,GAAgBtJ,GAAQsK,EAAK9I,WAAW8H,GAAgBtJ,GAAMyX,OAC1E3S,GAAQA,EAAKhD,KAAOkL,GAExBqF,OA+EY+F,yBA3Ea,KAC7B0C,GAAiB,W,wGC1CVU,MA3CgB,EAAGC,uBAAsBC,oBAAmBC,6BAEvE,MAAO5B,EAAcC,GAAmBxS,IAAMH,SAAS,WAEvDG,IAAMF,UAAU,KACZ0S,EAAgByB,IACjB,CAACA,IAOJ,OACI,SAAKjS,UAAU,qCAAqCS,kBAAgB,cAAcN,KAAK,SAASO,aAAW,QACvG,SAAKV,UAAU,0FACX,SAAKA,UAAU,6DAA6DW,cAAY,SAExF,UAAMX,UAAU,qDAAqDW,cAAY,QAAjF,KAEA,SAAKX,UAAU,4JACX,SAAKA,UAAU,0CACX,SAAKA,UAAU,0BACX,EAAC,eAAD,CACIjI,MAAOwY,EACP1P,SAAW9I,GAAUyY,EAAgBzY,EAAMsY,SAIvD,SAAKrQ,UAAU,4DACX,YACIE,QAvBL,KACfgS,EAAkB3B,GAClB4B,KAsBoB3b,KAAK,SACLwJ,UAAU,6QAHd,a,2sBC4BT9B,UAxDO,KAElB,MAAM,EAACpF,EAAD,EAAeC,GAAmBqY,qBAAW1Y,MAC7C,EAAC0Z,EAAD,EAAkBC,GAAsBxU,oBAAkB,IAC1D,EAACoU,EAAD,EAAuBK,GAA2BzU,mBAAwB,MAmBhF,OACI,aACKuU,GACG,EAACG,EAAD,CACIN,qBAAsBA,EAAqBla,MAC3Cma,kBAbWna,IACvBgB,EAAgB+H,IACZ,MAAMb,EAAQa,EAAKhJ,QAAQ6L,UAAUrI,GAAQA,EAAKnH,QAAS8d,aAAd,EAAcA,EAAsB9d,OACjF2M,EAAKhJ,QAAQmI,GAAOlI,MAAQA,EAC5Bua,EAAwB,EAAD,KAAML,GAAN,IAA4Bla,MAAOA,QAUlDoa,uBAlBe,KAC3BE,GAAmB,MAoBf,SAAKrS,UAAU,kEACX,OAAGA,UAAU,sBAAb,qCAEHlH,EAAahB,QAAQuE,IAAI,CAACf,EAAM2E,IAC7B,SAAK9K,IAAK8K,EAAOD,UAAU,+DACvB,OAAGA,UAAU,QAAQ1E,EAAKnH,MAD9B,IACwC,SAChC6L,UAAU,gCACVgB,MAAO,CAAEC,gBAAiB3F,EAAKvD,OAC/BmI,QAAS,KAAMsS,OAlCJC,EAkC0BnX,EAjCrD+W,GAAmB,QACnBC,EAAwBG,GAFGA,WAsCvB,SAAKzS,UAAU,uBACX,EAAC,UAAD,CACIA,UAAU,8JACV0S,GAAIpZ,IAAYE,aAFpB","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// The chunk loading function for additional chunks\n \t// Since all referenced chunks are already included\n \t// in this file, this function is empty here.\n \t__webpack_require__.e = function requireEnsure() {\n \t\treturn Promise.resolve();\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","module.exports = require(\"react\");","export const stageDimensions = { width: 500, height: 600 }\r\nexport const ORIGINAL_SVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><g data-name=\"discount(Splash tag)\"><path fill=\"#db5669\" d=\"M45.93,26.39a3.2,3.2,0,0,0-.76,3.79,3.21,3.21,0,0,1-1.83,4.42,3.19,3.19,0,0,0-2.15,3c0,.06,0,.36,0,.39a3.21,3.21,0,0,1-3.4,3.2,3.19,3.19,0,0,0-3.21,2.14,3.2,3.2,0,0,1-4.42,1.83,3.2,3.2,0,0,0-3.79.76,3.2,3.2,0,0,1-4.78,0,3.2,3.2,0,0,0-3.79-.76,3.2,3.2,0,0,1-4.42-1.83,3.18,3.18,0,0,0-3.21-2.14A3.2,3.2,0,0,1,6.8,37.81,3.19,3.19,0,0,0,4.66,34.6a3.2,3.2,0,0,1-1.83-4.42,3.2,3.2,0,0,0-.76-3.79,3.2,3.2,0,0,1,0-4.78,3.2,3.2,0,0,0,.76-3.79A3.2,3.2,0,0,1,4.66,13.4,3.18,3.18,0,0,0,6.8,10.19,3.2,3.2,0,0,1,10.1,6.8h.29a3.19,3.19,0,0,0,3-2.15,3.21,3.21,0,0,1,4.42-1.83,3.2,3.2,0,0,0,3.79-.76,3.2,3.2,0,0,1,4.78,0,3.21,3.21,0,0,0,3.79.76A3.2,3.2,0,0,1,34.6,4.66a3.19,3.19,0,0,0,3,2.15l.39,0a3.21,3.21,0,0,1,3.2,3.4,3.19,3.19,0,0,0,2.14,3.21,3.19,3.19,0,0,1,2.15,3c0,1.29-.64,1.52-.64,2.79C44.85,21.68,47,21.53,47,24A3.19,3.19,0,0,1,45.93,26.39Z\"/><path fill=\"#f26674\" d=\"M45.93,26.39a3.2,3.2,0,0,0-.76,3.79,3.12,3.12,0,0,1,.18,2.3c0,.1-.76,1.28-.82,1.38a3.08,3.08,0,0,1-1.19.74,3.19,3.19,0,0,0-2.15,3s0,.14,0,.29C27.32,51.18,4,41.37,4,22A21.9,21.9,0,0,1,10.1,6.8a3.2,3.2,0,0,0,3.3-2.14c.38-1.13,1-1.39,2.11-2a2.89,2.89,0,0,1,.91-.14c1.29,0,1.52.64,2.79.64C21.68,3.15,21.53,1,24,1a3.19,3.19,0,0,1,2.39,1.07,3.21,3.21,0,0,0,3.79.76A3.2,3.2,0,0,1,34.6,4.66,3.18,3.18,0,0,0,37.81,6.8a3.2,3.2,0,0,1,3.39,3.39,3.19,3.19,0,0,0,2.14,3.21,3.2,3.2,0,0,1,1.83,4.42,3.2,3.2,0,0,0,.76,3.79A3.2,3.2,0,0,1,45.93,26.39Z\"/><path fill=\"#c4455e\" d=\"M41,24A17,17,0,0,1,24,41C8.17,41,1,21.21,13,11,23.87,1.82,41,9.36,41,24Z\"/><path fill=\"#db5669\" d=\"M41,24a16.91,16.91,0,0,1-4,11,16.91,16.91,0,0,1-11,4C11.38,39,3.81,21.88,13,11,23.87,1.82,41,9.36,41,24Z\"/><path fill=\"#ffde76\" d=\"M16 33a1 1 0 0 1-.71-1.71l16-16a1 1 0 0 1 1.42 1.42C15.31 34.1 16.59 33 16 33zM19 22a4 4 0 1 0-4-4A4 4 0 0 0 19 22zm0-6a2 2 0 1 1-2 2A2 2 0 0 1 19 16zM29 26a4 4 0 1 0 4 4A4 4 0 0 0 29 26zm0 6a2 2 0 1 1 2-2A2 2 0 0 1 29 32z\"/></g></svg>`;\r\nexport const defaultImage = { name: \"object\", x: 200, y: 250, width: 200, height: 200, draggable: true, type: \"image\" }\r\nexport const defaultSvg = { name: \"object\", colorMap: {}, type: \"svg\", x: 100, y: 200, width: 100, height: 100, draggable: true, }\r\nexport const defaultRect = { name: \"object\", x: 150, y: 150, width: 100, stroke: \"#000000\", strokeWidth: 4, height: 100, fill: '#FF0000', draggable: true, type: \"rectangle\" }\r\nexport const defaultRoundedRect = { name: \"object\", x: 150, y: 250, width: 100, stroke: \"#000000\", strokeWidth: 4, height: 100, cornerRadius: 10, fill: '#FF0000', draggable: true, type: \"rectangle\" }\r\nexport const defaultCircle = { name: \"object\", x: 200, y: 100, radius: 50, stroke: \"#000000\", strokeWidth: 4, fill: '#FF0000', draggable: true, type: \"circle\" }\r\nexport const defaultPolygon = { name: \"object\", x: 100, y: 150, sides: 6, stroke: \"#000000\", strokeWidth: 4, radius: 70, fill: '#FF0000', type: \"polygon\" }\r\nexport const defaultTriangle = { name: \"object\", x: 20, y: 200, stroke: \"#000000\", strokeWidth: 4, fill: \"#FF0000\", points: [0, 100, 50, 0, 100, 100], tension: 0, closed: true, type: \"line\", }\r\nexport const defaultTextBox = { name: \"object\", text: 'New text', x: 150, y: 200, fontSize: 20, draggable: true, width: 200, type: \"text\" }\r\nexport const googleFontsList = ['Montserrat', 'Comfortaa', 'Euphoria Script', 'Josefin Sans', 'Oswald', 'Alfa Slab One', 'Bangers', 'Caveat', 'DM Sans', 'East Sea Dokdo', 'Homemade Apple', 'Kristi', 'Lobster Two', 'Maven Pro', 'Monoton', 'Playfair Display', 'Raleway', 'Roboto Slab', 'Shadows Into Light', 'Swanky and Moo Moo']\r\nexport const fontSizeArray = [{ name: \"Header\", size: 40, }, { name: \"Sub header\", size: 25, }, { name: \"body text\", size: 15, }]\r\n\r\n","module.exports = require(\"react-konva\");","module.exports = require(\"react-color\");","module.exports = require(\"use-image\");","module.exports = require(\"react-router-dom\");","import React, { createContext } from 'react'\r\nimport { useImmerState } from '@shrugsy/use-immer-state';\r\nimport { stageDimensions } from '../utils/defaults';\r\n\r\nexport const INITIAL_STATE = {\r\n    palette: [\r\n        { name: \"primary\", color: \"#ff0000\" },\r\n        { name: \"secondary\", color: \"#00ff00\" },\r\n        { name: \"tertiary\", color: \"#0000ff\" }\r\n    ],\r\n    variations: [\r\n        {\r\n            name: \"untitled\",\r\n            face: \"\",\r\n            // background: {\r\n            //     id: 'shapes_background',\r\n            //     type: \"rectangle\",\r\n            //     x: 0,\r\n            //     y: 0,\r\n            //     width: stageDimensions.width,\r\n            //     height: stageDimensions.height,\r\n            //     // fill: '#F0F0F0',\r\n            //     fillLinearGradientStartPoint: { x: 0, y: 0 },\r\n            //     fillLinearGradientEndPoint: { x: stageDimensions.width, y: stageDimensions.height },\r\n            //     fillLinearGradientColorStops: [0, '#F0F0F0', 1, '#F0F0F0'],\r\n            //     draggable: false,\r\n            // },\r\n            textBoxes: [],\r\n            images: [],\r\n            svgs: [],\r\n            shapes: [{\r\n                id: 'shapes_background',\r\n                type: \"rectangle\",\r\n                x: 0,\r\n                y: 0,\r\n                width: stageDimensions.width,\r\n                height: stageDimensions.height,\r\n                // fill: '#F0F0F0',\r\n                fillLinearGradientStartPoint: { x: 0, y: 0 },\r\n                fillLinearGradientEndPoint: { x: stageDimensions.width, y: stageDimensions.height },\r\n                fillLinearGradientColorStops: [0, '#F0F0F0', 1, '#F0F0F0'],\r\n                draggable: false,\r\n            }],\r\n        }\r\n    ],\r\n}\r\n\r\nexport const TemplateContext = createContext(null)\r\n\r\nexport const TemplateProvider = ({ children }) => {\r\n\r\n    const [templateData, setTemplateData, { goForward, goBack, stepNum, history }] = useImmerState(INITIAL_STATE)\r\n\r\n    return (\r\n        <TemplateContext.Provider\r\n            value={[templateData, setTemplateData, { goForward, goBack, stepNum, history }]}\r\n        >\r\n            {children}\r\n        </TemplateContext.Provider >\r\n    );\r\n\r\n}\r\n","module.exports = require(\"express\");","export const ROUTE_NAMES = {\r\n    select_palette: \"/\",\r\n    design_tool: \"/tool\",\r\n}","module.exports = require(\"@shrugsy/use-immer-state\");","module.exports = require(\"use-file-upload\");","module.exports = require(\"react-dom/server\");","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (typeof btoa === \"function\") {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","module.exports = require(\"sweetalert\");","module.exports = require(\"webfontloader\");","import express from 'express';\r\n\r\nlet app = require('./server').default;\r\n\r\nif (module.hot) {\r\n    module.hot.accept('./server', () => {\r\n        console.log('🔁  HMR Reloading `./server`...');\r\n        try {\r\n            app = require('./server').default;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    });\r\n    console.info('✅  Server-side HMR Enabled!');\r\n}\r\n\r\nconst port = process.env.PORT || 3000;\r\n\r\nexport default express()\r\n    .use((req, res) => app.handle(req, res))\r\n    .listen(port, () => {\r\n        console.log(`> App started http://localhost:${port}`)\r\n    });\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@tailwind base;\\n\\n@tailwind components;\\n\\n@tailwind utilities;\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/tailwindcss/tailwind.css\"],\"names\":[],\"mappings\":\"AAAA,cAAc;;AAEd,oBAAoB;;AAEpB,mBAAmB\",\"sourcesContent\":[\"@tailwind base;\\n\\n@tailwind components;\\n\\n@tailwind utilities;\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { useEffect, useState } from \"react\";\r\n\r\nconst NoSSR = ({ children }) => {\r\n    const [isClient, setIsClient] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setIsClient(true)\r\n    }, [])\r\n\r\n    return isClient ? children : null;\r\n}\r\n\r\nexport default NoSSR\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport NoSSR from './NoSSR'\r\nimport { ROUTE_NAMES } from './routes/route_names';\r\nimport { TemplateProvider } from \"./contexts/TemplateContext\"\r\nconst DesignTool = React.lazy(() => import('./components/DesignTool/index'));\r\nconst SelectPalette = React.lazy(() => import('./components/SelectPalette/index'));\r\nimport 'tailwindcss/tailwind.css';\r\n\r\nconst App = () => (\r\n    <Switch>\r\n        <NoSSR>\r\n            <TemplateProvider>\r\n                <Route\r\n                    exact={true}\r\n                    path={ROUTE_NAMES.select_palette}\r\n                    render={() => (\r\n                        <React.Suspense fallback={<div>Loading ...</div>}>\r\n                            <SelectPalette />\r\n                        </React.Suspense>)\r\n                    }\r\n                />\r\n                <Route\r\n                    exact={true}\r\n                    path={ROUTE_NAMES.design_tool}\r\n                    render={() => (\r\n                        <React.Suspense fallback={<div>Loading ...</div>}>\r\n                            <DesignTool />\r\n                        </React.Suspense>)\r\n                    }\r\n                />\r\n            </TemplateProvider>\r\n        </NoSSR>\r\n    </Switch >\r\n);\r\n\r\nexport default App;\r\n","import express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { StaticRouter } from 'react-router-dom';\n\nimport App from './App';\n\nlet assets: any;\n\nconst syncLoadAssets = () => {\n  assets = require(process.env.RAZZLE_ASSETS_MANIFEST!);\n};\nsyncLoadAssets();\n\nconst cssLinksFromAssets = (assets, entrypoint) => {\n  return assets[entrypoint] ? assets[entrypoint].css ?\n  assets[entrypoint].css.map(asset=>\n    `<link rel=\"stylesheet\" href=\"${asset}\">`\n  ).join('') : '' : '';\n};\n\nconst jsScriptTagsFromAssets = (assets, entrypoint, extra = '') => {\n  return assets[entrypoint] ? assets[entrypoint].js ?\n  assets[entrypoint].js.map(asset=>\n    `<script src=\"${asset}\"${extra}></script>`\n  ).join('') : '' : '';\n};\n\nexport const renderApp = (req: express.Request, res: express.Response) => {\n  const context: any = {};\n\n  const markup = renderToString(\n    <StaticRouter context={context} location={req.url}>\n      <App />\n    </StaticRouter>\n  );\n\n  if (context.url) {\n    return { redirect: context.url };\n  } else {\n    const html =\n      // prettier-ignore\n      `<!doctype html>\n    <html lang=\"\">\n    <head>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta charSet='utf-8' />\n        <title>Welcome to Razzle</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        ${cssLinksFromAssets(assets, 'client')}\n    </head>\n    <body>\n        <div id=\"root\">${markup}</div>\n        ${jsScriptTagsFromAssets(assets, 'client', ' defer crossorigin')}\n    </body>\n  </html>`;\n\n    return { html };\n  }\n};\n\nconst server = express()\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR!))\n  .get('/*', (req: express.Request, res: express.Response) => {\n    const { html = '', redirect = false } = renderApp(req, res);\n    if (redirect) {\n      res.redirect(redirect);\n    } else {\n      res.send(html);\n    }\n  });\n\nexport default server;\n","import React, { useState } from 'react'\r\n\r\nconst SelectVariation = ({ variations, variationIndex, setVariationIndex }) => {\r\n\r\n    return (\r\n        <div className=\"flex\">\r\n            {variations.map((item, index) => (\r\n                <p\r\n                    key={index}\r\n                    className={`${variationIndex === index ? \"text-red-100\" : \"text-red-800\"} block px-4 py-2 mr-1 ml-1 text-sm cursor-pointer rounded border border-gray-900 ${variationIndex === index ? \"bg-red-700 hover:bg-red-800\" : \"\"}`}\r\n                    onClick={() => setVariationIndex(index)}\r\n                    role=\"menuitem\"\r\n                    tabIndex={-1}\r\n                >{item.name}</p>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectVariation\r\n","import { useImmerState } from '@shrugsy/use-immer-state'\r\nimport React from 'react'\r\n\r\ninterface Props {\r\n    handleSaveVariation: any\r\n    templateData: any\r\n}\r\n\r\nconst SaveVariation: React.FC<Props> = ({ handleSaveVariation, templateData }) => {\r\n\r\n    const [variationData, setVariationData] = useImmerState({ name: \"untitled\", face: \"#FF0000\" })\r\n\r\n    return (\r\n        <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n                <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n                    <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                        <div className=\"\">\r\n                            <label>Name: </label><input type=\"text\" placeholder=\"Variation name\" onChange={(e) => setVariationData(prev => { prev.name = e.target.value })} />\r\n                            <div>Current face: <div\r\n                                className=\"w-10 h-10 m-5 border border-black\"\r\n                                style={{ backgroundColor: variationData.face }}\r\n                            ></div></div>\r\n                            <p>Select face: </p>\r\n                            {templateData.palette.map((item, index) => (\r\n                                <div key={index} className=\"inline-block\" >\r\n                                    <div\r\n                                        className=\"w-10 h-10 m-5 border border-black\"\r\n                                        style={{ backgroundColor: item.color }}\r\n                                        onClick={() => setVariationData(prev => { prev.face = item.color })}\r\n                                    ></div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                        <button\r\n                            onClick={() => handleSaveVariation(variationData)}\r\n                            type=\"button\"\r\n                            className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SaveVariation\r\n","// parse svg string into DOM\r\nexport function parseSVG(svgString) {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(svgString, \"image/svg+xml\");\r\n    return doc;\r\n}\r\n\r\n// get color of element\r\n// we can also check styles of element and other properties like \"stroke\"\r\nexport function getElementColor(el) {\r\n    return el.getAttribute(\"fill\");\r\n}\r\n\r\n// find all colors used in svg\r\nexport function getColors(svgString) {\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n    const usedColors = [];\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        // if color is defined and uniq we will add it\r\n        if (color && usedColors.indexOf(color) === -1) {\r\n            usedColors.push(color);\r\n        }\r\n    }\r\n    return usedColors;\r\n}\r\n\r\n// convert svg string into base64 data URL\r\nexport function svgToURL(s) {\r\n    const uri = window.btoa(unescape(encodeURIComponent(s)));\r\n    return \"data:image/svg+xml;base64,\" + uri;\r\n}\r\n\r\n// replace colors in svg string\r\nexport function replaceColors(svgString, map) {\r\n    // we can do some RegExp magic here\r\n    // but I will just manually check every element\r\n    const doc = parseSVG(svgString);\r\n    var elements = doc.getElementsByTagName(\"*\");\r\n\r\n    for (const element of elements) {\r\n        const color = getElementColor(element);\r\n        if (map[color]) {\r\n            element.setAttribute(\"fill\", map[color]);\r\n        }\r\n    }\r\n    var xmlSerializer = new XMLSerializer();\r\n    const str = xmlSerializer.serializeToString(doc);\r\n    return str;\r\n}\r\n\r\nexport function getSvgStringFromUpload(files) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            var reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                var svgData: any = e.target.result;\r\n                var parser = new DOMParser();\r\n                var doc = parser.parseFromString(svgData, \"image/svg+xml\");\r\n                resolve(doc.documentElement.outerHTML)\r\n            }\r\n            reader.readAsText(files[0]);\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}","import React from 'react'\r\nimport { defaultCircle, defaultImage, defaultPolygon, defaultRect, defaultRoundedRect, defaultSvg, defaultTextBox, defaultTriangle } from '../../../utils/defaults';\r\nimport * as svg from \"../../../utils/svg\"\r\nimport { useFileUpload } from 'use-file-upload'\r\n\r\nconst SideBar = ({ variationIndex, setTemplateData }) => {\r\n    const [file, selectFile] = useFileUpload()\r\n\r\n    const handleAddNewRect = () => {\r\n        setTemplateData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.variations[variationIndex].shapes.push({ ...defaultRect, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleAddNewCircle = () => {\r\n        setTemplateData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.variations[variationIndex].shapes.push({ ...defaultCircle, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n    const handleAddNewTrianlge = () => {\r\n        setTemplateData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.variations[variationIndex].shapes.push({ ...defaultTriangle, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n    const handleAddNewPolygon = () => {\r\n        setTemplateData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.variations[variationIndex].shapes.push({ ...defaultPolygon, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n    const handleAddNewRoundedRect = () => {\r\n        setTemplateData((prev) => {\r\n            let shapeID = new Date().getTime();\r\n            prev.variations[variationIndex].shapes.push({ ...defaultRoundedRect, id: `shapes_${shapeID.toString()}` })\r\n        })\r\n    }\r\n\r\n    const handleSvgUpload = (e) => {\r\n        svg.getSvgStringFromUpload(e.target.files).then((SVG_STRING) => {\r\n\r\n            setTemplateData((prev) => {\r\n                let svgId = new Date().getTime()\r\n                prev.variations[variationIndex].svgs.push({\r\n\r\n                    id: `svgs_${svgId.toString()}`,\r\n                    svgString: SVG_STRING,\r\n                    ...defaultSvg\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleImageUpload = () => {\r\n        selectFile({ accept: \"image/png, image/jpg, image/jpeg\", multiple: false },\r\n            ({ file }: any) => {\r\n\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n\r\n                reader.onload = () => {\r\n                    //base64encoded string\r\n                    setTemplateData((prev) => {\r\n                        let imageID = new Date().getTime();\r\n                        prev.variations[variationIndex].images.push({\r\n                            ...defaultImage,\r\n                            src: reader.result,\r\n                            id: `images_${imageID.toString()}`\r\n                        })\r\n                    })\r\n                };\r\n            })\r\n    }\r\n\r\n    const handleAddNewText = () => {\r\n        setTemplateData((prev) => {\r\n            let textID = new Date().getTime();\r\n            prev.variations[variationIndex].textBoxes.push({ ...defaultTextBox, id: `textBoxes_${textID.toString()}` })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleAddNewRect}\r\n                >Add new Square</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleAddNewCircle}\r\n                >Add new Circle</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleAddNewTrianlge}\r\n                >Add new Triangle</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleAddNewPolygon}\r\n                >Add new Pentagon</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleAddNewRoundedRect}\r\n                >Add new Rounded Square</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleAddNewText}\r\n                >Add new Text</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <p>upload svg</p>\r\n                <input className=\"\" type=\"file\" accept=\".svg\" onChange={handleSvgUpload} />\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    onClick={handleImageUpload}\r\n                >Upload image</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar\r\n","import React from 'react'\r\n\r\nconst TopToolBar = ({\r\n    onUndo,\r\n    onRedo,\r\n    setTemplateData,\r\n    variationIndex,\r\n    selectedId\r\n}) => {\r\n\r\n    const onBringtoFront = () => {\r\n        if (!selectedId) return\r\n        setTemplateData((prev) => {\r\n            const shapeIndex = prev.variations[variationIndex][selectedId.split(\"_\")[0]].findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n            if (shapeIndex < (prev.variations[variationIndex][selectedId.split(\"_\")[0]].length - 1)) {\r\n\r\n                const temp = prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex]\r\n\r\n                prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex] = prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex + 1]\r\n\r\n                prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex + 1] = temp\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    const onBringtoBack = () => {\r\n        if (!selectedId) return\r\n        setTemplateData((prev) => {\r\n            const shapeIndex = prev.variations[variationIndex][selectedId.split(\"_\")[0]].findIndex(\r\n                (item) => item.id === selectedId\r\n            );\r\n\r\n            // NOTE - shapeIndex > 1 because index 0 is for background\r\n            if (shapeIndex > 1) {\r\n\r\n                const temp = prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex]\r\n\r\n                prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex] = prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex - 1]\r\n\r\n                prev.variations[variationIndex][selectedId.split(\"_\")[0]][shapeIndex - 1] = temp\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex justify-center\">\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={onBringtoFront}\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                >Bring to front</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={onBringtoBack}\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                >Bring to Back</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={onUndo}\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                >Undo</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={onRedo}\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                >Redo</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopToolBar\r\n","import React, { useRef } from 'react';\r\nimport { Rect } from 'react-konva';\r\nimport useImage from \"use-image\"\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst Rectangle: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n    const rectWidth = restProps.width;\r\n    const rectHeight = restProps.height;\r\n    const imageWidth = image ? image.width : 10;\r\n    const imageHeight = image ? image.height : 10;\r\n    const patternScale = restProps.patternScale || Math.max(\r\n        rectWidth / imageWidth,\r\n        rectHeight / imageHeight\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Rect\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    // transformer is changing scale of the node\r\n                    // and NOT its width or height\r\n                    // but in the store we have only width and height\r\n                    // to match the data better we will reset scale on transform end\r\n                    const node = shapeRef.current;\r\n                    const scaleX = node.scaleX();\r\n                    const scaleY = node.scaleY();\r\n\r\n                    // we will reset it back\r\n                    node.scaleX(1);\r\n                    node.scaleY(1);\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: node.x(),\r\n                        y: node.y(),\r\n                        width: Math.max(node.width() * scaleX),\r\n                        height: Math.max(node.height() * scaleY)\r\n                    });\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                fillPatternOffset={{ x: 0, y: 0 }}\r\n                fillPatternScaleX={patternScale}\r\n                fillPatternScaleY={patternScale}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default Rectangle\r\n","import React from 'react';\r\nimport { Circle } from 'react-konva';\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst UCircle: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Circle\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onTransformEnd={(e) => {\r\n                    onChange({\r\n                        ...e.target.attrs,\r\n                    })\r\n                }}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...shapeProps}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default UCircle\r\n","import React, { useRef } from 'react';\r\nimport { RegularPolygon } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst UPolygon: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    const shapeRef = useRef(null)\r\n\r\n    const { patternImageUrl, ...restProps } = shapeProps\r\n    const [image] = useImage(patternImageUrl || null)\r\n    const polRadius = restProps.radius;\r\n    const imageWidth = image ? image.width : 10;\r\n    const imageHeight = image ? image.height : 10;\r\n    console.log({ imageWidth, imageHeight, offset: shapeRef?.current?.fillPatternOffset(), scale: shapeRef?.current?.fillPatternScale() })\r\n    // const patternScale = restProps.patternScale || Math.max(\r\n    //     polRadius / imageWidth,\r\n    //     polRadius / imageHeight\r\n    // );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <RegularPolygon\r\n                ref={shapeRef}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                onTransformEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        scaleX: e.target.attrs.scaleX,\r\n                        scaleY: e.target.attrs.scaleY,\r\n                    });\r\n                }}\r\n                {...restProps}\r\n                fillPatternImage={image}\r\n                fillPatternOffsetX={0}\r\n                fillPatternOffsetY={0}\r\n                fillPatternScaleX={0.1}\r\n                fillPatternScaleY={0.1}\r\n                fillPatternRepeat=\"no-repeat\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default UPolygon\r\n","import React from 'react';\r\nimport { Line } from 'react-konva';\r\n\r\ninterface Props {\r\n    shapeProps: any\r\n    onSelect: any\r\n    onChange: any\r\n    onEditClick: any\r\n}\r\n\r\nconst ULine: React.FC<Props> = ({ shapeProps, onSelect, onChange, onEditClick }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Line\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                draggable\r\n                strokeScaleEnabled={false}\r\n                onDragEnd={(e) => {\r\n                    onChange({\r\n                        ...shapeProps,\r\n                        x: e.target.x(),\r\n                        y: e.target.y(),\r\n                    });\r\n                }}\r\n                {...shapeProps}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default ULine\r\n","import React from 'react';\r\nimport { Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport * as svg from \"../../utils/svg\"\r\n\r\ninterface Props {\r\n    svgProps: any\r\n    onChange: any\r\n    onSelect: any\r\n    onEditClick: any\r\n}\r\n\r\nconst USvg: React.FC<Props> = ({ svgProps, onChange, onSelect, onEditClick }) => {\r\n\r\n    const [image] = useImage(svg.svgToURL(svg.replaceColors(svgProps.svgString, svgProps.colorMap)));\r\n\r\n    return (\r\n        <>\r\n            <Image\r\n                {...svgProps}\r\n                image={image}\r\n                onClick={onSelect}\r\n                onTap={onSelect}\r\n                onDblClick={onEditClick}\r\n                onDblTap={onEditClick}\r\n                onDragEnd={onChange}\r\n                onTransformEnd={onChange}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default USvg\r\n","import React, { useRef } from 'react'\r\nimport { Text } from 'react-konva'\r\n\r\nconst UText = ({ textProps, onChange, onSelect, onEditClick }) => {\r\n    const textNode = useRef(null)\r\n\r\n    return (\r\n        <Text\r\n            ref={textNode}\r\n            draggable\r\n            onClick={onSelect}\r\n            onTap={onSelect}\r\n            onDblClick={onEditClick}\r\n            onDblTap={onEditClick}\r\n            onTransform={(e) => {\r\n                let SX = textNode.current.scaleX();\r\n                let W = textNode.current.width();\r\n\r\n                textNode.current.setAttrs({\r\n                    // ...textNode.current.getAttrs(),\r\n                    // fontSize: isWordWrapping ? textNode.current.fontSize() : textNode.current.fontSize() * textNode.current.scaleX(),\r\n                    width: W * SX,\r\n                    scaleX: 1,\r\n                    scaleY: 1\r\n                });\r\n            }}\r\n            // onTransformEnd={onChange}\r\n            onDragEnd={onChange}\r\n            {...textProps}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UText\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { Transformer } from 'react-konva'\r\n\r\nexport const MIN_WIDTH = 50\r\nexport const MIN_HEIGHT = 30\r\n\r\ninterface Props {\r\n    id: any\r\n    selectedShapeName: any\r\n    $tr: any\r\n}\r\n\r\nconst TransformerComponent: React.FC<Props> = ({ id, selectedShapeName, $tr }) => {\r\n\r\n    useEffect(() => {\r\n        checkNode();\r\n    }, [selectedShapeName])\r\n    const checkNode = () => {\r\n        const stage = $tr.current.getStage();\r\n        const selectedNode = stage.findOne(\"#\" + selectedShapeName);\r\n        if (selectedNode) {\r\n            $tr.current.nodes([selectedNode])\r\n        } else {\r\n            $tr.current.detach();\r\n        }\r\n        $tr.current.getLayer().batchDraw();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transformer\r\n                id={id}\r\n                ref={$tr}\r\n                ignoreStroke={true}\r\n                boundBoxFunc={(oldBox, newBox) => {\r\n                    if (selectedShapeName === \"shapes_background\") return oldBox\r\n                    if (newBox.width < MIN_WIDTH) {\r\n                        return { ...oldBox, width: MIN_WIDTH };\r\n                    }\r\n                    return newBox;\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TransformerComponent","import React from 'react';\r\nimport { Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\ninterface Props {\r\n    imageProps: any\r\n    onChange: any\r\n    onSelect: any\r\n}\r\n\r\nconst UImage: React.FC<Props> = ({ imageProps, onChange, onSelect }) => {\r\n\r\n    const [image] = useImage(imageProps.src)\r\n\r\n    const { src, ...rest } = imageProps\r\n    return (\r\n        <>\r\n            <Image\r\n                {...rest}\r\n                image={image}\r\n                onClick={() => onSelect(imageProps.id)}\r\n                onTap={() => onSelect(imageProps.id)}\r\n                onDragEnd={onChange}\r\n                onTransformEnd={onChange}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default UImage","import React, { useRef, useState } from 'react'\r\nimport { Stage, Layer, Rect } from 'react-konva';\r\nimport Rectangle from \"../Rectangle\"\r\nimport UCircle from \"../UCircle\"\r\nimport UPolygon from \"../UPolygon\"\r\nimport ULine from \"../ULine\"\r\nimport USvg from \"../USvg\"\r\nimport UText from \"../UText\"\r\nimport TransformerComponent from \"../UTransformer\"\r\nimport { stageDimensions } from '../../../utils/defaults';\r\nimport UImage from '../UImage';\r\n\r\ndeclare const window: any\r\n\r\nconst MainStage = ({\r\n    templateData,\r\n    setTemplateData,\r\n    variationIndex,\r\n    selectedId,\r\n    setSelectedId,\r\n    unSelectAll,\r\n    handleEditSelectedItem,\r\n}) => {\r\n\r\n    const GUIDELINE_OFFSET = 5\r\n    const $stage = useRef(null)\r\n    const $layer = useRef(null)\r\n    const $tr = useRef(null)\r\n    const selectionRectRef = useRef(null);\r\n    const selection = useRef({\r\n        visible: false,\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: 0,\r\n        y2: 0\r\n    });\r\n\r\n    const [nodesArray, setNodes] = useState([]);\r\n    const Konva = window.Konva;\r\n\r\n    const getLineGuideStops = skipShape => {\r\n        const vertical: any = [0, stageDimensions.width / 2, stageDimensions.width];\r\n        const horizontal: any = [0, stageDimensions.height / 2, stageDimensions.height];\r\n\r\n        // and we snap over edges and center of each object on the canvas\r\n        $stage.current.find(\".object\").forEach(guideItem => {\r\n            if (guideItem === skipShape) {\r\n                return;\r\n            }\r\n            const box = guideItem.getClientRect();\r\n            // and we can snap to all edges of shapes\r\n            vertical.push([box.x, box.x + box.width, box.x + box.width / 2]);\r\n            horizontal.push([box.y, box.y + box.height, box.y + box.height / 2]);\r\n        });\r\n        return {\r\n            vertical: vertical.flat(),\r\n            horizontal: horizontal.flat()\r\n        };\r\n    };\r\n\r\n    const getObjectSnappingEdges = node => {\r\n        const box = node.getClientRect();\r\n\r\n        return {\r\n            vertical: [\r\n                {\r\n                    guide: Math.round(box.x),\r\n                    offset: Math.round(node.x() - box.x),\r\n                    snap: \"start\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.x + box.width / 2),\r\n                    offset: Math.round(node.x() - box.x - box.width / 2),\r\n                    snap: \"center\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.x + box.width),\r\n                    offset: Math.round(node.x() - box.x - box.width),\r\n                    snap: \"end\"\r\n                }\r\n            ],\r\n            horizontal: [\r\n                {\r\n                    guide: Math.round(box.y),\r\n                    offset: Math.round(node.y() - box.y),\r\n                    snap: \"start\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.y + box.height / 2),\r\n                    offset: Math.round(node.y() - box.y - box.height / 2),\r\n                    snap: \"center\"\r\n                },\r\n                {\r\n                    guide: Math.round(box.y + box.height),\r\n                    offset: Math.round(node.y() - box.y - box.height),\r\n                    snap: \"end\"\r\n                }\r\n            ]\r\n        };\r\n    };\r\n\r\n    const getGuides = (lineGuideStops, itemBounds) => {\r\n        const resultV = [];\r\n        const resultH = [];\r\n\r\n        lineGuideStops.vertical.forEach(lineGuide => {\r\n            itemBounds.vertical.forEach(itemBound => {\r\n                const diff = Math.abs(lineGuide - itemBound.guide);\r\n                // if the distance between guild line and object snap point is close we can consider this for snapping\r\n                if (diff < GUIDELINE_OFFSET) {\r\n                    resultV.push({\r\n                        lineGuide: lineGuide,\r\n                        diff: diff,\r\n                        snap: itemBound.snap,\r\n                        offset: itemBound.offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        lineGuideStops.horizontal.forEach(lineGuide => {\r\n            itemBounds.horizontal.forEach(itemBound => {\r\n                const diff = Math.abs(lineGuide - itemBound.guide);\r\n                if (diff < GUIDELINE_OFFSET) {\r\n                    resultH.push({\r\n                        lineGuide: lineGuide,\r\n                        diff: diff,\r\n                        snap: itemBound.snap,\r\n                        offset: itemBound.offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        const guides = [];\r\n\r\n        // find closest snap\r\n        const minV = resultV.sort((a, b) => a.diff - b.diff)[0];\r\n        const minH = resultH.sort((a, b) => a.diff - b.diff)[0];\r\n        if (minV) {\r\n            guides.push({\r\n                lineGuide: minV.lineGuide,\r\n                offset: minV.offset,\r\n                orientation: \"V\",\r\n                snap: minV.snap\r\n            });\r\n        }\r\n        if (minH) {\r\n            guides.push({\r\n                lineGuide: minH.lineGuide,\r\n                offset: minH.offset,\r\n                orientation: \"H\",\r\n                snap: minH.snap\r\n            });\r\n        }\r\n        return guides;\r\n    };\r\n\r\n    const drawGuides = guides => {\r\n        guides.forEach(lg => {\r\n            if (lg.orientation === \"H\") {\r\n                const lines = new Konva.Line({\r\n                    points: [-6000, lg.lineGuide, 6000, lg.lineGuide],\r\n                    stroke: \"rgb(0, 161, 255)\",\r\n                    strokeWidth: 1,\r\n                    name: \"guid-line\",\r\n                    dash: [4, 6]\r\n                });\r\n                $layer.current.add(lines);\r\n                $layer.current.batchDraw();\r\n            } else if (lg.orientation === \"V\") {\r\n                const lines = new Konva.Line({\r\n                    points: [lg.lineGuide, -6000, lg.lineGuide, 6000],\r\n                    stroke: \"rgb(0, 161, 255)\",\r\n                    strokeWidth: 1,\r\n                    name: \"guid-line\",\r\n                    dash: [4, 6]\r\n                });\r\n                $layer.current.add(lines);\r\n                $layer.current.batchDraw();\r\n            }\r\n        });\r\n    };\r\n\r\n    const _onDragMove = e => {\r\n        const linesArray = $layer.current.find(\".guid-line\")\r\n        if (!!linesArray.length) {\r\n            linesArray.forEach(item => item.destroy())\r\n        }\r\n        const lineGuideStops = getLineGuideStops(e.target);\r\n        const itemBounds = getObjectSnappingEdges(e.target);\r\n        const guides = getGuides(lineGuideStops, itemBounds);\r\n        if (!guides.length) {\r\n            return;\r\n        }\r\n        drawGuides(guides);\r\n        guides.forEach(lg => {\r\n            switch (lg.snap) {\r\n                case \"start\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"center\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"end\": {\r\n                    switch (lg.orientation) {\r\n                        case \"V\": {\r\n                            e.target.x(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        case \"H\": {\r\n                            e.target.y(lg.lineGuide + lg.offset);\r\n                            break;\r\n                        }\r\n                        default:\r\n                            return;\r\n                    }\r\n                    break;\r\n                }\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n    };\r\n\r\n    const _onDragEnd = e => {\r\n        const linesArray = $layer.current.find(\".guid-line\")\r\n        if (!!linesArray.length) {\r\n            linesArray.forEach(item => item.destroy())\r\n        }\r\n        $layer.current.batchDraw();\r\n    };\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage();\r\n        if (clickedOnEmpty) {\r\n            unSelectAll();\r\n            $tr.current.nodes([]);\r\n            setNodes([]);\r\n            // layerRef.current.remove(selectionRectangle);\r\n        }\r\n    };\r\n\r\n    const updateSelectionRect = () => {\r\n        const node = selectionRectRef.current;\r\n        node.setAttrs({\r\n            visible: selection.current.visible,\r\n            x: Math.min(selection.current.x1, selection.current.x2),\r\n            y: Math.min(selection.current.y1, selection.current.y2),\r\n            width: Math.abs(selection.current.x1 - selection.current.x2),\r\n            height: Math.abs(selection.current.y1 - selection.current.y2),\r\n            fill: \"rgba(0, 161, 255, 0.3)\"\r\n        });\r\n        node.getLayer().batchDraw();\r\n    };\r\n\r\n    const oldPos = React.useRef(null);\r\n    const onMouseDown = (e) => {\r\n        const isElement = e.target.findAncestor(\".elements-container\");\r\n        const isTransformer = e.target.findAncestor(\"Transformer\");\r\n        if (isElement || isTransformer) {\r\n            return;\r\n        }\r\n\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.visible = true;\r\n        selection.current.x1 = pos.x;\r\n        selection.current.y1 = pos.y;\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n        oldPos.current = null;\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const selBox = selectionRectRef.current.getClientRect();\r\n\r\n        const elements = [];\r\n        $layer.current.find(\".object\").forEach((elementNode) => {\r\n            const elBox = elementNode.getClientRect();\r\n            if (Konva.Util.haveIntersection(selBox, elBox)) {\r\n                elements.push(elementNode);\r\n            }\r\n        });\r\n        $tr.current.nodes(elements);\r\n        selection.current.visible = false;\r\n        // disable click event\r\n        Konva.listenClickTap = false;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onClickTap = (e) => {\r\n        // if we are selecting with rect, do nothing\r\n        if (selectionRectRef.current.visible()) {\r\n            return;\r\n        }\r\n        let stage = e.target.getStage();\r\n        let layer = $layer.current;\r\n        let tr = $tr.current;\r\n        // if click on empty area - remove all selections\r\n        if (e.target === stage) {\r\n            unSelectAll();\r\n            setNodes([]);\r\n            tr.nodes([]);\r\n            layer.draw();\r\n            return;\r\n        }\r\n\r\n        // do nothing if clicked NOT on our rectangles\r\n        if (!e.target.hasName(\".object\")) {\r\n            return;\r\n        }\r\n\r\n        // do we pressed shift or ctrl?\r\n        const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\r\n        const isSelected = tr.nodes().indexOf(e.target) >= 0;\r\n\r\n        if (!metaPressed && !isSelected) {\r\n            // if no key pressed and the node is not selected\r\n            // select just one\r\n            tr.nodes([e.target]);\r\n        } else if (metaPressed && isSelected) {\r\n            // if we pressed keys and node was selected\r\n            // we need to remove it from selection:\r\n            const nodes = tr.nodes().slice(); // use slice to have new copy of array\r\n            // remove node from array\r\n            nodes.splice(nodes.indexOf(e.target), 1);\r\n            tr.nodes(nodes);\r\n        } else if (metaPressed && !isSelected) {\r\n            // add the node into selection\r\n            const nodes = tr.nodes().concat([e.target]);\r\n            tr.nodes(nodes);\r\n        }\r\n        layer.draw();\r\n    };\r\n\r\n    return (\r\n        <Stage\r\n            ref={$stage}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onMouseMove={onMouseMove}\r\n            onTouchStart={checkDeselect}\r\n            onClick={onClickTap}\r\n            {...stageDimensions}\r\n        >\r\n            <Layer\r\n                ref={$layer}\r\n                onDragMove={_onDragMove}\r\n                onDragEnd={_onDragEnd}\r\n            >\r\n                {templateData.variations[variationIndex].shapes?.filter(item => item.type === \"rectangle\")?.map((rect, i) => {\r\n                    return (\r\n                        <Rectangle\r\n                            key={i}\r\n                            shapeProps={rect}\r\n                            onSelect={(e) => {\r\n                                if (e.current !== undefined) {\r\n                                    let temp = nodesArray;\r\n                                    if (!nodesArray.includes(e.current)) temp.push(e.current);\r\n                                    setNodes(temp);\r\n                                    $tr.current.nodes(nodesArray);\r\n                                    $tr.current.nodes(nodesArray);\r\n                                    $tr.current.getLayer().batchDraw();\r\n                                }\r\n                                setSelectedId(rect.id);\r\n                            }}\r\n                            // onSelect={() => {\r\n                            //     setSelectedId(rect.id)\r\n                            // }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === rect.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData.variations[variationIndex].shapes?.filter(item => item.type === \"circle\")?.map((circle, i) => {\r\n                    return (\r\n                        <UCircle\r\n                            key={i}\r\n                            shapeProps={circle}\r\n                            onSelect={() => {\r\n                                setSelectedId(circle.id)\r\n                            }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === circle.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData.variations[variationIndex].shapes?.filter(item => item.type === \"line\")?.map((line, i) => {\r\n                    return (\r\n                        <ULine\r\n                            key={i}\r\n                            shapeProps={line}\r\n                            onSelect={() => {\r\n                                setSelectedId(line.id)\r\n                            }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === line.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData.variations[variationIndex].shapes?.filter(item => item.type === \"polygon\")?.map((polygon, i) => {\r\n                    return (\r\n                        <UPolygon\r\n                            key={i}\r\n                            shapeProps={polygon}\r\n                            onSelect={() => {\r\n                                setSelectedId(polygon.id)\r\n                            }}\r\n                            onEditClick={handleEditSelectedItem}\r\n                            onChange={(newAttrs) => {\r\n                                setTemplateData((prev) => {\r\n                                    const index = prev.variations[variationIndex].shapes.findIndex(item => item.id === polygon.id)\r\n                                    prev.variations[variationIndex].shapes[index] = newAttrs\r\n                                });\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n                {templateData.variations[variationIndex].svgs?.map((item, index) => (\r\n                    <USvg\r\n                        key={index}\r\n                        svgProps={item}\r\n                        onSelect={() => {\r\n                            setSelectedId(item.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            prev.variations[variationIndex].svgs[index] = {\r\n                                ...prev.variations[variationIndex].svgs[index],\r\n                                ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                            }\r\n                        })}\r\n                    />\r\n                ))}\r\n                {templateData.variations[variationIndex].images?.map((item, index) => (\r\n                    <UImage\r\n                        key={index}\r\n                        imageProps={item}\r\n                        onSelect={() => {\r\n                            setSelectedId(item.id)\r\n                        }}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            prev.variations[variationIndex].images[index] = {\r\n                                ...prev.variations[variationIndex].images[index],\r\n                                ...JSON.parse(JSON.stringify(event.target.attrs))\r\n                            }\r\n                        })}\r\n                    />\r\n                ))}\r\n                {templateData.variations[variationIndex].textBoxes?.map((item, index) => (\r\n                    <UText\r\n                        key={index}\r\n                        textProps={item}\r\n                        onSelect={() => {\r\n                            setSelectedId(item.id)\r\n                        }}\r\n                        onEditClick={handleEditSelectedItem}\r\n                        onChange={(event) => setTemplateData((prev) => {\r\n                            prev.variations[variationIndex].textBoxes[index] = { ...event.target.attrs }\r\n                        })}\r\n                    />\r\n                ))}\r\n                <TransformerComponent\r\n                    id={`tr${selectedId}`}\r\n                    $tr={$tr}\r\n                    selectedShapeName={selectedId}\r\n                />\r\n                <Rect fill=\"rgba(0,0,255,0.5)\" ref={selectionRectRef} />\r\n            </Layer>\r\n        </Stage>\r\n    )\r\n}\r\n\r\nexport default MainStage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { googleFontsList } from '../../utils/defaults'\r\n\r\ninterface Props {\r\n    selectedId: string\r\n    variationIndex: number\r\n    templateData: any\r\n    setTemplateData: any\r\n    handleCloseEditTextModal: any\r\n}\r\n\r\nconst EditTextBox: React.FC<Props> = ({ selectedId, variationIndex, templateData, setTemplateData, handleCloseEditTextModal }) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>(\"\")\r\n    const [fontSize, setFontSize] = useState<number>(20)\r\n    const [fontStyle, setFontStyle] = useState<string>(\"normal\")\r\n    const [fontFamily, setFontFamily] = useState(googleFontsList[0]);\r\n    const [textAlign, setTextAlign] = useState(\"left\")\r\n\r\n    useEffect(() => {\r\n        if (selectedId?.split(\"_\")[0] === \"textBoxes\") {\r\n            const index = templateData.variations[variationIndex].textBoxes.findIndex(item => item.id === selectedId)\r\n            setInputValue(templateData.variations[variationIndex].textBoxes[index].text)\r\n            setFontSize(templateData.variations[variationIndex].textBoxes[index].fontSize)\r\n            setFontFamily(templateData.variations[variationIndex].textBoxes[index].fontFamily)\r\n            setTextAlign(templateData.variations[variationIndex].textBoxes[index].align)\r\n        }\r\n    }, [selectedId])\r\n\r\n    const handleSave = () => {\r\n        setTemplateData(prev => {\r\n            const index = prev.variations[variationIndex].textBoxes.findIndex(item => item.id === selectedId)\r\n            prev.variations[variationIndex].textBoxes[index].text = inputValue\r\n            prev.variations[variationIndex].textBoxes[index].fontSize = fontSize\r\n            prev.variations[variationIndex].textBoxes[index].fontStyle = fontStyle\r\n            prev.variations[variationIndex].textBoxes[index].fontFamily = fontFamily\r\n            prev.variations[variationIndex].textBoxes[index].align = textAlign\r\n        })\r\n        handleCloseEditTextModal()\r\n    }\r\n\r\n    return (\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <div className=\"\">\r\n                    <p>Font Size:</p>\r\n                    <input className=\"border mb-5\" type=\"number\" value={fontSize} onChange={e => setFontSize(parseInt(e.target.value))} />\r\n                    <p>Select Font style:</p>\r\n                    <select className=\"border mb-5\" name=\"font-style\" onChange={e => setFontStyle(e.target.value)}>\r\n                        <option value=\"normal\">normal</option>\r\n                        <option value=\"bold\">bold</option>\r\n                        <option value=\"italic\">italic</option>\r\n                        <option value=\"italic bold\">italic bold</option>\r\n                    </select>\r\n                    <p>Select Text Alignment:</p>\r\n                    <select className=\"border mb-5\" name=\"text-align\" onChange={e => setTextAlign(e.target.value)}>\r\n                        <option value=\"left\">left</option>\r\n                        <option value=\"center\">center</option>\r\n                        <option value=\"right\">right</option>\r\n                    </select>\r\n                    <p>Select font family:</p>\r\n                    <select\r\n                        value={fontFamily}\r\n                        style={{ fontFamily: fontFamily }}\r\n                        onChange={e => setFontFamily(e.target.value)}\r\n                        className=\"border mb-5\"\r\n                    >\r\n                        {googleFontsList.map((val, index) => {\r\n                            return (\r\n                                <option\r\n                                    className=\"bg-white text-black\"\r\n                                    style={{ fontFamily: val }}\r\n                                    key={index}\r\n                                    selected={val === fontFamily}\r\n                                    value={val}\r\n                                >\r\n                                    {val}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"\">\r\n                    <textarea\r\n                        className=\"border h-40 w-full\"\r\n                        style={{\r\n                            fontFamily: fontFamily,\r\n                            fontSize: fontSize,\r\n                            fontStyle: fontStyle,\r\n                            textAlign: textAlign as \"center\",\r\n                        }}\r\n                        value={inputValue}\r\n                        onChange={(e) => setInputValue(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                <button\r\n                    onClick={handleSave}\r\n                    type=\"button\"\r\n                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n                    Done\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTextBox\r\n","import React from 'react'\r\nimport { SketchPicker } from \"react-color\"\r\nimport { useFileUpload } from 'use-file-upload'\r\nimport { stageDimensions } from '../../utils/defaults'\r\n\r\ninterface Props {\r\n    selectedId: string\r\n    templateData: any\r\n    setTemplateData: any\r\n    variationIndex: number\r\n    currentPalette: { name: string, color: string }[]\r\n}\r\n\r\nconst ShapeColorSelector: React.FC<Props> = ({\r\n    selectedId,\r\n    templateData,\r\n    setTemplateData,\r\n    variationIndex,\r\n    currentPalette,\r\n}) => {\r\n    const [file, selectFile] = useFileUpload()\r\n\r\n    const handleFillImagePattern = () => {\r\n        selectFile({ accept: \"image/png, image/jpg, image/jpeg\", multiple: false },\r\n            ({ file }: any) => {\r\n\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n\r\n                reader.onload = () => {\r\n                    //base64encoded string => reader.result\r\n                    setTemplateData((prev) => {\r\n                        const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n                        selectedShape.fill = \"\"\r\n                        selectedShape.patternImageUrl = reader.result\r\n                    })\r\n                };\r\n            })\r\n    }\r\n\r\n    const handleStrokeWidthChange = e => {\r\n        setTemplateData(prev => {\r\n            const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n            selectedShape.strokeWidth = parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleCornerRadius = e => {\r\n        setTemplateData(prev => {\r\n            const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n            selectedShape.cornerRadius = parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleOpacity = e => {\r\n        setTemplateData(prev => {\r\n            const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n            selectedShape.opacity = parseFloat(e.target.value)\r\n        })\r\n    }\r\n\r\n    const handleStrokeColor = (color) => {\r\n        setTemplateData(prev => {\r\n            const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n            selectedShape.stroke = color.hex\r\n        })\r\n    }\r\n\r\n    const handleShapeFill = (color: string) => {\r\n        setTemplateData(prev => {\r\n            const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n            selectedShape.fill = color\r\n            selectedShape.patternImageUrl = undefined\r\n        })\r\n    }\r\n\r\n    const handleGradientColor = (color1: string, color2: string) => {\r\n        setTemplateData(prev => {\r\n            const selectedShape = prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n            selectedShape.fill = \"\"\r\n            selectedShape.fillLinearGradientColorStops = [0, color1, 1, color2]\r\n            selectedShape.fillLinearGradientStartPoint = { x: 0, y: 0 }\r\n            selectedShape.fillLinearGradientEndPoint = {\r\n                x: selectedId === \"shapes_background\" ? stageDimensions.width : 100,\r\n                y: selectedId === \"shapes_background\" ? stageDimensions.height : 100\r\n            }\r\n            selectedShape.patternImageUrl = undefined\r\n        })\r\n    }\r\n\r\n    const handleFillPatternScaleX = (e) => {\r\n        setTemplateData(prev => {\r\n            prev.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n        })\r\n    }\r\n\r\n    const handleFillPatternScaleY = () => {\r\n\r\n    }\r\n\r\n    const handleFillPatternOffsetX = () => {\r\n\r\n    }\r\n\r\n    const handleFillPatternOffsetY = () => {\r\n\r\n    }\r\n\r\n\r\n    const selectedShapeData = templateData.variations[variationIndex].shapes.find(item => item.id === selectedId)\r\n\r\n    return (\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <div className={selectedId !== \"shapes_background\" ? \"\" : \"hidden\"}>\r\n                    <p>Border width: </p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        min={0}\r\n                        value={selectedShapeData?.strokeWidth}\r\n                        onChange={handleStrokeWidthChange}\r\n                    />\r\n                    <p>Corner radius:</p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        value={selectedShapeData?.cornerRadius}\r\n                        onChange={handleCornerRadius}\r\n                    />\r\n                    <p>Opacity: </p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        value={selectedShapeData?.opacity}\r\n                        step={0.1} min={0.1} max={1.0}\r\n                        onChange={handleOpacity}\r\n                    />\r\n                    <p>Borer color:</p>\r\n                    <SketchPicker\r\n                        width=\"150px\"\r\n                        color={selectedShapeData?.stroke}\r\n                        onChange={handleStrokeColor}\r\n                    />\r\n                </div>\r\n                <div className={!!selectedShapeData?.fillPatternImage ? \"\" : \"hidden\"}>\r\n                    <p>Image Offset X: </p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        value={selectedShapeData?.fillPatternOffsetX}\r\n                        step={0.1} min={0.1} max={1.0}\r\n                        onChange={handleFillPatternOffsetX}\r\n                    />\r\n                    <p>Image Offset Y: </p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        value={selectedShapeData?.fillPatternOffsetY}\r\n                        step={0.1} min={0.1} max={1.0}\r\n                        onChange={handleFillPatternOffsetY}\r\n                    />\r\n                    <p>Image Scale X: </p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        value={selectedShapeData?.fillPatternScaleX}\r\n                        step={0.1} min={0.1} max={1.0}\r\n                        onChange={handleFillPatternScaleX}\r\n                    />\r\n                    <p>Image Scale Y: </p>\r\n                    <input\r\n                        className=\"border mb-5\"\r\n                        type=\"number\"\r\n                        value={selectedShapeData?.fillPatternScaleY}\r\n                        step={0.1} min={0.1} max={1.0}\r\n                        onChange={handleFillPatternScaleY}\r\n                    />\r\n\r\n                </div>\r\n                <div>\r\n                    {currentPalette.map((item, index) => (\r\n                        <div key={index} className=\"h-10 mt-5 mb-5 flex flex-wrap justify-center content-center\" >\r\n                            <p className=\"w-48\">Select {item.name}</p> <div\r\n                                className=\"w-10 h-10 border border-black\"\r\n                                style={{ backgroundColor: item.color }}\r\n                                onClick={() => handleShapeFill(item.color)}\r\n                            ></div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"sm:flex sm:items-start\">\r\n                    <SketchPicker\r\n                        width=\"100%\"\r\n                        color={selectedShapeData?.fill}\r\n                        onChange={(color) => handleShapeFill(color.hex)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <div className=\"flex justify-center\">\r\n                    <button\r\n                        className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                        onClick={handleFillImagePattern}\r\n                    >Insert image</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <b>Gradient:</b>\r\n                <div className=\"grid grid-cols-2\">\r\n                    <div>\r\n                        <p>Color 1</p>\r\n                        <div className=\"sm:flex sm:items-start\">\r\n                            <SketchPicker\r\n                                width=\"150px\"\r\n                                color={selectedShapeData?.fillLinearGradientColorStops ?\r\n                                    selectedShapeData?.fillLinearGradientColorStops[1] :\r\n                                    \"#171717\"}\r\n                                onChange={(color) => handleGradientColor(\r\n                                    color.hex,\r\n                                    selectedShapeData?.fillLinearGradientColorStops ?\r\n                                        selectedShapeData?.fillLinearGradientColorStops[3] :\r\n                                        \"#171717\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <p>Color 2</p>\r\n                        <div className=\"sm:flex sm:items-start\">\r\n                            <SketchPicker\r\n                                width=\"150px\"\r\n                                color={selectedShapeData?.fillLinearGradientColorStops ?\r\n                                    selectedShapeData?.fillLinearGradientColorStops[3] :\r\n                                    selectedShapeData?.fill}\r\n                                onChange={(color) => handleGradientColor(\r\n                                    selectedShapeData?.fillLinearGradientColorStops ?\r\n                                        selectedShapeData?.fillLinearGradientColorStops[1] :\r\n                                        selectedShapeData?.fill,\r\n                                    color.hex)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShapeColorSelector\r\n","import React, { useState } from 'react'\r\nimport { SketchPicker } from \"react-color\"\r\nimport * as svg from \"../../utils/svg\"\r\n\r\ninterface Props {\r\n    selectedId: string\r\n    templateData: any\r\n    setTemplateData: any\r\n    variationIndex: number\r\n}\r\n\r\nconst SvgColorSelector: React.FC<Props> = ({\r\n    selectedId,\r\n    templateData,\r\n    setTemplateData,\r\n    variationIndex\r\n}) => {\r\n\r\n    const [currentColor, setCurrentColor] = useState(\"#171717\")\r\n\r\n    const svgData = templateData.variations[variationIndex].svgs.find(item => item.id === selectedId)\r\n    const colors = svg.getColors(svgData.svgString);\r\n    const colorMap = svgData.colorMap\r\n\r\n    const handleSvgElementColorChange = (oldColor: string, newColor: string) => {\r\n        setTemplateData(prev => {\r\n            prev.variations[variationIndex].svgs.find(item => item.id === selectedId)\r\n                .colorMap[oldColor] = newColor\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                <div>\r\n                    <p>Select a color to edit</p>\r\n                    {colors.map((item, index) => (\r\n                        <div key={index} className=\"h-10 m-5 inline-block\" >\r\n                            <div\r\n                                className=\"w-10 h-10 border border-black\"\r\n                                style={{ backgroundColor: svgData.colorMap[item] || item }}\r\n                                onClick={() => setCurrentColor(item)}\r\n                            ></div>\r\n                        </div>\r\n                    ))}\r\n\r\n                </div>\r\n                <div className={!!currentColor ? \"\" : \"hidden\"}>\r\n                    {templateData.palette.map((item, index) => (\r\n                        <div key={index} className=\"h-10 mt-5 mb-5 flex flex-wrap justify-center content-center\" >\r\n                            <p className=\"w-48\">Select {item.name}</p> <div\r\n                                className={\"w-10 h-10 border border-black \" + (currentColor === item.color && \"opacity-50\")}\r\n                                style={{ backgroundColor: item.color }}\r\n                                onClick={() => handleSvgElementColorChange(currentColor, item.color)}\r\n                            ></div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className={!!currentColor ? \"sm:flex sm:items-start\" : \"hidden\"}>\r\n                    <SketchPicker\r\n                        width=\"100%\"\r\n                        color={colorMap[currentColor] || \"#000000\"}\r\n                        onChange={(color) => handleSvgElementColorChange(currentColor, color.hex)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SvgColorSelector\r\n","import React from 'react'\r\nimport EditTextBox from '../../tailwindComponents/EditTextBox'\r\nimport ShapeColorSelector from '../../tailwindComponents/ShapeColorSelector'\r\nimport SvgColorSelector from '../../tailwindComponents/SvgColorSelector'\r\n\r\nconst EditingTools = ({\r\n    selectedId,\r\n    unSelectAll,\r\n    isOpenColorPicker,\r\n    isEditTextBox,\r\n    templateData,\r\n    setTemplateData,\r\n    variationIndex,\r\n    handleEditSelectedItem,\r\n    handleDeleteSelectedItem,\r\n    handleCloseEditTextModal\r\n}) => {\r\n\r\n    return (\r\n        <div className=\"h-screen overflow-y-scroll\">\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={handleEditSelectedItem}\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                >Edit</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={handleDeleteSelectedItem}\r\n                    className={selectedId === \"shapes_background\" ? \"hidden\" : \"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"}\r\n                >Delete</button>\r\n            </div>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    onClick={unSelectAll}\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                >Close</button>\r\n            </div>\r\n            {isOpenColorPicker && selectedId?.split('_')[0] === \"shapes\" && (\r\n                <ShapeColorSelector\r\n                    selectedId={selectedId}\r\n                    templateData={templateData}\r\n                    setTemplateData={setTemplateData}\r\n                    variationIndex={variationIndex}\r\n                    currentPalette={templateData.palette}\r\n                />\r\n            )}\r\n\r\n            {isOpenColorPicker && selectedId?.split('_')[0] === \"svgs\" && (\r\n                <SvgColorSelector\r\n                    selectedId={selectedId}\r\n                    templateData={templateData}\r\n                    setTemplateData={setTemplateData}\r\n                    variationIndex={variationIndex}\r\n                />\r\n            )}\r\n\r\n            {isEditTextBox && <EditTextBox\r\n                selectedId={selectedId}\r\n                templateData={templateData}\r\n                setTemplateData={setTemplateData}\r\n                variationIndex={variationIndex}\r\n                handleCloseEditTextModal={handleCloseEditTextModal}\r\n            />}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditingTools\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { TemplateContext } from '../../contexts/TemplateContext';\r\nimport SelectVariation from \"../tailwindComponents/SelectVariation\"\r\nimport SaveVariation from \"../tailwindComponents/SaveVariation\"\r\nimport swal from \"sweetalert\"\r\nimport SideBar from './SideBar';\r\nimport WebFont from \"webfontloader\";\r\nimport TopToolBar from './TopToolBar';\r\nimport MainStage from './MainStage';\r\nimport EditingTools from './EditingTools';\r\n\r\nconst DesignTool: React.FC = () => {\r\n\r\n    const [variationIndex, setVariationIndex] = useState<number>(0)\r\n\r\n    const [showSaveVariationModal, setShowSaveVariationModal] = useState(false)\r\n\r\n    const [templateData, setTemplateData, { goForward, goBack, stepNum }] = useContext(TemplateContext)\r\n    const [selectedId, setSelectedId] = useState<string | null>(null);\r\n    const [isOpenColorPicker, setIsOpenColorPicker] = useState<boolean>(false)\r\n    const [isEditTextBox, setIsEditTextBox] = useState(false)\r\n\r\n    const unSelectAll = () => {\r\n        setIsOpenColorPicker(false)\r\n        setIsEditTextBox(false)\r\n        setSelectedId(null)\r\n    }\r\n\r\n    const handleEscape = (e) => {\r\n        if (e.key === \"Escape\") {\r\n            unSelectAll()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", handleEscape, false);\r\n        WebFont.load({\r\n            google: {\r\n                families: ['Comfortaa', 'Josefin Sans', 'Euphoria Script', 'Oswald', 'Alfa Slab One', 'Bangers', 'Caveat', 'DM Sans', 'East Sea Dokdo', 'Homemade Apple', 'Kristi', 'Lobster Two', 'Maven Pro', 'Monoton', 'Montserrat', 'Playfair Display', 'Press Start 2P', 'Raleway', 'Roboto Slab', 'Shadows Into Light', 'Swanky and Moo Moo']\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleEscape, false);\r\n        };\r\n    }, []);\r\n\r\n    const onUndo = () => {\r\n        !!setSelectedId && unSelectAll();\r\n        stepNum > 1 && goBack();\r\n    };\r\n    const onRedo = () => {\r\n        !!setSelectedId && unSelectAll();\r\n        stepNum < (history.length - 1) && goForward();\r\n    };\r\n\r\n    const handleSaveVariation = (variationData: any) => {\r\n        setTemplateData(prev => {\r\n            prev.variations[variationIndex].name = variationData.name\r\n            prev.variations[variationIndex].face = variationData.face\r\n        })\r\n        setShowSaveVariationModal(false)\r\n    }\r\n\r\n    const handleAddVariation = () => {\r\n        if (templateData.variations.length < 3) {\r\n            setTemplateData(prev => {\r\n                prev.variations.push(templateData.variations[variationIndex])\r\n            }, false)\r\n            setVariationIndex(prev => (prev + 1))\r\n        } else {\r\n            swal(\"Cannot create more than 3 variations!\")\r\n        }\r\n    }\r\n\r\n    const handleEditSelectedItem = () => {\r\n        if (selectedId.split(\"_\")[0] === \"textBoxes\") {\r\n            setIsEditTextBox(true)\r\n            return\r\n        }\r\n        setIsOpenColorPicker(true)\r\n    }\r\n\r\n    const handleDeleteSelectedItem = () => {\r\n        const type = selectedId.split(\"_\")[0]\r\n        setTemplateData(prev => {\r\n            prev.variations[variationIndex][type] = prev.variations[variationIndex][type].filter(\r\n                item => item.id !== selectedId\r\n            )\r\n            unSelectAll()\r\n        })\r\n    }\r\n\r\n    const handleCloseEditTextModal = () => {\r\n        setIsEditTextBox(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-w-max\">\r\n            <div className=\"h-20 mb-5 flex flex-wrap justify-center content-center bg-green-800\">\r\n                <p className=\"text-xl text-white\">Tempalte Design</p>\r\n            </div>\r\n\r\n            {showSaveVariationModal && (\r\n                <SaveVariation\r\n                    templateData={templateData}\r\n                    handleSaveVariation={handleSaveVariation}\r\n                />\r\n            )}\r\n\r\n            <div className=\"grid grid-cols-3 gap-4\">\r\n\r\n                {/* first col */}\r\n                <SideBar variationIndex={variationIndex} setTemplateData={setTemplateData} />\r\n\r\n                {/* Center column */}\r\n                <div>\r\n                    <TopToolBar\r\n                        onUndo={onUndo}\r\n                        onRedo={onRedo}\r\n                        setTemplateData={setTemplateData}\r\n                        variationIndex={variationIndex}\r\n                        selectedId={selectedId}\r\n                    />\r\n                    <div className=\"flex justify-center mt-5\">\r\n                        <MainStage\r\n                            templateData={templateData}\r\n                            setTemplateData={setTemplateData}\r\n                            variationIndex={variationIndex}\r\n                            selectedId={selectedId}\r\n                            setSelectedId={setSelectedId}\r\n                            unSelectAll={unSelectAll}\r\n                            handleEditSelectedItem={handleEditSelectedItem}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex justify-center mt-5\">\r\n                        <SelectVariation\r\n                            variations={templateData.variations}\r\n                            variationIndex={variationIndex}\r\n                            setVariationIndex={setVariationIndex}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex justify-center\">\r\n                        <button\r\n                            className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                            onClick={() => setShowSaveVariationModal(true)}\r\n                        >Save Variation</button>\r\n                        <button\r\n                            className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                            onClick={handleAddVariation}\r\n                        >Add New Variation</button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* third col */}\r\n                <div className={selectedId ? \"\" : \"hidden\"}>\r\n                    <EditingTools\r\n                        selectedId={selectedId}\r\n                        unSelectAll={unSelectAll}\r\n                        isOpenColorPicker={isOpenColorPicker}\r\n                        isEditTextBox={isEditTextBox}\r\n                        templateData={templateData}\r\n                        setTemplateData={setTemplateData}\r\n                        variationIndex={variationIndex}\r\n                        handleEditSelectedItem={handleEditSelectedItem}\r\n                        handleDeleteSelectedItem={handleDeleteSelectedItem}\r\n                        handleCloseEditTextModal={handleCloseEditTextModal}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div >\r\n    );\r\n};\r\nexport default DesignTool\r\n","import React from 'react'\r\nimport { SketchPicker } from \"react-color\"\r\n\r\ninterface Props {\r\n    currentSelectedColor: string\r\n    handleColorChange: (color: string) => void\r\n    handleCloseColorPicker: () => void\r\n}\r\n\r\nconst Modal: React.FC<Props> = ({ currentSelectedColor, handleColorChange, handleCloseColorPicker }) => {\r\n\r\n    const [currentColor, setCurrentColor] = React.useState(\"#000000\")\r\n\r\n    React.useEffect(() => {\r\n        setCurrentColor(currentSelectedColor)\r\n    }, [currentSelectedColor])\r\n\r\n    const handleSave = () => {\r\n        handleColorChange(currentColor)\r\n        handleCloseColorPicker()\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n                <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n                    <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                        <div className=\"sm:flex sm:items-start\">\r\n                            <SketchPicker\r\n                                color={currentColor}\r\n                                onChange={(color) => setCurrentColor(color.hex)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                        <button\r\n                            onClick={handleSave}\r\n                            type=\"button\"\r\n                            className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n                            Done\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React, { useState, useContext } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { ROUTE_NAMES } from '../../routes/route_names'\r\nimport { TemplateContext } from '../../contexts/TemplateContext'\r\nimport PaletteColorSelect from \"../tailwindComponents/PaletteColorSelect\"\r\n\r\ninterface IColor {\r\n    name: string\r\n    color: string\r\n}\r\n\r\nconst SelectPalette = () => {\r\n\r\n    const [templateData, setTemplateData] = useContext(TemplateContext)\r\n    const [showColorPicker, setShowColorPicker] = useState<boolean>(false)\r\n    const [currentSelectedColor, setCurrentSelectedColor] = useState<IColor | null>(null)\r\n\r\n    const handleShowColorPicker = (Color: IColor) => {\r\n        setShowColorPicker(true)\r\n        setCurrentSelectedColor(Color)\r\n    }\r\n\r\n    const handleCloseColorPicker = () => {\r\n        setShowColorPicker(false)\r\n    }\r\n\r\n    const handleColorChange = (color: string) => {\r\n        setTemplateData(prev => {\r\n            const index = prev.palette.findIndex(item => item.name === currentSelectedColor?.name)\r\n            prev.palette[index].color = color\r\n            setCurrentSelectedColor({ ...currentSelectedColor, color: color })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showColorPicker && (\r\n                <PaletteColorSelect\r\n                    currentSelectedColor={currentSelectedColor.color}\r\n                    handleColorChange={handleColorChange}\r\n                    handleCloseColorPicker={handleCloseColorPicker}\r\n                />\r\n            )}\r\n            <div className=\"h-20 flex flex-wrap justify-center content-center bg-green-800\">\r\n                <p className=\"text-xl text-white\">Select palette for your template</p>\r\n            </div>\r\n            {templateData.palette.map((item, index) => (\r\n                <div key={index} className=\"h-10 mt-5 mb-5 flex flex-wrap justify-center content-center\" >\r\n                    <p className=\"w-48\">{item.name}</p> <div\r\n                        className=\"w-10 h-10 border border-black\"\r\n                        style={{ backgroundColor: item.color }}\r\n                        onClick={() => handleShowColorPicker(item)}\r\n                    ></div>\r\n                </div>\r\n            ))}\r\n            <div className=\"flex justify-center\">\r\n                <NavLink\r\n                    className=\"inline-flex items-center h-8 px-4 m-2 text-sm text-green-100 transition-colors duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800\"\r\n                    to={ROUTE_NAMES.design_tool}\r\n                >\r\n                    Proceed\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectPalette\r\n"],"sourceRoot":""}